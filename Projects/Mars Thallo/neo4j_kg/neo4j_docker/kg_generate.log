2024-08-20 11:21:31,086 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e993990>
2024-08-20 11:21:31,094 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e808450>
2024-08-20 11:21:31,099 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e57c4d0>
2024-08-20 11:21:31,106 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12e8a6390>
2024-08-20 11:21:31,109 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,111 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e464610>
2024-08-20 11:21:31,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,117 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea46590>
2024-08-20 11:21:31,118 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea45790>
2024-08-20 11:21:31,119 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea44590>
2024-08-20 11:21:31,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,123 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea43110>
2024-08-20 11:21:31,126 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,139 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e818cd0>
2024-08-20 11:21:31,140 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea45010>
2024-08-20 11:21:31,141 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea45890>
2024-08-20 11:21:31,141 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,141 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47790>
2024-08-20 11:21:31,141 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,142 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e5d1450>
2024-08-20 11:21:31,142 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea22fd0>
2024-08-20 11:21:31,143 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea23850>
2024-08-20 11:21:31,143 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,144 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea224d0>
2024-08-20 11:21:31,144 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,145 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea21590>
2024-08-20 11:21:31,145 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea20290>
2024-08-20 11:21:31,146 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea203d0>
2024-08-20 11:21:31,146 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,146 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9baed0>
2024-08-20 11:21:31,146 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,147 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9b9c10>
2024-08-20 11:21:31,147 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9b89d0>
2024-08-20 11:21:31,148 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea20710>
2024-08-20 11:21:31,148 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,148 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20350>
2024-08-20 11:21:31,148 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,149 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea22910>
2024-08-20 11:21:31,149 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea23390>
2024-08-20 11:21:31,150 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea23950>
2024-08-20 11:21:31,150 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,150 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e4a4690>
2024-08-20 11:21:31,151 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,151 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea46890>
2024-08-20 11:21:31,151 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea458d0>
2024-08-20 11:21:31,152 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea45790>
2024-08-20 11:21:31,152 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,152 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba7d0>
2024-08-20 11:21:31,153 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,153 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9bac90>
2024-08-20 11:21:31,154 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9bb6d0>
2024-08-20 11:21:31,155 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12e9b3ad0>
2024-08-20 11:21:31,155 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,155 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2850>
2024-08-20 11:21:31,156 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,156 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea46d90>
2024-08-20 11:21:31,159 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea44610>
2024-08-20 11:21:31,160 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea45890>
2024-08-20 11:21:31,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,163 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47e90>
2024-08-20 11:21:31,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,167 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9b8250>
2024-08-20 11:21:31,169 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9ba110>
2024-08-20 11:21:31,170 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12e9b97d0>
2024-08-20 11:21:31,174 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,175 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20e90>
2024-08-20 11:21:31,178 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,179 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea23410>
2024-08-20 11:21:31,180 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea22950>
2024-08-20 11:21:31,182 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea22990>
2024-08-20 11:21:31,182 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,182 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b34d0>
2024-08-20 11:21:31,182 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,183 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9b1c10>
2024-08-20 11:21:31,184 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9b0850>
2024-08-20 11:21:31,185 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea21e90>
2024-08-20 11:21:31,185 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,185 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22710>
2024-08-20 11:21:31,185 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,186 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea23c50>
2024-08-20 11:21:31,187 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea20150>
2024-08-20 11:21:31,187 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea20050>
2024-08-20 11:21:31,188 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,188 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba610>
2024-08-20 11:21:31,188 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,189 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9bae50>
2024-08-20 11:21:31,190 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9baa90>
2024-08-20 11:21:31,190 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea46c50>
2024-08-20 11:21:31,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,191 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea46590>
2024-08-20 11:21:31,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,192 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea44110>
2024-08-20 11:21:31,193 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9b0c50>
2024-08-20 11:21:31,194 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12e9b3490>
2024-08-20 11:21:31,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,195 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e913750>
2024-08-20 11:21:31,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,195 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea44550>
2024-08-20 11:21:31,196 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea44b90>
2024-08-20 11:21:31,197 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea47c50>
2024-08-20 11:21:31,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,198 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b82d0>
2024-08-20 11:21:31,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,198 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9bb790>
2024-08-20 11:21:31,199 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9b8090>
2024-08-20 11:21:31,204 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12e9b94d0>
2024-08-20 11:21:31,206 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,207 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b3110>
2024-08-20 11:21:31,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,208 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9b1950>
2024-08-20 11:21:31,209 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea23850>
2024-08-20 11:21:31,210 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea22510>
2024-08-20 11:21:31,210 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,211 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21850>
2024-08-20 11:21:31,211 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,212 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12e9132d0>
2024-08-20 11:21:31,212 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12e9120d0>
2024-08-20 11:21:31,213 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12ea208d0>
2024-08-20 11:21:31,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,214 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23ad0>
2024-08-20 11:21:31,214 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,214 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x12ea22950>
2024-08-20 11:21:31,215 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ea23f90>
2024-08-20 11:21:31,216 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x12e9b1d50>
2024-08-20 11:21:31,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:21:31,216 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0e90>
2024-08-20 11:21:31,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:31,217 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3f10>
2024-08-20 11:21:31,221 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ba790>
2024-08-20 11:21:31,224 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bb390>
2024-08-20 11:21:31,229 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9baa50>
2024-08-20 11:21:31,232 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,233 - INFO - Created relationship from Extruder to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea47a10>
2024-08-20 11:21:31,235 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,235 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913090>
2024-08-20 11:21:31,238 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e911850>
2024-08-20 11:21:31,240 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9105d0>
2024-08-20 11:21:31,245 - INFO - Created relationship from Sheeting Operator#1 to Rolling Powder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45b10>
2024-08-20 11:21:31,249 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Rolling Powder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,250 - INFO - Created relationship from Rolling Powder to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea463d0>
2024-08-20 11:21:31,254 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,255 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea47910>
2024-08-20 11:21:31,260 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b2190>
2024-08-20 11:21:31,262 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1910>
2024-08-20 11:21:31,266 - INFO - Created relationship from Sheeting Operator#1 to Bull Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bbfd0>
2024-08-20 11:21:31,268 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Bull Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,269 - INFO - Created relationship from Bull Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9babd0>
2024-08-20 11:21:31,273 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,274 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8cd0>
2024-08-20 11:21:31,275 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913dd0>
2024-08-20 11:21:31,276 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913c50>
2024-08-20 11:21:31,281 - INFO - Created relationship from Sheeting Operator#1 to 1st Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea215d0>
2024-08-20 11:21:31,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '1st Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,286 - INFO - Created relationship from 1st Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea23ad0>
2024-08-20 11:21:31,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,291 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20a90>
2024-08-20 11:21:31,292 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ab0d0>
2024-08-20 11:21:31,293 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea22710>
2024-08-20 11:21:31,300 - INFO - Created relationship from Sheeting Operator#1 to 2nd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea20190>
2024-08-20 11:21:31,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '2nd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,304 - INFO - Created relationship from 2nd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22190>
2024-08-20 11:21:31,308 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,309 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb610>
2024-08-20 11:21:31,310 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bbe50>
2024-08-20 11:21:31,312 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bbf10>
2024-08-20 11:21:31,317 - INFO - Created relationship from Sheeting Operator#1 to 3rd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba8d0>
2024-08-20 11:21:31,321 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '3rd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,322 - INFO - Created relationship from 3rd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b03d0>
2024-08-20 11:21:31,326 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,327 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0cd0>
2024-08-20 11:21:31,332 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913b90>
2024-08-20 11:21:31,334 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea46c10>
2024-08-20 11:21:31,339 - INFO - Created relationship from Sheeting Operator#1 to Forming Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45490>
2024-08-20 11:21:31,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Forming Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,343 - INFO - Created relationship from Forming Roller to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea46010>
2024-08-20 11:21:31,347 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,349 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9fd0>
2024-08-20 11:21:31,354 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e912290>
2024-08-20 11:21:31,355 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911b10>
2024-08-20 11:21:31,359 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea46010>
2024-08-20 11:21:31,363 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,365 - INFO - Created relationship from Cooling Roller1 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44e50>
2024-08-20 11:21:31,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,370 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46150>
2024-08-20 11:21:31,371 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bbbd0>
2024-08-20 11:21:31,373 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9450>
2024-08-20 11:21:31,379 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba9d0>
2024-08-20 11:21:31,383 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,385 - INFO - Created relationship from Cooling Roller2 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b12d0>
2024-08-20 11:21:31,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,389 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20790>
2024-08-20 11:21:31,394 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea23510>
2024-08-20 11:21:31,396 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23c90>
2024-08-20 11:21:31,404 - INFO - Created relationship from Sheeting Operator#1 to Scoring Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa290>
2024-08-20 11:21:31,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Scoring Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,411 - INFO - Created relationship from Scoring Roller to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a8c90>
2024-08-20 11:21:31,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,416 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1110>
2024-08-20 11:21:31,420 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b3ed0>
2024-08-20 11:21:31,425 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b93d0>
2024-08-20 11:21:31,431 - INFO - Created relationship from Sheeting Operator#2 to SPC Weighter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9f50>
2024-08-20 11:21:31,435 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'SPC Weighter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,437 - INFO - Created relationship from SPC Weighter to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba1d0>
2024-08-20 11:21:31,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,442 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23010>
2024-08-20 11:21:31,447 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea22950>
2024-08-20 11:21:31,448 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20110>
2024-08-20 11:21:31,454 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea44b90>
2024-08-20 11:21:31,457 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,459 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea47010>
2024-08-20 11:21:31,463 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,466 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910c90>
2024-08-20 11:21:31,473 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ab910>
2024-08-20 11:21:31,482 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab850>
2024-08-20 11:21:31,487 - INFO - Created relationship from Pre-Process Operator to Xylitol Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9af910>
2024-08-20 11:21:31,492 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Xylitol Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,494 - INFO - Created relationship from Xylitol Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a8410>
2024-08-20 11:21:31,497 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Xylitol Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,499 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aa550>
2024-08-20 11:21:31,500 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea47dd0>
2024-08-20 11:21:31,501 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea45090>
2024-08-20 11:21:31,520 - INFO - Created relationship from Pre-Process Operator to Sugar Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12d64df50>
2024-08-20 11:21:31,527 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Sugar Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,528 - INFO - Created relationship from Sugar Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea20290>
2024-08-20 11:21:31,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,531 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea230d0>
2024-08-20 11:21:31,532 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea22890>
2024-08-20 11:21:31,535 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913a50>
2024-08-20 11:21:31,536 - INFO - Created relationship from Pre-Process Operator to Dissolving Tank with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba1d0>
2024-08-20 11:21:31,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Dissolving Tank'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,539 - INFO - Created relationship from Dissolving Tank to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b9a50>
2024-08-20 11:21:31,541 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dissolving Tank'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,542 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b21d0>
2024-08-20 11:21:31,547 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b0ed0>
2024-08-20 11:21:31,549 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ae790>
2024-08-20 11:21:31,553 - INFO - Created relationship from Mixing Operator to Flowmeter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba9d0>
2024-08-20 11:21:31,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Flowmeter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,558 - INFO - Created relationship from Flowmeter to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba310>
2024-08-20 11:21:31,560 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Flowmeter'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,562 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2dd0>
2024-08-20 11:21:31,563 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b37d0>
2024-08-20 11:21:31,564 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20f10>
2024-08-20 11:21:31,569 - INFO - Created relationship from Mixing Operator to Jacket Warer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23cd0>
2024-08-20 11:21:31,572 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Jacket Warer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,574 - INFO - Created relationship from Jacket Warer to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22950>
2024-08-20 11:21:31,578 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Jacket Warer'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,579 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e551e50>
2024-08-20 11:21:31,580 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea450d0>
2024-08-20 11:21:31,582 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44810>
2024-08-20 11:21:31,586 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913d50>
2024-08-20 11:21:31,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,590 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9abe10>
2024-08-20 11:21:31,592 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,593 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aebd0>
2024-08-20 11:21:31,595 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ace10>
2024-08-20 11:21:31,596 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aa350>
2024-08-20 11:21:31,602 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9350>
2024-08-20 11:21:31,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,607 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aa9d0>
2024-08-20 11:21:31,610 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,612 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ab090>
2024-08-20 11:21:31,613 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea44810>
2024-08-20 11:21:31,614 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea45a90>
2024-08-20 11:21:31,621 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45e10>
2024-08-20 11:21:31,625 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,627 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e936d50>
2024-08-20 11:21:31,630 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,632 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910650>
2024-08-20 11:21:31,633 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e910050>
2024-08-20 11:21:31,636 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e94c750>
2024-08-20 11:21:31,647 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0b90>
2024-08-20 11:21:31,655 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,660 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b2c90>
2024-08-20 11:21:31,664 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,666 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2410>
2024-08-20 11:21:31,669 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913dd0>
2024-08-20 11:21:31,673 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9116d0>
2024-08-20 11:21:31,677 - INFO - Created relationship from Management personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910b10>
2024-08-20 11:21:31,679 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Management personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,680 - INFO - Created relationship from nan to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e912550>
2024-08-20 11:21:31,682 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,683 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2610>
2024-08-20 11:21:31,688 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b0b90>
2024-08-20 11:21:31,693 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b15d0>
2024-08-20 11:21:31,695 - INFO - Created relationship from Production personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:31,699 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Production personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,700 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea47a90>
2024-08-20 11:21:31,704 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,705 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea47150>
2024-08-20 11:21:31,706 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ab010>
2024-08-20 11:21:31,711 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8d90>
2024-08-20 11:21:31,712 - INFO - Created relationship from Quality control personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa190>
2024-08-20 11:21:31,716 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Quality control personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,717 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea21190>
2024-08-20 11:21:31,717 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,718 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea44e50>
2024-08-20 11:21:31,718 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea44810>
2024-08-20 11:21:31,724 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea46b10>
2024-08-20 11:21:31,725 - INFO - Created relationship from Research and development personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0710>
2024-08-20 11:21:31,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Research and development personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,730 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1d90>
2024-08-20 11:21:31,731 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,732 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2610>
2024-08-20 11:21:31,732 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e482550>
2024-08-20 11:21:31,736 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aa650>
2024-08-20 11:21:31,738 - INFO - Created relationship from Logistics personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:31,742 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Logistics personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,743 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9abb90>
2024-08-20 11:21:31,743 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,745 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e912290>
2024-08-20 11:21:31,750 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e910850>
2024-08-20 11:21:31,755 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20810>
2024-08-20 11:21:31,760 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22850>
2024-08-20 11:21:31,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,780 - INFO - Created relationship from Sieve Shaker to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a80d0>
2024-08-20 11:21:31,782 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,784 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ab850>
2024-08-20 11:21:31,785 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ab890>
2024-08-20 11:21:31,789 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9f10>
2024-08-20 11:21:31,799 - INFO - Created relationship from Raw Material Operator to Elevator with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911c50>
2024-08-20 11:21:31,801 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Elevator'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,808 - INFO - Created relationship from Elevator to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e911110>
2024-08-20 11:21:31,810 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Elevator'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,811 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910550>
2024-08-20 11:21:31,816 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b1a10>
2024-08-20 11:21:31,820 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0290>
2024-08-20 11:21:31,828 - INFO - Created relationship from Raw Material Operator to 1#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45a10>
2024-08-20 11:21:31,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '1#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,839 - INFO - Created relationship from 1#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44810>
2024-08-20 11:21:31,843 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,844 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23450>
2024-08-20 11:21:31,845 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea23010>
2024-08-20 11:21:31,849 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23090>
2024-08-20 11:21:31,866 - INFO - Created relationship from Raw Material Operator to 2#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1d10>
2024-08-20 11:21:31,869 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '2#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,876 - INFO - Created relationship from 2#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1850>
2024-08-20 11:21:31,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,880 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b33d0>
2024-08-20 11:21:31,880 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea464d0>
2024-08-20 11:21:31,884 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea46b10>
2024-08-20 11:21:31,891 - INFO - Created relationship from Raw Material Operator to 3#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45290>
2024-08-20 11:21:31,893 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '3#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,898 - INFO - Created relationship from 3#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9117d0>
2024-08-20 11:21:31,900 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,901 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e911c50>
2024-08-20 11:21:31,901 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9125d0>
2024-08-20 11:21:31,904 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9b10>
2024-08-20 11:21:31,911 - INFO - Created relationship from Raw Material Operator to Sugar Grinder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8ad0>
2024-08-20 11:21:31,915 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grinder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,918 - INFO - Created relationship from Sugar Grinder to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22950>
2024-08-20 11:21:31,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinder'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,921 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23dd0>
2024-08-20 11:21:31,922 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea20310>
2024-08-20 11:21:31,924 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab390>
2024-08-20 11:21:31,929 - INFO - Created relationship from Raw Material Operator to Sugar Grind Blower with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa990>
2024-08-20 11:21:31,933 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grind Blower'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,936 - INFO - Created relationship from Sugar Grind Blower to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a9ed0>
2024-08-20 11:21:31,939 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grind Blower'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,939 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913dd0>
2024-08-20 11:21:31,940 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913110>
2024-08-20 11:21:31,941 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9102d0>
2024-08-20 11:21:31,948 - INFO - Created relationship from Raw Material Operator to Sugar Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea46c50>
2024-08-20 11:21:31,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,957 - INFO - Created relationship from Sugar Sieve Shaker to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea446d0>
2024-08-20 11:21:31,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Sieve Shaker'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,962 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea45c90>
2024-08-20 11:21:31,963 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b05d0>
2024-08-20 11:21:31,966 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b24d0>
2024-08-20 11:21:31,975 - INFO - Created relationship from Raw Material Operator to Sugar Unloader with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21c90>
2024-08-20 11:21:31,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Unloader'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,982 - INFO - Created relationship from Sugar Unloader to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea21a10>
2024-08-20 11:21:31,984 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Unloader'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,986 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba450>
2024-08-20 11:21:31,990 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b2c90>
2024-08-20 11:21:31,991 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3790>
2024-08-20 11:21:31,992 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1550>
2024-08-20 11:21:31,992 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:31,993 - INFO - Created relationship from Sieve Shaker to 胶基 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea21290>
2024-08-20 11:21:31,997 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '胶基'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:31,998 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20c90>
2024-08-20 11:21:32,001 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913910>
2024-08-20 11:21:32,001 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910ed0>
2024-08-20 11:21:32,003 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911ed0>
2024-08-20 11:21:32,003 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,003 - INFO - Created relationship from Sieve Shaker to 山梨醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44650>
2024-08-20 11:21:32,007 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '山梨醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,008 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea44b50>
2024-08-20 11:21:32,013 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea44250>
2024-08-20 11:21:32,014 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab5d0>
2024-08-20 11:21:32,015 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa010>
2024-08-20 11:21:32,015 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,016 - INFO - Created relationship from Sieve Shaker to 木糖醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb510>
2024-08-20 11:21:32,020 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '木糖醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,021 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46290>
2024-08-20 11:21:32,025 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea45790>
2024-08-20 11:21:32,026 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:32,027 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9135d0>
2024-08-20 11:21:32,027 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,028 - INFO - Created relationship from Sieve Shaker to 表面粉 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e910a90>
2024-08-20 11:21:32,032 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '表面粉'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,033 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910e10>
2024-08-20 11:21:32,037 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9abe10>
2024-08-20 11:21:32,038 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aa990>
2024-08-20 11:21:32,039 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea214d0>
2024-08-20 11:21:32,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,040 - INFO - Created relationship from Sieve Shaker to 香精 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22390>
2024-08-20 11:21:32,044 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '香精'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,045 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2c50>
2024-08-20 11:21:32,046 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b2e50>
2024-08-20 11:21:32,047 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bbdd0>
2024-08-20 11:21:32,048 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb2d0>
2024-08-20 11:21:32,048 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,049 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea20910>
2024-08-20 11:21:32,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,050 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea22dd0>
2024-08-20 11:21:32,051 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a9a10>
2024-08-20 11:21:32,052 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab1d0>
2024-08-20 11:21:32,053 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8d90>
2024-08-20 11:21:32,053 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,054 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b21d0>
2024-08-20 11:21:32,054 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,054 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3090>
2024-08-20 11:21:32,055 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913350>
2024-08-20 11:21:32,056 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913a50>
2024-08-20 11:21:32,057 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e912290>
2024-08-20 11:21:32,057 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,058 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44590>
2024-08-20 11:21:32,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,059 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea47dd0>
2024-08-20 11:21:32,060 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ba550>
2024-08-20 11:21:32,061 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8150>
2024-08-20 11:21:32,062 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45bd0>
2024-08-20 11:21:32,062 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,063 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea47cd0>
2024-08-20 11:21:32,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,064 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910ad0>
2024-08-20 11:21:32,064 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e911c50>
2024-08-20 11:21:32,065 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913f50>
2024-08-20 11:21:32,069 - INFO - Created relationship from Mixing Operator to Mixer Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb890>
2024-08-20 11:21:32,071 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,072 - INFO - Created relationship from Mixer Dusting Machine to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb7d0>
2024-08-20 11:21:32,076 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer Dusting Machine'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,077 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9abe10>
2024-08-20 11:21:32,078 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a8490>
2024-08-20 11:21:32,079 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2d10>
2024-08-20 11:21:32,082 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1550>
2024-08-20 11:21:32,086 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,087 - INFO - Created relationship from Model Temperature Controller 1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea23f10>
2024-08-20 11:21:32,090 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,091 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21310>
2024-08-20 11:21:32,092 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9af2d0>
2024-08-20 11:21:32,093 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1150>
2024-08-20 11:21:32,099 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b3d90>
2024-08-20 11:21:32,102 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,105 - INFO - Created relationship from Model Temperature Controller 2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea210d0>
2024-08-20 11:21:32,109 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,110 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21550>
2024-08-20 11:21:32,112 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a92d0>
2024-08-20 11:21:32,113 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9010>
2024-08-20 11:21:32,117 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a83d0>
2024-08-20 11:21:32,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,122 - INFO - Created relationship from Model Temperature Controller 3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e910210>
2024-08-20 11:21:32,126 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,128 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913290>
2024-08-20 11:21:32,129 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bbe10>
2024-08-20 11:21:32,130 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bab50>
2024-08-20 11:21:32,137 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea444d0>
2024-08-20 11:21:32,139 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,141 - INFO - Created relationship from Model Temperature Controller 4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ae990>
2024-08-20 11:21:32,145 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,147 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ae550>
2024-08-20 11:21:32,148 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bab50>
2024-08-20 11:21:32,149 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8a90>
2024-08-20 11:21:32,151 - INFO - Created relationship from Sheeting Operator#1 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea444d0>
2024-08-20 11:21:32,153 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,155 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea45810>
2024-08-20 11:21:32,155 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,156 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aa510>
2024-08-20 11:21:32,157 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a8d10>
2024-08-20 11:21:32,158 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911490>
2024-08-20 11:21:32,160 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913dd0>
2024-08-20 11:21:32,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,161 - INFO - Created relationship from Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9134d0>
2024-08-20 11:21:32,166 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,168 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20590>
2024-08-20 11:21:32,169 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea23390>
2024-08-20 11:21:32,170 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1310>
2024-08-20 11:21:32,175 - INFO - Created relationship from Sheeting Operator#1 to Triam Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ac8d0>
2024-08-20 11:21:32,178 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Triam Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,180 - INFO - Created relationship from Triam Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ad8d0>
2024-08-20 11:21:32,183 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Triam Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,184 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9af150>
2024-08-20 11:21:32,185 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9aee10>
2024-08-20 11:21:32,187 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9750>
2024-08-20 11:21:32,191 - INFO - Created relationship from Sheeting Operator#2 to Dehumidifer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9badd0>
2024-08-20 11:21:32,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Dehumidifer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,196 - INFO - Created relationship from Dehumidifer to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b8d50>
2024-08-20 11:21:32,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dehumidifer'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,202 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8fd0>
2024-08-20 11:21:32,203 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e550790>
2024-08-20 11:21:32,205 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8490>
2024-08-20 11:21:32,217 - INFO - Created relationship from Sheeting Operator#2 to Refrigerating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9f90>
2024-08-20 11:21:32,224 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Refrigerating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,233 - INFO - Created relationship from Refrigerating Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9abe10>
2024-08-20 11:21:32,237 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Refrigerating Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,239 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23390>
2024-08-20 11:21:32,240 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea22b50>
2024-08-20 11:21:32,241 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20190>
2024-08-20 11:21:32,247 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23fd0>
2024-08-20 11:21:32,251 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,253 - INFO - Created relationship from Sheeting Dusting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9abdd0>
2024-08-20 11:21:32,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Dusting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,258 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aad50>
2024-08-20 11:21:32,260 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a8c10>
2024-08-20 11:21:32,261 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8190>
2024-08-20 11:21:32,267 - INFO - Created relationship from Sheeting Operator#1 to First Floor Air Conditioner with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9790>
2024-08-20 11:21:32,270 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'First Floor Air Conditioner'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,272 - INFO - Created relationship from First Floor Air Conditioner to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bbc50>
2024-08-20 11:21:32,276 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'First Floor Air Conditioner'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,278 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba9d0>
2024-08-20 11:21:32,283 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ba990>
2024-08-20 11:21:32,288 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9afb50>
2024-08-20 11:21:32,296 - INFO - Created relationship from 小包装操作员 to Wax Pool with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21e10>
2024-08-20 11:21:32,300 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Wax Pool'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,302 - INFO - Created relationship from Wax Pool to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea20c50>
2024-08-20 11:21:32,304 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Wax Pool'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,306 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21a50>
2024-08-20 11:21:32,307 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e818050>
2024-08-20 11:21:32,309 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911bd0>
2024-08-20 11:21:32,316 - INFO - Created relationship from 小包装操作员 to Hot Melt Adhesive with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aee50>
2024-08-20 11:21:32,320 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Hot Melt Adhesive'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,322 - INFO - Created relationship from Hot Melt Adhesive to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9afed0>
2024-08-20 11:21:32,326 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Hot Melt Adhesive'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,327 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb710>
2024-08-20 11:21:32,329 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bb2d0>
2024-08-20 11:21:32,330 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b92d0>
2024-08-20 11:21:32,336 - INFO - Created relationship from 小包装操作员 to 1#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e937ed0>
2024-08-20 11:21:32,340 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,342 - INFO - Created relationship from 1#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22390>
2024-08-20 11:21:32,346 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,348 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20050>
2024-08-20 11:21:32,349 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea22910>
2024-08-20 11:21:32,351 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20b90>
2024-08-20 11:21:32,357 - INFO - Created relationship from 小包装操作员 to 2#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ab690>
2024-08-20 11:21:32,360 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,361 - INFO - Created relationship from 2#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a9c50>
2024-08-20 11:21:32,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,366 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e911d90>
2024-08-20 11:21:32,368 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e911410>
2024-08-20 11:21:32,369 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9810>
2024-08-20 11:21:32,376 - INFO - Created relationship from 小包装操作员 to 3#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8f50>
2024-08-20 11:21:32,379 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,390 - INFO - Created relationship from 3#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aac50>
2024-08-20 11:21:32,393 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,395 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e936d50>
2024-08-20 11:21:32,396 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea22790>
2024-08-20 11:21:32,403 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea22890>
2024-08-20 11:21:32,421 - INFO - Created relationship from 小包装操作员 to 4#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea210d0>
2024-08-20 11:21:32,424 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,445 - INFO - Created relationship from 4#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea23350>
2024-08-20 11:21:32,448 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,449 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bbf10>
2024-08-20 11:21:32,449 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b8650>
2024-08-20 11:21:32,451 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8a90>
2024-08-20 11:21:32,457 - INFO - Created relationship from 小包装操作员 to 5#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aee10>
2024-08-20 11:21:32,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,465 - INFO - Created relationship from 5#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e913890>
2024-08-20 11:21:32,467 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,468 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e912090>
2024-08-20 11:21:32,469 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9aee10>
2024-08-20 11:21:32,473 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aeb90>
2024-08-20 11:21:32,483 - INFO - Created relationship from 小包装操作员 to 6#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21590>
2024-08-20 11:21:32,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,494 - INFO - Created relationship from 6#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea20c90>
2024-08-20 11:21:32,497 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,498 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23d50>
2024-08-20 11:21:32,499 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea22190>
2024-08-20 11:21:32,502 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9d10>
2024-08-20 11:21:32,515 - INFO - Created relationship from 小包装操作员 to 7#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bbd50>
2024-08-20 11:21:32,517 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,526 - INFO - Created relationship from 7#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb510>
2024-08-20 11:21:32,528 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,529 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aac50>
2024-08-20 11:21:32,530 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ab410>
2024-08-20 11:21:32,535 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8bd0>
2024-08-20 11:21:32,546 - INFO - Created relationship from 小包装操作员 to 8#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911c50>
2024-08-20 11:21:32,548 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,554 - INFO - Created relationship from 8#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1d90>
2024-08-20 11:21:32,558 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,560 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e911ad0>
2024-08-20 11:21:32,561 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913990>
2024-08-20 11:21:32,565 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ba290>
2024-08-20 11:21:32,573 - INFO - Created relationship from 小包装操作员 to 9#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bbf10>
2024-08-20 11:21:32,577 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,582 - INFO - Created relationship from 9#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b8910>
2024-08-20 11:21:32,586 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,588 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9f50>
2024-08-20 11:21:32,589 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9aa510>
2024-08-20 11:21:32,592 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab210>
2024-08-20 11:21:32,599 - INFO - Created relationship from 小包装操作员 to 10#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8dd0>
2024-08-20 11:21:32,603 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,610 - INFO - Created relationship from 10#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea23c90>
2024-08-20 11:21:32,613 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,614 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea22fd0>
2024-08-20 11:21:32,615 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea23dd0>
2024-08-20 11:21:32,619 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9af150>
2024-08-20 11:21:32,629 - INFO - Created relationship from 小包装操作员 to 11#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b16d0>
2024-08-20 11:21:32,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '11#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,636 - INFO - Created relationship from 11#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aeb90>
2024-08-20 11:21:32,640 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '11#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,642 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aa950>
2024-08-20 11:21:32,643 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9aa290>
2024-08-20 11:21:32,646 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8650>
2024-08-20 11:21:32,654 - INFO - Created relationship from 小包装操作员 to 12#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea226d0>
2024-08-20 11:21:32,658 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '12#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,663 - INFO - Created relationship from 12#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea20450>
2024-08-20 11:21:32,667 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '12#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,669 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21290>
2024-08-20 11:21:32,670 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea23d50>
2024-08-20 11:21:32,673 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bb410>
2024-08-20 11:21:32,683 - INFO - Created relationship from 小包装操作员 to 1#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bbed0>
2024-08-20 11:21:32,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,692 - INFO - Created relationship from 1#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba1d0>
2024-08-20 11:21:32,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,695 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e912590>
2024-08-20 11:21:32,696 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b05d0>
2024-08-20 11:21:32,701 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1750>
2024-08-20 11:21:32,709 - INFO - Created relationship from 小包装操作员 to 2#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9450>
2024-08-20 11:21:32,712 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,719 - INFO - Created relationship from 2#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b8c10>
2024-08-20 11:21:32,721 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,722 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8690>
2024-08-20 11:21:32,723 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e912350>
2024-08-20 11:21:32,726 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912bd0>
2024-08-20 11:21:32,736 - INFO - Created relationship from 小包装操作员 to 3#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21d50>
2024-08-20 11:21:32,738 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,743 - INFO - Created relationship from 3#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22550>
2024-08-20 11:21:32,745 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,746 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21bd0>
2024-08-20 11:21:32,747 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ab010>
2024-08-20 11:21:32,750 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab250>
2024-08-20 11:21:32,759 - INFO - Created relationship from 小包装操作员 to 4#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9490>
2024-08-20 11:21:32,763 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,768 - INFO - Created relationship from 4#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ae750>
2024-08-20 11:21:32,769 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,770 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1b90>
2024-08-20 11:21:32,771 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea45510>
2024-08-20 11:21:32,774 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9af9d0>
2024-08-20 11:21:32,783 - INFO - Created relationship from 小包装操作员 to 5#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa7d0>
2024-08-20 11:21:32,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,790 - INFO - Created relationship from 5#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aa710>
2024-08-20 11:21:32,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,793 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aa990>
2024-08-20 11:21:32,794 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea20b10>
2024-08-20 11:21:32,796 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea239d0>
2024-08-20 11:21:32,805 - INFO - Created relationship from 小包装操作员 to 6#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21d50>
2024-08-20 11:21:32,809 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,814 - INFO - Created relationship from 6#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea233d0>
2024-08-20 11:21:32,818 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,819 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e912dd0>
2024-08-20 11:21:32,820 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b1d10>
2024-08-20 11:21:32,823 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bb510>
2024-08-20 11:21:32,839 - INFO - Created relationship from 小包装操作员 to 7#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b8650>
2024-08-20 11:21:32,840 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,845 - INFO - Created relationship from 7#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb4d0>
2024-08-20 11:21:32,847 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,848 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea45890>
2024-08-20 11:21:32,849 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e913250>
2024-08-20 11:21:32,851 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8490>
2024-08-20 11:21:32,856 - INFO - Created relationship from 小包装操作员 to 8#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b8f90>
2024-08-20 11:21:32,860 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,864 - INFO - Created relationship from 8#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba150>
2024-08-20 11:21:32,865 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,866 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3f10>
2024-08-20 11:21:32,867 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b2550>
2024-08-20 11:21:32,870 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea227d0>
2024-08-20 11:21:32,876 - INFO - Created relationship from 小包装操作员 to 9#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea20ad0>
2024-08-20 11:21:32,878 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,882 - INFO - Created relationship from 9#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea208d0>
2024-08-20 11:21:32,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,885 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21590>
2024-08-20 11:21:32,886 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9aba10>
2024-08-20 11:21:32,888 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9f90>
2024-08-20 11:21:32,896 - INFO - Created relationship from 小包装操作员 to 10#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ac110>
2024-08-20 11:21:32,899 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,904 - INFO - Created relationship from 10#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44810>
2024-08-20 11:21:32,907 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,908 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23710>
2024-08-20 11:21:32,908 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea20fd0>
2024-08-20 11:21:32,911 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea22290>
2024-08-20 11:21:32,919 - INFO - Created relationship from 小包装操作员 to PKG Dusting  Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea224d0>
2024-08-20 11:21:32,922 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'PKG Dusting  Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,926 - INFO - Created relationship from PKG Dusting  Machine to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b3b50>
2024-08-20 11:21:32,928 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'PKG Dusting  Machine'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,929 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1450>
2024-08-20 11:21:32,932 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:32,938 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9b50>
2024-08-20 11:21:32,966 - INFO - Created relationship from 大包装操作员 to 1#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aaf10>
2024-08-20 11:21:32,969 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,975 - INFO - Created relationship from 1#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b8550>
2024-08-20 11:21:32,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,978 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bbad0>
2024-08-20 11:21:32,978 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e911c90>
2024-08-20 11:21:32,980 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:32,986 - INFO - Created relationship from 大包装操作员 to 2#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95c250>
2024-08-20 11:21:32,990 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:32,992 - INFO - Created relationship from 2#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea477d0>
2024-08-20 11:21:32,996 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:32,996 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9134d0>
2024-08-20 11:21:32,997 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9a8650>
2024-08-20 11:21:32,998 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9590>
2024-08-20 11:21:33,002 - INFO - Created relationship from 大包装操作员 to 3#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9810>
2024-08-20 11:21:33,004 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,007 - INFO - Created relationship from 3#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb310>
2024-08-20 11:21:33,010 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,010 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb510>
2024-08-20 11:21:33,011 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b91d0>
2024-08-20 11:21:33,012 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1850>
2024-08-20 11:21:33,018 - INFO - Created relationship from 大包装操作员 to 4#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1990>
2024-08-20 11:21:33,022 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,024 - INFO - Created relationship from 4#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea21d50>
2024-08-20 11:21:33,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,028 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21cd0>
2024-08-20 11:21:33,029 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea20350>
2024-08-20 11:21:33,030 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95de90>
2024-08-20 11:21:33,036 - INFO - Created relationship from 大包装操作员 to 3705Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45bd0>
2024-08-20 11:21:33,040 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3705Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,040 - INFO - Created relationship from 3705Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea45d90>
2024-08-20 11:21:33,044 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3705Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,044 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46910>
2024-08-20 11:21:33,044 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b27d0>
2024-08-20 11:21:33,045 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2050>
2024-08-20 11:21:33,047 - INFO - Created relationship from 大包装操作员 to 3701Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1250>
2024-08-20 11:21:33,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3701Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,050 - INFO - Created relationship from 3701Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b24d0>
2024-08-20 11:21:33,053 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3701Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,053 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9e10>
2024-08-20 11:21:33,054 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b8bd0>
2024-08-20 11:21:33,054 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b97d0>
2024-08-20 11:21:33,058 - INFO - Created relationship from 大包装操作员 to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12d65e210>
2024-08-20 11:21:33,062 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,062 - INFO - Created relationship from CP28 to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ab7d0>
2024-08-20 11:21:33,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'CP28'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,065 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aa290>
2024-08-20 11:21:33,066 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9afd90>
2024-08-20 11:21:33,066 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8e90>
2024-08-20 11:21:33,069 - INFO - Created relationship from 大包装操作员 to 1# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9450>
2024-08-20 11:21:33,072 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,072 - INFO - Created relationship from 1# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ab690>
2024-08-20 11:21:33,074 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,075 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9e90>
2024-08-20 11:21:33,075 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ba750>
2024-08-20 11:21:33,076 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8250>
2024-08-20 11:21:33,079 - INFO - Created relationship from 大包装操作员 to 2# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb4d0>
2024-08-20 11:21:33,083 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,083 - INFO - Created relationship from 2# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1590>
2024-08-20 11:21:33,087 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,087 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3dd0>
2024-08-20 11:21:33,088 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b3cd0>
2024-08-20 11:21:33,088 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44ed0>
2024-08-20 11:21:33,090 - INFO - Created relationship from 大包装操作员 to 3# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:33,092 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,093 - INFO - Created relationship from 3# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9afe50>
2024-08-20 11:21:33,095 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,095 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aef50>
2024-08-20 11:21:33,096 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9af750>
2024-08-20 11:21:33,096 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea47cd0>
2024-08-20 11:21:33,099 - INFO - Created relationship from 大包装操作员 to 4# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45350>
2024-08-20 11:21:33,102 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,102 - INFO - Created relationship from 4# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea46a10>
2024-08-20 11:21:33,105 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,107 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb5d0>
2024-08-20 11:21:33,109 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bbfd0>
2024-08-20 11:21:33,110 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bb090>
2024-08-20 11:21:33,114 - INFO - Created relationship from 大包装操作员 to 5# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b8b10>
2024-08-20 11:21:33,117 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,117 - INFO - Created relationship from 5# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b2750>
2024-08-20 11:21:33,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,121 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1510>
2024-08-20 11:21:33,121 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b0310>
2024-08-20 11:21:33,122 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab350>
2024-08-20 11:21:33,124 - INFO - Created relationship from 大包装操作员 to 1#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa350>
2024-08-20 11:21:33,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,128 - INFO - Created relationship from 1#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9132d0>
2024-08-20 11:21:33,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,130 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2b50>
2024-08-20 11:21:33,130 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9b1290>
2024-08-20 11:21:33,131 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0990>
2024-08-20 11:21:33,134 - INFO - Created relationship from 大包装操作员 to 2#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9f10>
2024-08-20 11:21:33,136 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,136 - INFO - Created relationship from 2#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b98d0>
2024-08-20 11:21:33,138 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,139 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba990>
2024-08-20 11:21:33,139 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9bb050>
2024-08-20 11:21:33,140 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aa550>
2024-08-20 11:21:33,143 - INFO - Created relationship from 大包装操作员 to 3#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aab90>
2024-08-20 11:21:33,144 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,145 - INFO - Created relationship from 3#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aaed0>
2024-08-20 11:21:33,149 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,150 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46690>
2024-08-20 11:21:33,150 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea46410>
2024-08-20 11:21:33,151 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9112d0>
2024-08-20 11:21:33,156 - INFO - Created relationship from 大包装操作员 to 4#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9139d0>
2024-08-20 11:21:33,159 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,159 - INFO - Created relationship from 4#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9afa90>
2024-08-20 11:21:33,163 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,163 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aab90>
2024-08-20 11:21:33,164 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9aac50>
2024-08-20 11:21:33,164 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8bd0>
2024-08-20 11:21:33,169 - INFO - Created relationship from 大包装操作员 to 5#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea47d90>
2024-08-20 11:21:33,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,171 - INFO - Created relationship from 5#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea47010>
2024-08-20 11:21:33,173 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,174 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb6d0>
2024-08-20 11:21:33,174 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e9ba990>
2024-08-20 11:21:33,175 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ba350>
2024-08-20 11:21:33,178 - INFO - Created relationship from 大包装操作员 to 6#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2950>
2024-08-20 11:21:33,182 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '6#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,182 - INFO - Created relationship from 6#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b3210>
2024-08-20 11:21:33,186 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,186 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3790>
2024-08-20 11:21:33,187 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e910910>
2024-08-20 11:21:33,187 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910d90>
2024-08-20 11:21:33,191 - INFO - Created relationship from 大包装操作员 to 7#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9310>
2024-08-20 11:21:33,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '7#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,194 - INFO - Created relationship from 7#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba9d0>
2024-08-20 11:21:33,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,198 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8150>
2024-08-20 11:21:33,199 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12e912090>
2024-08-20 11:21:33,199 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912f50>
2024-08-20 11:21:33,203 - INFO - Created relationship from 大包装操作员 to 8#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e912a50>
2024-08-20 11:21:33,205 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '8#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,205 - INFO - Created relationship from 8#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1450>
2024-08-20 11:21:33,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,207 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3f50>
2024-08-20 11:21:33,207 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea44990>
2024-08-20 11:21:33,209 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44190>
2024-08-20 11:21:33,213 - INFO - Created relationship from 大包装操作员 to 9#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9ed0>
2024-08-20 11:21:33,215 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '9#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,218 - INFO - Created relationship from 9#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aaad0>
2024-08-20 11:21:33,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,220 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9acb90>
2024-08-20 11:21:33,220 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x12ea214d0>
2024-08-20 11:21:33,222 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e482a90>
2024-08-20 11:21:33,226 - INFO - Created relationship from 大包装操作员 to 10#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea457d0>
2024-08-20 11:21:33,229 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '10#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,231 - INFO - Created relationship from 10#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea45350>
2024-08-20 11:21:33,234 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,234 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9aba50>
2024-08-20 11:21:33,237 - INFO - Created relationship from Room Temperature to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a9350>
2024-08-20 11:21:33,240 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,240 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9a9a10>
2024-08-20 11:21:33,240 - INFO - Created relationship from Room Temperature to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1910>
2024-08-20 11:21:33,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,244 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9b2a10>
2024-08-20 11:21:33,244 - INFO - Created relationship from Room Temperature to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9100d0>
2024-08-20 11:21:33,246 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,246 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e912d90>
2024-08-20 11:21:33,247 - INFO - Created relationship from Room Temperature to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb6d0>
2024-08-20 11:21:33,248 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,249 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9ba950>
2024-08-20 11:21:33,250 - INFO - Created relationship from Room Temperature to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b94d0>
2024-08-20 11:21:33,253 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,253 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12ea20f10>
2024-08-20 11:21:33,253 - INFO - Created relationship from Room Temperature to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b9790>
2024-08-20 11:21:33,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,257 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9bb6d0>
2024-08-20 11:21:33,257 - INFO - Created relationship from Room Temperature to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bb1d0>
2024-08-20 11:21:33,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,261 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9b1250>
2024-08-20 11:21:33,261 - INFO - Created relationship from Room Temperature to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b0190>
2024-08-20 11:21:33,263 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,263 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9b2b10>
2024-08-20 11:21:33,264 - INFO - Created relationship from Room Temperature to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a9f10>
2024-08-20 11:21:33,265 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,266 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9a8210>
2024-08-20 11:21:33,269 - INFO - Created relationship from Humidity to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e913350>
2024-08-20 11:21:33,271 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,271 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9128d0>
2024-08-20 11:21:33,272 - INFO - Created relationship from Humidity to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44310>
2024-08-20 11:21:33,274 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,274 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12ea45010>
2024-08-20 11:21:33,274 - INFO - Created relationship from Humidity to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea23310>
2024-08-20 11:21:33,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,278 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12ea238d0>
2024-08-20 11:21:33,278 - INFO - Created relationship from Humidity to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a92d0>
2024-08-20 11:21:33,282 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,282 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9a9350>
2024-08-20 11:21:33,283 - INFO - Created relationship from Humidity to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aa710>
2024-08-20 11:21:33,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,287 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12ea47c10>
2024-08-20 11:21:33,287 - INFO - Created relationship from Humidity to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea46790>
2024-08-20 11:21:33,289 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,289 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9b1a90>
2024-08-20 11:21:33,290 - INFO - Created relationship from Humidity to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b3c90>
2024-08-20 11:21:33,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,291 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9b1550>
2024-08-20 11:21:33,292 - INFO - Created relationship from Humidity to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e911610>
2024-08-20 11:21:33,295 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,295 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e913690>
2024-08-20 11:21:33,295 - INFO - Created relationship from Humidity to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bab50>
2024-08-20 11:21:33,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,298 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12e9bbb10>
2024-08-20 11:21:33,301 - INFO - Created relationship from Logistics Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea20590>
2024-08-20 11:21:33,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Logistics Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,303 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x12ea20e90>
2024-08-20 11:21:33,307 - INFO - Created relationship from Warehouse Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b8490>
2024-08-20 11:21:33,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Warehouse Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,312 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9bb490>
2024-08-20 11:21:33,314 - INFO - Created relationship from Xylitol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b1610>
2024-08-20 11:21:33,317 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,318 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9b3f50>
2024-08-20 11:21:33,322 - INFO - Created relationship from Sugar Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b2350>
2024-08-20 11:21:33,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sugar Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,324 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea45510>
2024-08-20 11:21:33,328 - INFO - Created relationship from Acid Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea457d0>
2024-08-20 11:21:33,332 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Acid Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,333 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e911890>
2024-08-20 11:21:33,336 - INFO - Created relationship from Cooling Agent to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e913010>
2024-08-20 11:21:33,340 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Cooling Agent'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,341 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:33,343 - INFO - Created relationship from Menthol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aa3d0>
2024-08-20 11:21:33,345 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Menthol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,345 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea20190>
2024-08-20 11:21:33,347 - INFO - Created relationship from Pigment to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea21190>
2024-08-20 11:21:33,351 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Pigment'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,351 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e95cdd0>
2024-08-20 11:21:33,354 - INFO - Created relationship from Glucose to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e910bd0>
2024-08-20 11:21:33,357 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glucose'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,358 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e911790>
2024-08-20 11:21:33,361 - INFO - Created relationship from Glycerinum to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9a8210>
2024-08-20 11:21:33,363 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glycerinum'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,364 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9aab90>
2024-08-20 11:21:33,366 - INFO - Created relationship from Essence to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea45e50>
2024-08-20 11:21:33,379 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Essence'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,382 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea47c90>
2024-08-20 11:21:33,388 - INFO - Created relationship from Sorbitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea45610>
2024-08-20 11:21:33,391 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sorbitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,391 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea23910>
2024-08-20 11:21:33,392 - INFO - Created relationship from Xylitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea22250>
2024-08-20 11:21:33,393 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,394 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9b0410>
2024-08-20 11:21:33,397 - INFO - Created relationship from Granulated Sugar to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b3c90>
2024-08-20 11:21:33,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Granulated Sugar'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,401 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9b8910>
2024-08-20 11:21:33,404 - INFO - Created relationship from Gum Base to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9bad90>
2024-08-20 11:21:33,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Base'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,408 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e95ebd0>
2024-08-20 11:21:33,412 - INFO - Created relationship from Gum Micelle to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9b2b50>
2024-08-20 11:21:33,416 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,416 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9b1e50>
2024-08-20 11:21:33,420 - INFO - Created relationship from Corn Starch to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba290>
2024-08-20 11:21:33,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Corn Starch'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,422 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9bb690>
2024-08-20 11:21:33,423 - INFO - Created relationship from Gum Micelle to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9ba7d0>
2024-08-20 11:21:33,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,427 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea47e90>
2024-08-20 11:21:33,428 - INFO - Created relationship from Gum Micelle to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea44210>
2024-08-20 11:21:33,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,433 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea23dd0>
2024-08-20 11:21:33,434 - INFO - Created relationship from Gum Micelle to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ea21d10>
2024-08-20 11:21:33,437 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,437 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12ea21550>
2024-08-20 11:21:33,438 - INFO - Created relationship from Gum Micelle to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e9aab50>
2024-08-20 11:21:33,440 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,440 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x12e9aa950>
2024-08-20 11:21:33,441 - INFO - Created relationship from Gum Micelle to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12e913b50>
2024-08-20 11:21:33,443 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:21:33,444 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e461d90>
2024-08-20 11:21:33,445 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e95c390>
2024-08-20 11:21:33,448 - INFO - Created relationship from FVSS to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21b10>
2024-08-20 11:21:33,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVSS'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,452 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea23b90>
2024-08-20 11:21:33,452 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12ea23290>
2024-08-20 11:21:33,455 - INFO - Created relationship from FVBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea234d0>
2024-08-20 11:21:33,459 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,459 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea23c50>
2024-08-20 11:21:33,460 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12ea45310>
2024-08-20 11:21:33,465 - INFO - Created relationship from EXCW to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea44d50>
2024-08-20 11:21:33,468 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXCW'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,468 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e912710>
2024-08-20 11:21:33,469 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e910dd0>
2024-08-20 11:21:33,472 - INFO - Created relationship from EBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b9c50>
2024-08-20 11:21:33,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,474 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e9bb4d0>
2024-08-20 11:21:33,475 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e9b8e10>
2024-08-20 11:21:33,479 - INFO - Created relationship from FVWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47cd0>
2024-08-20 11:21:33,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,484 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea44710>
2024-08-20 11:21:33,485 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e481490>
2024-08-20 11:21:33,489 - INFO - Created relationship from EXPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23e50>
2024-08-20 11:21:33,493 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,493 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea212d0>
2024-08-20 11:21:33,494 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12ea23650>
2024-08-20 11:21:33,498 - INFO - Created relationship from EXTP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e910090>
2024-08-20 11:21:33,502 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXTP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,502 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e911bd0>
2024-08-20 11:21:33,503 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e911450>
2024-08-20 11:21:33,506 - INFO - Created relationship from EXSM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95c690>
2024-08-20 11:21:33,509 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXSM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,509 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e9b9410>
2024-08-20 11:21:33,510 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e9bb8d0>
2024-08-20 11:21:33,513 - INFO - Created relationship from FVPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1450>
2024-08-20 11:21:33,517 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,518 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e9b27d0>
2024-08-20 11:21:33,518 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e95d310>
2024-08-20 11:21:33,522 - INFO - Created relationship from DMLM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e912750>
2024-08-20 11:21:33,526 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMLM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,527 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e910c90>
2024-08-20 11:21:33,528 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e910110>
2024-08-20 11:21:33,531 - INFO - Created relationship from DMRR to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23a90>
2024-08-20 11:21:33,534 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRR'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,535 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea20090>
2024-08-20 11:21:33,536 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12ea20890>
2024-08-20 11:21:33,541 - INFO - Created relationship from DMRM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20190>
2024-08-20 11:21:33,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,544 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e9bb5d0>
2024-08-20 11:21:33,545 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e9ba7d0>
2024-08-20 11:21:33,548 - INFO - Created relationship from DMRJ to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea46590>
2024-08-20 11:21:33,550 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRJ'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,551 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea47a10>
2024-08-20 11:21:33,552 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e9b1250>
2024-08-20 11:21:33,555 - INFO - Created relationship from DMRC to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0e90>
2024-08-20 11:21:33,558 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRC'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,558 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e9b9e10>
2024-08-20 11:21:33,559 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e9b9010>
2024-08-20 11:21:33,563 - INFO - Created relationship from DMPE to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bab90>
2024-08-20 11:21:33,567 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPE'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,567 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea22a50>
2024-08-20 11:21:33,568 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12ea21190>
2024-08-20 11:21:33,571 - INFO - Created relationship from WSP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22250>
2024-08-20 11:21:33,574 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'WSP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,574 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea20d90>
2024-08-20 11:21:33,575 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e913dd0>
2024-08-20 11:21:33,578 - INFO - Created relationship from DMPY to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e911450>
2024-08-20 11:21:33,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPY'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,583 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12ea45690>
2024-08-20 11:21:33,585 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e4a4dd0>
2024-08-20 11:21:33,588 - INFO - Created relationship from RPWP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1a90>
2024-08-20 11:21:33,592 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'RPWP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,592 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12e9b0ed0>
2024-08-20 11:21:33,593 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12e550790>
2024-08-20 11:21:33,596 - INFO - Created relationship from AUWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea45790>
2024-08-20 11:21:33,599 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'AUWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,612 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b05d0>
2024-08-20 11:21:33,617 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911e10>
2024-08-20 11:21:33,621 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e912dd0>
2024-08-20 11:21:33,622 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912d10>
2024-08-20 11:21:33,627 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95fe50>
2024-08-20 11:21:33,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,633 - INFO - Created relationship from Sheeting to 环境控制 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95f050>
2024-08-20 11:21:33,636 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '环境控制'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,637 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21550>
2024-08-20 11:21:33,641 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,642 - INFO - Created relationship from 环境控制 to 区域空调 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea217d0>
2024-08-20 11:21:33,645 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '环境控制'}), (b:Machine {name: '区域空调'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,657 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22fd0>
2024-08-20 11:21:33,662 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b82d0>
2024-08-20 11:21:33,663 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8c10>
2024-08-20 11:21:33,664 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9af5d0>
2024-08-20 11:21:33,667 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9af2d0>
2024-08-20 11:21:33,668 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,668 - INFO - Created relationship from Sheeting to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aeed0>
2024-08-20 11:21:33,672 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,672 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21a10>
2024-08-20 11:21:33,673 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,674 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea225d0>
2024-08-20 11:21:33,676 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,687 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22e90>
2024-08-20 11:21:33,693 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba9d0>
2024-08-20 11:21:33,693 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba310>
2024-08-20 11:21:33,694 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ba150>
2024-08-20 11:21:33,697 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95fc50>
2024-08-20 11:21:33,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,698 - INFO - Created relationship from Sheeting to 挤压、切片系统生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95d310>
2024-08-20 11:21:33,702 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,703 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e911d90>
2024-08-20 11:21:33,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,704 - INFO - Created relationship from 挤压、切片系统生产前调试 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910f50>
2024-08-20 11:21:33,706 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统生产前调试'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,716 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b1110>
2024-08-20 11:21:33,721 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea451d0>
2024-08-20 11:21:33,722 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ab610>
2024-08-20 11:21:33,722 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95c8d0>
2024-08-20 11:21:33,725 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95f6d0>
2024-08-20 11:21:33,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,726 - INFO - Created relationship from Sheeting to 除湿机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b0bd0>
2024-08-20 11:21:33,730 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,730 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2550>
2024-08-20 11:21:33,731 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,731 - INFO - Created relationship from 除湿机生产前调试 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911790>
2024-08-20 11:21:33,735 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前调试'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,753 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910950>
2024-08-20 11:21:33,757 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea44990>
2024-08-20 11:21:33,758 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9f90>
2024-08-20 11:21:33,758 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bae90>
2024-08-20 11:21:33,759 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21a90>
2024-08-20 11:21:33,759 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,760 - INFO - Created relationship from Sheeting to 除湿机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21750>
2024-08-20 11:21:33,763 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,763 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20210>
2024-08-20 11:21:33,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,764 - INFO - Created relationship from 除湿机生产前空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22810>
2024-08-20 11:21:33,766 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,774 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ab010>
2024-08-20 11:21:33,784 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b8050>
2024-08-20 11:21:33,785 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9450>
2024-08-20 11:21:33,786 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23610>
2024-08-20 11:21:33,788 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20ed0>
2024-08-20 11:21:33,788 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,789 - INFO - Created relationship from Sheeting to 冷冻机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea22e90>
2024-08-20 11:21:33,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,792 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea219d0>
2024-08-20 11:21:33,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,793 - INFO - Created relationship from 冷冻机生产前调试 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45290>
2024-08-20 11:21:33,795 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前调试'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,802 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910050>
2024-08-20 11:21:33,805 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911190>
2024-08-20 11:21:33,806 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1f10>
2024-08-20 11:21:33,806 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3b90>
2024-08-20 11:21:33,806 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95ddd0>
2024-08-20 11:21:33,807 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,810 - INFO - Created relationship from Sheeting to 冷冻机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a8d10>
2024-08-20 11:21:33,814 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,814 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8d90>
2024-08-20 11:21:33,815 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,818 - INFO - Created relationship from 冷冻机生产前空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910790>
2024-08-20 11:21:33,820 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,827 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910610>
2024-08-20 11:21:33,833 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea45650>
2024-08-20 11:21:33,835 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2150>
2024-08-20 11:21:33,835 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3290>
2024-08-20 11:21:33,839 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0f10>
2024-08-20 11:21:33,839 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,842 - INFO - Created relationship from Sheeting to 切片机除尘系统生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95d590>
2024-08-20 11:21:33,846 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,847 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23150>
2024-08-20 11:21:33,847 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,850 - INFO - Created relationship from 切片机除尘系统生产前空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21190>
2024-08-20 11:21:33,852 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产前空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,860 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea226d0>
2024-08-20 11:21:33,865 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab9d0>
2024-08-20 11:21:33,869 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ab410>
2024-08-20 11:21:33,872 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7650>
2024-08-20 11:21:33,873 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5e90>
2024-08-20 11:21:33,873 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,876 - INFO - Created relationship from Sheeting to 挤压、切片系统运行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ab210>
2024-08-20 11:21:33,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统运行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,880 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8190>
2024-08-20 11:21:33,881 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,881 - INFO - Created relationship from 挤压、切片系统运行 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea20d10>
2024-08-20 11:21:33,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统运行'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,886 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea207d0>
2024-08-20 11:21:33,891 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b82d0>
2024-08-20 11:21:33,892 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb5d0>
2024-08-20 11:21:33,893 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b39d0>
2024-08-20 11:21:33,893 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b35d0>
2024-08-20 11:21:33,894 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,894 - INFO - Created relationship from Sheeting to 挤压、切片系统停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea45a90>
2024-08-20 11:21:33,898 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,899 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95ead0>
2024-08-20 11:21:33,899 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,900 - INFO - Created relationship from 挤压、切片系统停止生产 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e912110>
2024-08-20 11:21:33,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统停止生产'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,903 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e912890>
2024-08-20 11:21:33,908 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7950>
2024-08-20 11:21:33,908 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5090>
2024-08-20 11:21:33,909 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95e3d0>
2024-08-20 11:21:33,910 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea47f90>
2024-08-20 11:21:33,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,911 - INFO - Created relationship from Sheeting to 冷冻机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9119d0>
2024-08-20 11:21:33,913 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,914 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e910790>
2024-08-20 11:21:33,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,915 - INFO - Created relationship from 冷冻机生产中空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913d10>
2024-08-20 11:21:33,919 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产中空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,930 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bbb10>
2024-08-20 11:21:33,935 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0950>
2024-08-20 11:21:33,936 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0190>
2024-08-20 11:21:33,936 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23250>
2024-08-20 11:21:33,937 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20f90>
2024-08-20 11:21:33,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,942 - INFO - Created relationship from Sheeting to 除湿机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23490>
2024-08-20 11:21:33,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,948 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8310>
2024-08-20 11:21:33,949 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,954 - INFO - Created relationship from 除湿机生产中空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e60d0>
2024-08-20 11:21:33,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产中空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,969 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e76d0>
2024-08-20 11:21:33,974 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea235d0>
2024-08-20 11:21:33,974 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20150>
2024-08-20 11:21:33,975 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20710>
2024-08-20 11:21:33,975 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23150>
2024-08-20 11:21:33,976 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:33,979 - INFO - Created relationship from Sheeting to 切片机除尘系统生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea22ad0>
2024-08-20 11:21:33,981 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:33,982 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2b90>
2024-08-20 11:21:33,982 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:33,987 - INFO - Created relationship from 切片机除尘系统生产中空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1f10>
2024-08-20 11:21:33,991 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产中空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:33,999 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b93d0>
2024-08-20 11:21:34,003 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9106d0>
2024-08-20 11:21:34,004 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea448d0>
2024-08-20 11:21:34,004 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95e7d0>
2024-08-20 11:21:34,007 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6c90>
2024-08-20 11:21:34,007 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,008 - INFO - Created relationship from Sheeting to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e47d0>
2024-08-20 11:21:34,010 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,011 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4d10>
2024-08-20 11:21:34,011 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,012 - INFO - Created relationship from 异常处理 to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4110>
2024-08-20 11:21:34,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,026 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6990>
2024-08-20 11:21:34,031 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6590>
2024-08-20 11:21:34,032 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23310>
2024-08-20 11:21:34,035 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea211d0>
2024-08-20 11:21:34,036 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23c90>
2024-08-20 11:21:34,036 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,041 - INFO - Created relationship from Mixer to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21350>
2024-08-20 11:21:34,045 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,046 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20a50>
2024-08-20 11:21:34,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,050 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ab3d0>
2024-08-20 11:21:34,052 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,062 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9aa550>
2024-08-20 11:21:34,065 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aea90>
2024-08-20 11:21:34,066 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910d90>
2024-08-20 11:21:34,067 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910790>
2024-08-20 11:21:34,072 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e910f50>
2024-08-20 11:21:34,072 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,076 - INFO - Created relationship from Mixer to 生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a8c10>
2024-08-20 11:21:34,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,080 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8550>
2024-08-20 11:21:34,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,085 - INFO - Created relationship from 生产前调试 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9abb50>
2024-08-20 11:21:34,087 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '生产前调试'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,096 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9aeb10>
2024-08-20 11:21:34,101 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20210>
2024-08-20 11:21:34,102 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23c10>
2024-08-20 11:21:34,104 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea21a90>
2024-08-20 11:21:34,110 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea201d0>
2024-08-20 11:21:34,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,111 - INFO - Created relationship from Mixer to 启动夹套水加热器 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6950>
2024-08-20 11:21:34,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '启动夹套水加热器'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,116 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6fd0>
2024-08-20 11:21:34,117 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,121 - INFO - Created relationship from 启动夹套水加热器 to 夹套水系统（设备清单中名称为热水）-用到热水、模温机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5950>
2024-08-20 11:21:34,125 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '启动夹套水加热器'}), (b:Machine {name: '夹套水系统（设备清单中名称为热水）-用到热水、模温机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,134 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e912950>
2024-08-20 11:21:34,156 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e4a5550>
2024-08-20 11:21:34,157 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e95ebd0>
2024-08-20 11:21:34,162 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5b90>
2024-08-20 11:21:34,167 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e50d0>
2024-08-20 11:21:34,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,168 - INFO - Created relationship from Mixer to NCS系统降温 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e52d0>
2024-08-20 11:21:34,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: 'NCS系统降温'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,171 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4d90>
2024-08-20 11:21:34,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,174 - INFO - Created relationship from NCS系统降温 to 停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea238d0>
2024-08-20 11:21:34,178 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'NCS系统降温'}), (b:Machine {name: '停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,183 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea230d0>
2024-08-20 11:21:34,186 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22b10>
2024-08-20 11:21:34,186 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea22550>
2024-08-20 11:21:34,188 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9afa50>
2024-08-20 11:21:34,191 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913d10>
2024-08-20 11:21:34,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,193 - INFO - Created relationship from Mixer to 除尘系统启动 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e913290>
2024-08-20 11:21:34,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '除尘系统启动'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,197 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aa690>
2024-08-20 11:21:34,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,200 - INFO - Created relationship from 除尘系统启动 to 混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8450>
2024-08-20 11:21:34,204 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除尘系统启动'}), (b:Machine {name: '混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,205 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ab5d0>
2024-08-20 11:21:34,208 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab290>
2024-08-20 11:21:34,209 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9cd0>
2024-08-20 11:21:34,209 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a98d0>
2024-08-20 11:21:34,212 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21b50>
2024-08-20 11:21:34,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,214 - INFO - Created relationship from Mixer to 1#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea220d0>
2024-08-20 11:21:34,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '1#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,217 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea231d0>
2024-08-20 11:21:34,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,220 - INFO - Created relationship from 1#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23750>
2024-08-20 11:21:34,223 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '1#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,229 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23a50>
2024-08-20 11:21:34,233 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911810>
2024-08-20 11:21:34,234 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5450>
2024-08-20 11:21:34,234 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7f10>
2024-08-20 11:21:34,235 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4cd0>
2024-08-20 11:21:34,235 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,238 - INFO - Created relationship from Mixer to 2#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95fe10>
2024-08-20 11:21:34,242 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '2#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,242 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2a10>
2024-08-20 11:21:34,242 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,245 - INFO - Created relationship from 2#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95fcd0>
2024-08-20 11:21:34,249 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '2#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,256 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910310>
2024-08-20 11:21:34,260 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912950>
2024-08-20 11:21:34,261 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7150>
2024-08-20 11:21:34,262 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e4bd0>
2024-08-20 11:21:34,262 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5290>
2024-08-20 11:21:34,262 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,265 - INFO - Created relationship from Mixer to 3#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e4d50>
2024-08-20 11:21:34,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '3#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,269 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23250>
2024-08-20 11:21:34,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,272 - INFO - Created relationship from 3#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea230d0>
2024-08-20 11:21:34,276 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '3#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,283 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21d90>
2024-08-20 11:21:34,287 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a83d0>
2024-08-20 11:21:34,289 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ae5d0>
2024-08-20 11:21:34,289 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2f10>
2024-08-20 11:21:34,290 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b13d0>
2024-08-20 11:21:34,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,293 - INFO - Created relationship from Mixer to 4#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9390>
2024-08-20 11:21:34,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '4#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,297 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a9f50>
2024-08-20 11:21:34,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,300 - INFO - Created relationship from 4#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22090>
2024-08-20 11:21:34,304 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '4#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,350 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21a90>
2024-08-20 11:21:34,354 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21f10>
2024-08-20 11:21:34,355 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea209d0>
2024-08-20 11:21:34,355 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7a50>
2024-08-20 11:21:34,356 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7b90>
2024-08-20 11:21:34,356 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,358 - INFO - Created relationship from Mixer to 停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e7690>
2024-08-20 11:21:34,360 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,361 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e913b50>
2024-08-20 11:21:34,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,363 - INFO - Created relationship from 停止生产 to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910ad0>
2024-08-20 11:21:34,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '停止生产'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,369 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95c250>
2024-08-20 11:21:34,374 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b10d0>
2024-08-20 11:21:34,375 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea44350>
2024-08-20 11:21:34,376 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95e890>
2024-08-20 11:21:34,380 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3bd0>
2024-08-20 11:21:34,381 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,381 - INFO - Created relationship from Mixer to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b1010>
2024-08-20 11:21:34,383 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,383 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e912550>
2024-08-20 11:21:34,384 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,386 - INFO - Created relationship from 异常处理 to 一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e912d90>
2024-08-20 11:21:34,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,389 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e912f50>
2024-08-20 11:21:34,394 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4cd0>
2024-08-20 11:21:34,397 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7390>
2024-08-20 11:21:34,398 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20fd0>
2024-08-20 11:21:34,398 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20090>
2024-08-20 11:21:34,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,402 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea20890>
2024-08-20 11:21:34,404 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,404 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22350>
2024-08-20 11:21:34,406 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,406 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9f90>
2024-08-20 11:21:34,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,433 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea45190>
2024-08-20 11:21:34,438 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea217d0>
2024-08-20 11:21:34,439 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23fd0>
2024-08-20 11:21:34,440 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea219d0>
2024-08-20 11:21:34,443 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22610>
2024-08-20 11:21:34,444 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,444 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aaf50>
2024-08-20 11:21:34,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,447 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6e50>
2024-08-20 11:21:34,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,451 - INFO - Created relationship from nan to 振筛机\配料提升机升降正常\电子称打印机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e49d0>
2024-08-20 11:21:34,454 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机\\配料提升机升降正常\\电子称打印机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,458 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7c90>
2024-08-20 11:21:34,461 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912d90>
2024-08-20 11:21:34,462 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913250>
2024-08-20 11:21:34,462 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3210>
2024-08-20 11:21:34,464 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2b90>
2024-08-20 11:21:34,465 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,466 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:34,468 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,469 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47d90>
2024-08-20 11:21:34,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,471 - INFO - Created relationship from nan to 振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913f10>
2024-08-20 11:21:34,475 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,479 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9128d0>
2024-08-20 11:21:34,484 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6390>
2024-08-20 11:21:34,484 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6fd0>
2024-08-20 11:21:34,484 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6010>
2024-08-20 11:21:34,485 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7a90>
2024-08-20 11:21:34,485 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,485 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b39d0>
2024-08-20 11:21:34,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,487 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1590>
2024-08-20 11:21:34,488 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,488 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aacd0>
2024-08-20 11:21:34,492 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,497 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22d10>
2024-08-20 11:21:34,500 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21850>
2024-08-20 11:21:34,500 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea45350>
2024-08-20 11:21:34,501 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8cd0>
2024-08-20 11:21:34,505 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b8d90>
2024-08-20 11:21:34,505 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,505 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea45390>
2024-08-20 11:21:34,509 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,509 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ae350>
2024-08-20 11:21:34,510 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,510 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aad50>
2024-08-20 11:21:34,512 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,517 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23550>
2024-08-20 11:21:34,521 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20990>
2024-08-20 11:21:34,521 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e4a47d0>
2024-08-20 11:21:34,522 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e4790>
2024-08-20 11:21:34,522 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6610>
2024-08-20 11:21:34,522 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,522 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5c90>
2024-08-20 11:21:34,526 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,527 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b3110>
2024-08-20 11:21:34,527 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,527 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0250>
2024-08-20 11:21:34,531 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,536 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910f10>
2024-08-20 11:21:34,540 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b92d0>
2024-08-20 11:21:34,541 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba610>
2024-08-20 11:21:34,542 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9120d0>
2024-08-20 11:21:34,546 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913910>
2024-08-20 11:21:34,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,546 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e7650>
2024-08-20 11:21:34,548 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,549 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4d50>
2024-08-20 11:21:34,549 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,551 - INFO - Created relationship from nan to 吸包机、振筛机（密封气囊） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6890>
2024-08-20 11:21:34,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吸包机、振筛机（密封气囊）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,562 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e48d0>
2024-08-20 11:21:34,567 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0c50>
2024-08-20 11:21:34,569 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20cd0>
2024-08-20 11:21:34,569 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23dd0>
2024-08-20 11:21:34,573 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea221d0>
2024-08-20 11:21:34,573 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,573 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9e10>
2024-08-20 11:21:34,577 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,577 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea470d0>
2024-08-20 11:21:34,577 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,579 - INFO - Created relationship from nan to 振筛机（震动开关、抽风开关、密封气囊）、电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9650>
2024-08-20 11:21:34,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机（震动开关、抽风开关、密封气囊）、电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,586 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bb190>
2024-08-20 11:21:34,590 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9010>
2024-08-20 11:21:34,590 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea44ad0>
2024-08-20 11:21:34,591 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20bd0>
2024-08-20 11:21:34,595 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23550>
2024-08-20 11:21:34,595 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,596 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea22d10>
2024-08-20 11:21:34,597 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,598 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0c50>
2024-08-20 11:21:34,598 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,601 - INFO - Created relationship from nan to 气动泵 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2910>
2024-08-20 11:21:34,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,610 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95f5d0>
2024-08-20 11:21:34,613 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5890>
2024-08-20 11:21:34,613 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5410>
2024-08-20 11:21:34,614 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911e10>
2024-08-20 11:21:34,616 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bac10>
2024-08-20 11:21:34,616 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,617 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ba410>
2024-08-20 11:21:34,620 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,620 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9be9d0>
2024-08-20 11:21:34,620 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,623 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb890>
2024-08-20 11:21:34,625 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,635 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bb690>
2024-08-20 11:21:34,640 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e990ed0>
2024-08-20 11:21:34,640 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea45650>
2024-08-20 11:21:34,641 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea47790>
2024-08-20 11:21:34,645 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:34,646 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,646 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2310>
2024-08-20 11:21:34,648 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,648 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b10d0>
2024-08-20 11:21:34,649 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,652 - INFO - Created relationship from nan to 电子秤（预热60min） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1450>
2024-08-20 11:21:34,655 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤（预热60min）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,660 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6290>
2024-08-20 11:21:34,662 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6b50>
2024-08-20 11:21:34,663 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ae550>
2024-08-20 11:21:34,663 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ad550>
2024-08-20 11:21:34,666 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22ad0>
2024-08-20 11:21:34,666 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,666 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9af5d0>
2024-08-20 11:21:34,670 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,670 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e5990>
2024-08-20 11:21:34,670 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,671 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5510>
2024-08-20 11:21:34,672 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,679 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6c10>
2024-08-20 11:21:34,684 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b37d0>
2024-08-20 11:21:34,686 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0510>
2024-08-20 11:21:34,686 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3c50>
2024-08-20 11:21:34,688 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1250>
2024-08-20 11:21:34,688 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,689 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea44cd0>
2024-08-20 11:21:34,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,691 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea45a50>
2024-08-20 11:21:34,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,694 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机\抽风系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b83d0>
2024-08-20 11:21:34,698 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机\\抽风系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,723 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b9810>
2024-08-20 11:21:34,728 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23f10>
2024-08-20 11:21:34,729 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20550>
2024-08-20 11:21:34,729 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea45a50>
2024-08-20 11:21:34,731 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46cd0>
2024-08-20 11:21:34,731 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,732 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea45e50>
2024-08-20 11:21:34,734 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,735 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bab90>
2024-08-20 11:21:34,735 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,737 - INFO - Created relationship from nan to 地磅 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba290>
2024-08-20 11:21:34,739 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '地磅'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,743 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b8450>
2024-08-20 11:21:34,747 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2a10>
2024-08-20 11:21:34,747 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1d10>
2024-08-20 11:21:34,748 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e74d0>
2024-08-20 11:21:34,751 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7990>
2024-08-20 11:21:34,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,751 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e7d90>
2024-08-20 11:21:34,753 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,754 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ae350>
2024-08-20 11:21:34,754 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,756 - INFO - Created relationship from nan to 升降梯 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea20690>
2024-08-20 11:21:34,760 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '升降梯'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,764 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21f10>
2024-08-20 11:21:34,768 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e49d0>
2024-08-20 11:21:34,768 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e62d0>
2024-08-20 11:21:34,768 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6290>
2024-08-20 11:21:34,769 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7e90>
2024-08-20 11:21:34,769 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,769 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b3290>
2024-08-20 11:21:34,771 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,771 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b3e10>
2024-08-20 11:21:34,771 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,771 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b3c50>
2024-08-20 11:21:34,773 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,778 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bb910>
2024-08-20 11:21:34,782 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bbfd0>
2024-08-20 11:21:34,783 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46a10>
2024-08-20 11:21:34,783 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea46a90>
2024-08-20 11:21:34,783 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23690>
2024-08-20 11:21:34,783 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,784 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea20d10>
2024-08-20 11:21:34,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,786 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20110>
2024-08-20 11:21:34,786 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,786 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea239d0>
2024-08-20 11:21:34,790 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,795 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea20450>
2024-08-20 11:21:34,799 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b9010>
2024-08-20 11:21:34,800 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8ed0>
2024-08-20 11:21:34,801 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bbdd0>
2024-08-20 11:21:34,804 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea472d0>
2024-08-20 11:21:34,804 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,804 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea45a10>
2024-08-20 11:21:34,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,806 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0d90>
2024-08-20 11:21:34,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,807 - INFO - Created relationship from nan to 电子称、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2050>
2024-08-20 11:21:34,809 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,814 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b3b90>
2024-08-20 11:21:34,818 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7750>
2024-08-20 11:21:34,818 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6010>
2024-08-20 11:21:34,819 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95edd0>
2024-08-20 11:21:34,821 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95ecd0>
2024-08-20 11:21:34,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,821 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b0850>
2024-08-20 11:21:34,823 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,823 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b39d0>
2024-08-20 11:21:34,823 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,824 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0d90>
2024-08-20 11:21:34,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,832 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95fe10>
2024-08-20 11:21:34,834 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6690>
2024-08-20 11:21:34,835 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e74d0>
2024-08-20 11:21:34,835 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5390>
2024-08-20 11:21:34,837 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea45150>
2024-08-20 11:21:34,837 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,837 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea44190>
2024-08-20 11:21:34,839 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,839 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba690>
2024-08-20 11:21:34,839 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,841 - INFO - Created relationship from nan to 电子称（Depend on PPlan）、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9110>
2024-08-20 11:21:34,845 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称（Depend on PPlan）、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,849 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22f90>
2024-08-20 11:21:34,853 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9750>
2024-08-20 11:21:34,854 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9abed0>
2024-08-20 11:21:34,854 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bb210>
2024-08-20 11:21:34,854 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b84d0>
2024-08-20 11:21:34,854 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,855 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b91d0>
2024-08-20 11:21:34,856 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,857 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21bd0>
2024-08-20 11:21:34,857 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,858 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea223d0>
2024-08-20 11:21:34,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,865 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea478d0>
2024-08-20 11:21:34,868 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46bd0>
2024-08-20 11:21:34,868 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e95d3d0>
2024-08-20 11:21:34,869 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7ad0>
2024-08-20 11:21:34,869 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5fd0>
2024-08-20 11:21:34,869 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,869 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6050>
2024-08-20 11:21:34,871 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,872 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2f90>
2024-08-20 11:21:34,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,872 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1110>
2024-08-20 11:21:34,874 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,879 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ab810>
2024-08-20 11:21:34,883 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b01d0>
2024-08-20 11:21:34,884 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3050>
2024-08-20 11:21:34,884 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6090>
2024-08-20 11:21:34,885 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7950>
2024-08-20 11:21:34,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,885 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6f50>
2024-08-20 11:21:34,887 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,887 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:34,887 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,887 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea46310>
2024-08-20 11:21:34,889 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,894 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea47950>
2024-08-20 11:21:34,899 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea226d0>
2024-08-20 11:21:34,899 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20c90>
2024-08-20 11:21:34,900 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bb890>
2024-08-20 11:21:34,904 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb2d0>
2024-08-20 11:21:34,904 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,905 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a8d50>
2024-08-20 11:21:34,907 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,907 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a87d0>
2024-08-20 11:21:34,908 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,908 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21f90>
2024-08-20 11:21:34,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,911 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21fd0>
2024-08-20 11:21:34,912 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46a10>
2024-08-20 11:21:34,913 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:34,913 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea462d0>
2024-08-20 11:21:34,914 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb210>
2024-08-20 11:21:34,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,914 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bbe10>
2024-08-20 11:21:34,918 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,918 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bb7d0>
2024-08-20 11:21:34,918 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,918 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4fd0>
2024-08-20 11:21:34,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,924 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e50d0>
2024-08-20 11:21:34,928 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aa690>
2024-08-20 11:21:34,928 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aba10>
2024-08-20 11:21:34,929 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911d50>
2024-08-20 11:21:34,929 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911a50>
2024-08-20 11:21:34,929 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,929 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ab410>
2024-08-20 11:21:34,933 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,933 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a9d50>
2024-08-20 11:21:34,935 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,935 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1c50>
2024-08-20 11:21:34,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,942 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7f10>
2024-08-20 11:21:34,945 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4d50>
2024-08-20 11:21:34,945 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46110>
2024-08-20 11:21:34,946 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44610>
2024-08-20 11:21:34,949 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95ce90>
2024-08-20 11:21:34,949 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,950 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95cb90>
2024-08-20 11:21:34,953 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,953 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba510>
2024-08-20 11:21:34,953 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,955 - INFO - Created relationship from nan to Kanban with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9e50>
2024-08-20 11:21:34,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'Kanban'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,962 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea20c10>
2024-08-20 11:21:34,967 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911090>
2024-08-20 11:21:34,968 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e911c90>
2024-08-20 11:21:34,968 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912bd0>
2024-08-20 11:21:34,972 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912ed0>
2024-08-20 11:21:34,972 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,973 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95cb50>
2024-08-20 11:21:34,976 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,977 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95f210>
2024-08-20 11:21:34,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:34,979 - INFO - Created relationship from nan to 叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23610>
2024-08-20 11:21:34,980 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:34,986 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22a10>
2024-08-20 11:21:34,991 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea47cd0>
2024-08-20 11:21:34,991 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bbc10>
2024-08-20 11:21:34,992 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ba210>
2024-08-20 11:21:34,996 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4b90>
2024-08-20 11:21:34,996 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:34,997 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e74d0>
2024-08-20 11:21:34,999 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:34,999 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6310>
2024-08-20 11:21:34,999 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,002 - INFO - Created relationship from nan to 砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0790>
2024-08-20 11:21:35,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,010 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:35,015 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba990>
2024-08-20 11:21:35,015 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9a10>
2024-08-20 11:21:35,016 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8b10>
2024-08-20 11:21:35,020 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6090>
2024-08-20 11:21:35,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,021 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6e90>
2024-08-20 11:21:35,023 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,023 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e46d0>
2024-08-20 11:21:35,023 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,026 - INFO - Created relationship from nan to 1#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea44850>
2024-08-20 11:21:35,029 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,035 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:35,039 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22010>
2024-08-20 11:21:35,039 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e95cb50>
2024-08-20 11:21:35,040 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913550>
2024-08-20 11:21:35,044 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e910250>
2024-08-20 11:21:35,045 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,045 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bfa90>
2024-08-20 11:21:35,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,050 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bdfd0>
2024-08-20 11:21:35,050 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,052 - INFO - Created relationship from nan to 砂糖系统、糖粉接收罐和循环系统罐、磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911450>
2024-08-20 11:21:35,056 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、糖粉接收罐和循环系统罐、磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,061 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e913a50>
2024-08-20 11:21:35,068 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a8890>
2024-08-20 11:21:35,069 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9090>
2024-08-20 11:21:35,069 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9cd0>
2024-08-20 11:21:35,073 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab610>
2024-08-20 11:21:35,073 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,073 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b3390>
2024-08-20 11:21:35,077 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,077 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1710>
2024-08-20 11:21:35,077 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,079 - INFO - Created relationship from nan to 2#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0b90>
2024-08-20 11:21:35,081 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '2#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,087 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95d010>
2024-08-20 11:21:35,091 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4bd0>
2024-08-20 11:21:35,091 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5e10>
2024-08-20 11:21:35,092 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5b90>
2024-08-20 11:21:35,095 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e94d610>
2024-08-20 11:21:35,095 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,096 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95e8d0>
2024-08-20 11:21:35,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,098 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95c890>
2024-08-20 11:21:35,098 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,100 - INFO - Created relationship from nan to 3#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4990>
2024-08-20 11:21:35,104 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '3#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,109 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6090>
2024-08-20 11:21:35,113 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0750>
2024-08-20 11:21:35,114 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3110>
2024-08-20 11:21:35,114 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3750>
2024-08-20 11:21:35,118 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1ed0>
2024-08-20 11:21:35,118 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,118 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9490>
2024-08-20 11:21:35,122 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,123 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a80d0>
2024-08-20 11:21:35,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,124 - INFO - Created relationship from nan to 电动叉车、电葫芦、砂糖系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e4a46d0>
2024-08-20 11:21:35,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车、电葫芦、砂糖系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,129 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910f90>
2024-08-20 11:21:35,134 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb390>
2024-08-20 11:21:35,135 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9e90>
2024-08-20 11:21:35,136 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913ed0>
2024-08-20 11:21:35,138 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9103d0>
2024-08-20 11:21:35,138 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,139 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e911a50>
2024-08-20 11:21:35,141 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,141 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8d50>
2024-08-20 11:21:35,142 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,142 - INFO - Created relationship from nan to 电葫芦、ZMT21 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9f50>
2024-08-20 11:21:35,146 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电葫芦、ZMT21'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,147 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ab390>
2024-08-20 11:21:35,150 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b01d0>
2024-08-20 11:21:35,150 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3bd0>
2024-08-20 11:21:35,151 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9792d0>
2024-08-20 11:21:35,155 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6a50>
2024-08-20 11:21:35,155 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,156 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6610>
2024-08-20 11:21:35,159 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,160 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95e3d0>
2024-08-20 11:21:35,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,161 - INFO - Created relationship from nan to 下糖斗RV阀、磨糖机、磨糖风机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95d790>
2024-08-20 11:21:35,163 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '下糖斗RV阀、磨糖机、磨糖风机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,165 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b9e10>
2024-08-20 11:21:35,170 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1e90>
2024-08-20 11:21:35,170 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3090>
2024-08-20 11:21:35,171 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2850>
2024-08-20 11:21:35,175 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1ed0>
2024-08-20 11:21:35,176 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,177 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e4d90>
2024-08-20 11:21:35,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,180 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e7c10>
2024-08-20 11:21:35,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,181 - INFO - Created relationship from nan to 卸糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4e90>
2024-08-20 11:21:35,183 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '卸糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,185 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6d90>
2024-08-20 11:21:35,189 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aad50>
2024-08-20 11:21:35,190 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913f50>
2024-08-20 11:21:35,190 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910910>
2024-08-20 11:21:35,194 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb510>
2024-08-20 11:21:35,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,195 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9baa90>
2024-08-20 11:21:35,196 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,197 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea46910>
2024-08-20 11:21:35,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,198 - INFO - Created relationship from nan to 1#风机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b9910>
2024-08-20 11:21:35,201 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#风机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,201 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bab90>
2024-08-20 11:21:35,204 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aab10>
2024-08-20 11:21:35,205 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9d50>
2024-08-20 11:21:35,205 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910110>
2024-08-20 11:21:35,207 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912210>
2024-08-20 11:21:35,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,208 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e910a90>
2024-08-20 11:21:35,210 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,210 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e5c10>
2024-08-20 11:21:35,210 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,211 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6090>
2024-08-20 11:21:35,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,213 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6b90>
2024-08-20 11:21:35,217 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1a10>
2024-08-20 11:21:35,217 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea45c50>
2024-08-20 11:21:35,218 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44650>
2024-08-20 11:21:35,219 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea47c10>
2024-08-20 11:21:35,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,219 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea475d0>
2024-08-20 11:21:35,223 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,223 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47010>
2024-08-20 11:21:35,223 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,224 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6210>
2024-08-20 11:21:35,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,249 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7250>
2024-08-20 11:21:35,255 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3150>
2024-08-20 11:21:35,256 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2c50>
2024-08-20 11:21:35,257 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0a90>
2024-08-20 11:21:35,257 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b05d0>
2024-08-20 11:21:35,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,258 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aa690>
2024-08-20 11:21:35,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,261 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aaed0>
2024-08-20 11:21:35,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,262 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913810>
2024-08-20 11:21:35,263 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,266 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e912d10>
2024-08-20 11:21:35,270 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22050>
2024-08-20 11:21:35,271 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23c10>
2024-08-20 11:21:35,271 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aad50>
2024-08-20 11:21:35,271 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab090>
2024-08-20 11:21:35,271 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,272 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9450>
2024-08-20 11:21:35,274 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,274 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba850>
2024-08-20 11:21:35,274 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,274 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bbd10>
2024-08-20 11:21:35,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,278 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910dd0>
2024-08-20 11:21:35,281 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6990>
2024-08-20 11:21:35,281 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6e50>
2024-08-20 11:21:35,281 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e72d0>
2024-08-20 11:21:35,282 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2e90>
2024-08-20 11:21:35,282 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,282 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b3550>
2024-08-20 11:21:35,284 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,284 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1290>
2024-08-20 11:21:35,284 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,285 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea46410>
2024-08-20 11:21:35,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,287 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea20390>
2024-08-20 11:21:35,290 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3bd0>
2024-08-20 11:21:35,290 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1590>
2024-08-20 11:21:35,290 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2dd0>
2024-08-20 11:21:35,294 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5e10>
2024-08-20 11:21:35,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,295 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5f10>
2024-08-20 11:21:35,296 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,297 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e7850>
2024-08-20 11:21:35,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,297 - INFO - Created relationship from nan to 搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913d10>
2024-08-20 11:21:35,301 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,303 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e911550>
2024-08-20 11:21:35,307 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bbd10>
2024-08-20 11:21:35,308 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb390>
2024-08-20 11:21:35,308 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a80d0>
2024-08-20 11:21:35,310 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab010>
2024-08-20 11:21:35,310 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,311 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21f50>
2024-08-20 11:21:35,313 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,313 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23b10>
2024-08-20 11:21:35,313 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,314 - INFO - Created relationship from nan to 搅拌罐、吸尘器 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba050>
2024-08-20 11:21:35,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐、吸尘器'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,320 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea452d0>
2024-08-20 11:21:35,324 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e910f10>
2024-08-20 11:21:35,324 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9116d0>
2024-08-20 11:21:35,325 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab890>
2024-08-20 11:21:35,325 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab910>
2024-08-20 11:21:35,325 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,326 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a83d0>
2024-08-20 11:21:35,330 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,330 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4ad0>
2024-08-20 11:21:35,330 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,331 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5d90>
2024-08-20 11:21:35,333 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,334 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7a10>
2024-08-20 11:21:35,337 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23290>
2024-08-20 11:21:35,338 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23f50>
2024-08-20 11:21:35,338 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23950>
2024-08-20 11:21:35,339 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aedd0>
2024-08-20 11:21:35,339 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,340 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21e10>
2024-08-20 11:21:35,343 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,343 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23390>
2024-08-20 11:21:35,343 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,344 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23510>
2024-08-20 11:21:35,346 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,348 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b2990>
2024-08-20 11:21:35,352 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7750>
2024-08-20 11:21:35,353 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5710>
2024-08-20 11:21:35,353 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6a10>
2024-08-20 11:21:35,354 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e910090>
2024-08-20 11:21:35,354 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,354 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9132d0>
2024-08-20 11:21:35,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,358 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8650>
2024-08-20 11:21:35,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,359 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9fd0>
2024-08-20 11:21:35,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,363 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea46c10>
2024-08-20 11:21:35,367 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aff90>
2024-08-20 11:21:35,368 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bf7d0>
2024-08-20 11:21:35,368 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aec10>
2024-08-20 11:21:35,369 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba050>
2024-08-20 11:21:35,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,369 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e911dd0>
2024-08-20 11:21:35,373 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,373 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e912250>
2024-08-20 11:21:35,373 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,374 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910c90>
2024-08-20 11:21:35,378 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,380 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea450d0>
2024-08-20 11:21:35,385 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4ed0>
2024-08-20 11:21:35,386 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7a10>
2024-08-20 11:21:35,387 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aa690>
2024-08-20 11:21:35,389 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:35,390 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,390 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ab3d0>
2024-08-20 11:21:35,394 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,395 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0a90>
2024-08-20 11:21:35,395 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,396 - INFO - Created relationship from nan to 振动筛 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22ed0>
2024-08-20 11:21:35,398 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振动筛'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,402 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21f10>
2024-08-20 11:21:35,408 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2650>
2024-08-20 11:21:35,408 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1c10>
2024-08-20 11:21:35,409 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3050>
2024-08-20 11:21:35,410 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a8f10>
2024-08-20 11:21:35,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,411 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ab390>
2024-08-20 11:21:35,413 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,414 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aac50>
2024-08-20 11:21:35,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,415 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6e50>
2024-08-20 11:21:35,425 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,432 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5d50>
2024-08-20 11:21:35,439 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea446d0>
2024-08-20 11:21:35,445 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910890>
2024-08-20 11:21:35,447 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912210>
2024-08-20 11:21:35,450 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b90d0>
2024-08-20 11:21:35,450 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,451 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9be050>
2024-08-20 11:21:35,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,460 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bd110>
2024-08-20 11:21:35,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,463 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9af8d0>
2024-08-20 11:21:35,468 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,469 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21490>
2024-08-20 11:21:35,475 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23210>
2024-08-20 11:21:35,476 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23250>
2024-08-20 11:21:35,477 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea21850>
2024-08-20 11:21:35,483 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3550>
2024-08-20 11:21:35,484 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,485 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2990>
2024-08-20 11:21:35,489 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,490 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0590>
2024-08-20 11:21:35,493 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,494 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b3190>
2024-08-20 11:21:35,496 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,500 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea460d0>
2024-08-20 11:21:35,505 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab610>
2024-08-20 11:21:35,506 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a98d0>
2024-08-20 11:21:35,507 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a9490>
2024-08-20 11:21:35,510 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911490>
2024-08-20 11:21:35,510 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,511 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea44610>
2024-08-20 11:21:35,513 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,513 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea44ad0>
2024-08-20 11:21:35,514 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,515 - INFO - Created relationship from nan to 是否为胶基系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a9b50>
2024-08-20 11:21:35,518 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为胶基系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,521 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9aad90>
2024-08-20 11:21:35,527 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0d10>
2024-08-20 11:21:35,528 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3950>
2024-08-20 11:21:35,529 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2990>
2024-08-20 11:21:35,530 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2350>
2024-08-20 11:21:35,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,531 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea22550>
2024-08-20 11:21:35,533 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,534 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20dd0>
2024-08-20 11:21:35,534 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,535 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22e10>
2024-08-20 11:21:35,537 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,541 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea20fd0>
2024-08-20 11:21:35,547 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e910450>
2024-08-20 11:21:35,548 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910850>
2024-08-20 11:21:35,549 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9afbd0>
2024-08-20 11:21:35,552 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22650>
2024-08-20 11:21:35,553 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,554 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21b90>
2024-08-20 11:21:35,556 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,557 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20b50>
2024-08-20 11:21:35,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,558 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23590>
2024-08-20 11:21:35,561 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,566 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b0910>
2024-08-20 11:21:35,571 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b02d0>
2024-08-20 11:21:35,572 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2710>
2024-08-20 11:21:35,573 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aadd0>
2024-08-20 11:21:35,578 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9abd50>
2024-08-20 11:21:35,578 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,579 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ab910>
2024-08-20 11:21:35,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,583 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea47e50>
2024-08-20 11:21:35,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,587 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9136d0>
2024-08-20 11:21:35,590 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,595 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e912590>
2024-08-20 11:21:35,601 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9abbd0>
2024-08-20 11:21:35,602 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9abed0>
2024-08-20 11:21:35,603 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44110>
2024-08-20 11:21:35,605 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea44e50>
2024-08-20 11:21:35,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,606 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b09d0>
2024-08-20 11:21:35,610 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,612 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2090>
2024-08-20 11:21:35,612 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,613 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b08d0>
2024-08-20 11:21:35,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,624 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b2c50>
2024-08-20 11:21:35,631 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea233d0>
2024-08-20 11:21:35,632 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21c90>
2024-08-20 11:21:35,633 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ae550>
2024-08-20 11:21:35,635 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912d50>
2024-08-20 11:21:35,635 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,636 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e4a4350>
2024-08-20 11:21:35,640 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,641 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bbd10>
2024-08-20 11:21:35,642 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,644 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910e10>
2024-08-20 11:21:35,648 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,654 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea235d0>
2024-08-20 11:21:35,662 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20b10>
2024-08-20 11:21:35,663 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21e50>
2024-08-20 11:21:35,664 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea237d0>
2024-08-20 11:21:35,670 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b33d0>
2024-08-20 11:21:35,671 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,672 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b1c50>
2024-08-20 11:21:35,676 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,677 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b38d0>
2024-08-20 11:21:35,677 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,680 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ae650>
2024-08-20 11:21:35,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,692 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea47790>
2024-08-20 11:21:35,700 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aac50>
2024-08-20 11:21:35,701 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8c10>
2024-08-20 11:21:35,702 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8590>
2024-08-20 11:21:35,706 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95c5d0>
2024-08-20 11:21:35,707 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,708 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aef10>
2024-08-20 11:21:35,712 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,714 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:35,715 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,717 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea44710>
2024-08-20 11:21:35,721 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,729 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bba10>
2024-08-20 11:21:35,736 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aad50>
2024-08-20 11:21:35,737 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ab1d0>
2024-08-20 11:21:35,738 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2550>
2024-08-20 11:21:35,739 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1d50>
2024-08-20 11:21:35,739 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,741 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b37d0>
2024-08-20 11:21:35,745 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,746 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea237d0>
2024-08-20 11:21:35,747 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,749 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea209d0>
2024-08-20 11:21:35,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,758 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea20710>
2024-08-20 11:21:35,766 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95f3d0>
2024-08-20 11:21:35,768 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e95ce10>
2024-08-20 11:21:35,769 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9119d0>
2024-08-20 11:21:35,770 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2850>
2024-08-20 11:21:35,771 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,772 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2e90>
2024-08-20 11:21:35,777 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,779 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2450>
2024-08-20 11:21:35,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,781 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b15d0>
2024-08-20 11:21:35,783 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,785 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9abbd0>
2024-08-20 11:21:35,788 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20190>
2024-08-20 11:21:35,789 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea217d0>
2024-08-20 11:21:35,790 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20e90>
2024-08-20 11:21:35,791 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bab50>
2024-08-20 11:21:35,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,793 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b8d90>
2024-08-20 11:21:35,797 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,798 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea45510>
2024-08-20 11:21:35,799 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,800 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea44190>
2024-08-20 11:21:35,802 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,804 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95f610>
2024-08-20 11:21:35,808 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea47790>
2024-08-20 11:21:35,810 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23110>
2024-08-20 11:21:35,811 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea22e90>
2024-08-20 11:21:35,813 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20990>
2024-08-20 11:21:35,813 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,815 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21e10>
2024-08-20 11:21:35,819 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,821 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22f50>
2024-08-20 11:21:35,823 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,826 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8950>
2024-08-20 11:21:35,828 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,835 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b8dd0>
2024-08-20 11:21:35,844 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3c90>
2024-08-20 11:21:35,845 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0d50>
2024-08-20 11:21:35,846 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1ed0>
2024-08-20 11:21:35,852 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913590>
2024-08-20 11:21:35,852 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,854 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e5d2f50>
2024-08-20 11:21:35,857 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,858 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4750>
2024-08-20 11:21:35,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,861 - INFO - Created relationship from nan to 是否为山梨醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95d350>
2024-08-20 11:21:35,866 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为山梨醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,874 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bac50>
2024-08-20 11:21:35,883 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab1d0>
2024-08-20 11:21:35,885 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aaf50>
2024-08-20 11:21:35,886 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b1310>
2024-08-20 11:21:35,887 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b05d0>
2024-08-20 11:21:35,887 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,889 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2810>
2024-08-20 11:21:35,893 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,895 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e913590>
2024-08-20 11:21:35,895 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,896 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22090>
2024-08-20 11:21:35,900 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,921 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22190>
2024-08-20 11:21:35,931 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:35,932 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7b50>
2024-08-20 11:21:35,934 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5bd0>
2024-08-20 11:21:35,935 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6010>
2024-08-20 11:21:35,935 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,936 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e913190>
2024-08-20 11:21:35,939 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,940 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea451d0>
2024-08-20 11:21:35,940 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,941 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea207d0>
2024-08-20 11:21:35,945 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,961 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23350>
2024-08-20 11:21:35,967 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22b50>
2024-08-20 11:21:35,969 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aa410>
2024-08-20 11:21:35,969 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b38d0>
2024-08-20 11:21:35,974 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0890>
2024-08-20 11:21:35,974 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:35,975 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b0950>
2024-08-20 11:21:35,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:35,978 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bbdd0>
2024-08-20 11:21:35,979 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:35,980 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb890>
2024-08-20 11:21:35,983 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:35,998 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e75d0>
2024-08-20 11:21:36,004 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7390>
2024-08-20 11:21:36,005 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bd610>
2024-08-20 11:21:36,005 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bba10>
2024-08-20 11:21:36,006 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba790>
2024-08-20 11:21:36,006 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,007 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b8050>
2024-08-20 11:21:36,011 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,013 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8c10>
2024-08-20 11:21:36,013 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,014 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0450>
2024-08-20 11:21:36,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,029 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b0a10>
2024-08-20 11:21:36,035 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23450>
2024-08-20 11:21:36,035 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23210>
2024-08-20 11:21:36,036 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23690>
2024-08-20 11:21:36,037 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20390>
2024-08-20 11:21:36,037 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,038 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e4850>
2024-08-20 11:21:36,040 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,040 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6e90>
2024-08-20 11:21:36,040 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,042 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5590>
2024-08-20 11:21:36,044 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,056 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e911810>
2024-08-20 11:21:36,062 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20590>
2024-08-20 11:21:36,063 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23790>
2024-08-20 11:21:36,063 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea228d0>
2024-08-20 11:21:36,064 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea205d0>
2024-08-20 11:21:36,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,065 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e7790>
2024-08-20 11:21:36,068 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,068 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e5d10>
2024-08-20 11:21:36,069 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,069 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4b50>
2024-08-20 11:21:36,071 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,083 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b15d0>
2024-08-20 11:21:36,086 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0790>
2024-08-20 11:21:36,086 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9abe10>
2024-08-20 11:21:36,087 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9c50>
2024-08-20 11:21:36,087 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb490>
2024-08-20 11:21:36,087 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,088 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9be650>
2024-08-20 11:21:36,092 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,092 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bf950>
2024-08-20 11:21:36,092 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,093 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9be850>
2024-08-20 11:21:36,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,104 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bfc10>
2024-08-20 11:21:36,107 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0890>
2024-08-20 11:21:36,107 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3350>
2024-08-20 11:21:36,107 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0e90>
2024-08-20 11:21:36,108 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5490>
2024-08-20 11:21:36,108 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,108 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6890>
2024-08-20 11:21:36,112 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,112 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e46d0>
2024-08-20 11:21:36,112 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,112 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e7d90>
2024-08-20 11:21:36,114 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,115 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95f3d0>
2024-08-20 11:21:36,116 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba1d0>
2024-08-20 11:21:36,116 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9c10>
2024-08-20 11:21:36,117 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23990>
2024-08-20 11:21:36,117 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22d50>
2024-08-20 11:21:36,117 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,118 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95e7d0>
2024-08-20 11:21:36,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,120 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95efd0>
2024-08-20 11:21:36,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,121 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5e90>
2024-08-20 11:21:36,125 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,131 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7a10>
2024-08-20 11:21:36,151 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e55d0>
2024-08-20 11:21:36,163 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1c10>
2024-08-20 11:21:36,164 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2b50>
2024-08-20 11:21:36,164 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2090>
2024-08-20 11:21:36,164 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,165 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b0510>
2024-08-20 11:21:36,169 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,169 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b9810>
2024-08-20 11:21:36,173 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,173 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb1d0>
2024-08-20 11:21:36,176 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,183 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bc8d0>
2024-08-20 11:21:36,187 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea216d0>
2024-08-20 11:21:36,188 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21ed0>
2024-08-20 11:21:36,188 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bd490>
2024-08-20 11:21:36,192 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9be750>
2024-08-20 11:21:36,192 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,193 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2350>
2024-08-20 11:21:36,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,195 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b3a50>
2024-08-20 11:21:36,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,195 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b02d0>
2024-08-20 11:21:36,199 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,205 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e4310>
2024-08-20 11:21:36,210 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e77d0>
2024-08-20 11:21:36,210 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5ed0>
2024-08-20 11:21:36,211 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9e10>
2024-08-20 11:21:36,211 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b8910>
2024-08-20 11:21:36,211 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,212 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95f050>
2024-08-20 11:21:36,214 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,214 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95f210>
2024-08-20 11:21:36,214 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,215 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea22490>
2024-08-20 11:21:36,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,223 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21dd0>
2024-08-20 11:21:36,228 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b84d0>
2024-08-20 11:21:36,229 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba410>
2024-08-20 11:21:36,229 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95d590>
2024-08-20 11:21:36,229 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95c050>
2024-08-20 11:21:36,230 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,230 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6010>
2024-08-20 11:21:36,232 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,232 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e68d0>
2024-08-20 11:21:36,233 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,233 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e50d0>
2024-08-20 11:21:36,235 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,242 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6450>
2024-08-20 11:21:36,246 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1850>
2024-08-20 11:21:36,247 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9be750>
2024-08-20 11:21:36,247 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea21d50>
2024-08-20 11:21:36,249 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23890>
2024-08-20 11:21:36,249 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,250 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea22110>
2024-08-20 11:21:36,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,253 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ae4d0>
2024-08-20 11:21:36,253 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,253 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23a90>
2024-08-20 11:21:36,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,262 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea20590>
2024-08-20 11:21:36,265 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2610>
2024-08-20 11:21:36,266 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b24d0>
2024-08-20 11:21:36,266 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2c50>
2024-08-20 11:21:36,270 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bd310>
2024-08-20 11:21:36,270 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,271 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bc690>
2024-08-20 11:21:36,272 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,273 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6950>
2024-08-20 11:21:36,273 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,274 - INFO - Created relationship from nan to 木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e59d0>
2024-08-20 11:21:36,276 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,283 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7b10>
2024-08-20 11:21:36,286 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bac10>
2024-08-20 11:21:36,286 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ac390>
2024-08-20 11:21:36,287 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea47c90>
2024-08-20 11:21:36,287 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea45190>
2024-08-20 11:21:36,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,288 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9afa50>
2024-08-20 11:21:36,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,290 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95f050>
2024-08-20 11:21:36,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,291 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5810>
2024-08-20 11:21:36,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,301 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5a90>
2024-08-20 11:21:36,305 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e78d0>
2024-08-20 11:21:36,306 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bb990>
2024-08-20 11:21:36,306 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9be990>
2024-08-20 11:21:36,306 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9be750>
2024-08-20 11:21:36,307 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,307 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2450>
2024-08-20 11:21:36,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,311 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b33d0>
2024-08-20 11:21:36,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,312 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23c50>
2024-08-20 11:21:36,314 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,321 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23950>
2024-08-20 11:21:36,325 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46790>
2024-08-20 11:21:36,326 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9132d0>
2024-08-20 11:21:36,326 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea46410>
2024-08-20 11:21:36,326 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea467d0>
2024-08-20 11:21:36,327 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,327 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bc750>
2024-08-20 11:21:36,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,329 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20ed0>
2024-08-20 11:21:36,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,330 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea223d0>
2024-08-20 11:21:36,333 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,340 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21e10>
2024-08-20 11:21:36,344 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2450>
2024-08-20 11:21:36,344 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0f10>
2024-08-20 11:21:36,345 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7750>
2024-08-20 11:21:36,345 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4ed0>
2024-08-20 11:21:36,345 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,346 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5810>
2024-08-20 11:21:36,348 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,348 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b9d10>
2024-08-20 11:21:36,348 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,349 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb7d0>
2024-08-20 11:21:36,351 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,357 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95d790>
2024-08-20 11:21:36,360 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7190>
2024-08-20 11:21:36,361 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7690>
2024-08-20 11:21:36,361 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6a50>
2024-08-20 11:21:36,362 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95cc50>
2024-08-20 11:21:36,362 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,362 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b9410>
2024-08-20 11:21:36,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,364 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0d90>
2024-08-20 11:21:36,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,365 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0410>
2024-08-20 11:21:36,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,369 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b2650>
2024-08-20 11:21:36,370 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23b10>
2024-08-20 11:21:36,371 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20190>
2024-08-20 11:21:36,371 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bfd50>
2024-08-20 11:21:36,371 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46810>
2024-08-20 11:21:36,371 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,372 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e910990>
2024-08-20 11:21:36,374 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,374 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9136d0>
2024-08-20 11:21:36,374 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,375 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bd7d0>
2024-08-20 11:21:36,379 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,384 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22910>
2024-08-20 11:21:36,387 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21bd0>
2024-08-20 11:21:36,387 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b02d0>
2024-08-20 11:21:36,387 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0910>
2024-08-20 11:21:36,388 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1590>
2024-08-20 11:21:36,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,388 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea47c90>
2024-08-20 11:21:36,392 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,392 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea45d90>
2024-08-20 11:21:36,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,396 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bacd0>
2024-08-20 11:21:36,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,407 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95d1d0>
2024-08-20 11:21:36,411 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e910790>
2024-08-20 11:21:36,412 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9135d0>
2024-08-20 11:21:36,412 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911c50>
2024-08-20 11:21:36,412 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aab50>
2024-08-20 11:21:36,413 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,413 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e913f10>
2024-08-20 11:21:36,415 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,416 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e913310>
2024-08-20 11:21:36,416 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,416 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb5d0>
2024-08-20 11:21:36,420 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,425 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95f150>
2024-08-20 11:21:36,429 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5d50>
2024-08-20 11:21:36,429 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1150>
2024-08-20 11:21:36,430 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3250>
2024-08-20 11:21:36,430 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2390>
2024-08-20 11:21:36,430 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,431 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2c90>
2024-08-20 11:21:36,433 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,433 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea449d0>
2024-08-20 11:21:36,433 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,434 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21a10>
2024-08-20 11:21:36,436 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,443 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22390>
2024-08-20 11:21:36,447 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a8310>
2024-08-20 11:21:36,448 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9d50>
2024-08-20 11:21:36,448 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9be550>
2024-08-20 11:21:36,448 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23f90>
2024-08-20 11:21:36,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,449 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23a90>
2024-08-20 11:21:36,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,453 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1fd0>
2024-08-20 11:21:36,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,454 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2850>
2024-08-20 11:21:36,456 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,463 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b1310>
2024-08-20 11:21:36,468 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95f950>
2024-08-20 11:21:36,468 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:36,469 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5490>
2024-08-20 11:21:36,469 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6050>
2024-08-20 11:21:36,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,470 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ba290>
2024-08-20 11:21:36,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,474 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e912f50>
2024-08-20 11:21:36,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,475 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e912810>
2024-08-20 11:21:36,478 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,485 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ab290>
2024-08-20 11:21:36,489 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913c50>
2024-08-20 11:21:36,490 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e912c50>
2024-08-20 11:21:36,490 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e4a10>
2024-08-20 11:21:36,494 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4f90>
2024-08-20 11:21:36,494 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,495 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea451d0>
2024-08-20 11:21:36,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,498 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea46890>
2024-08-20 11:21:36,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,499 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95f110>
2024-08-20 11:21:36,501 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,509 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b2d90>
2024-08-20 11:21:36,514 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0d10>
2024-08-20 11:21:36,514 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20a90>
2024-08-20 11:21:36,515 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea21c90>
2024-08-20 11:21:36,516 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a8ad0>
2024-08-20 11:21:36,516 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,517 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aa8d0>
2024-08-20 11:21:36,520 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,520 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e8c0290>
2024-08-20 11:21:36,521 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,521 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9aa990>
2024-08-20 11:21:36,525 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,533 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9abd50>
2024-08-20 11:21:36,537 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5c50>
2024-08-20 11:21:36,538 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7190>
2024-08-20 11:21:36,539 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7e10>
2024-08-20 11:21:36,539 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e67d0>
2024-08-20 11:21:36,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,540 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e912410>
2024-08-20 11:21:36,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,545 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e913850>
2024-08-20 11:21:36,545 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,545 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9103d0>
2024-08-20 11:21:36,547 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,555 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea44310>
2024-08-20 11:21:36,560 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e460990>
2024-08-20 11:21:36,560 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9add50>
2024-08-20 11:21:36,561 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9f90>
2024-08-20 11:21:36,562 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bad50>
2024-08-20 11:21:36,562 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,563 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ac690>
2024-08-20 11:21:36,565 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,565 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea45810>
2024-08-20 11:21:36,565 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,566 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea46410>
2024-08-20 11:21:36,570 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,577 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e911a10>
2024-08-20 11:21:36,581 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913890>
2024-08-20 11:21:36,582 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e4110>
2024-08-20 11:21:36,582 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6f50>
2024-08-20 11:21:36,584 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7e50>
2024-08-20 11:21:36,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,585 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5290>
2024-08-20 11:21:36,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,587 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ab250>
2024-08-20 11:21:36,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,588 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ab290>
2024-08-20 11:21:36,590 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,596 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bbc10>
2024-08-20 11:21:36,602 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba550>
2024-08-20 11:21:36,602 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0590>
2024-08-20 11:21:36,603 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9550>
2024-08-20 11:21:36,603 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb4d0>
2024-08-20 11:21:36,603 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,604 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b9f50>
2024-08-20 11:21:36,606 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,606 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aa410>
2024-08-20 11:21:36,607 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,607 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a8bd0>
2024-08-20 11:21:36,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,616 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9a8110>
2024-08-20 11:21:36,620 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6a90>
2024-08-20 11:21:36,621 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6fd0>
2024-08-20 11:21:36,621 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912410>
2024-08-20 11:21:36,622 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912390>
2024-08-20 11:21:36,622 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,622 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e910d90>
2024-08-20 11:21:36,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,624 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea44550>
2024-08-20 11:21:36,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,625 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45110>
2024-08-20 11:21:36,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,627 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b3810>
2024-08-20 11:21:36,628 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea45810>
2024-08-20 11:21:36,629 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea45a90>
2024-08-20 11:21:36,629 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910210>
2024-08-20 11:21:36,629 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912b10>
2024-08-20 11:21:36,629 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,630 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e912710>
2024-08-20 11:21:36,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,632 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4b90>
2024-08-20 11:21:36,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,633 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6c10>
2024-08-20 11:21:36,635 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,641 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5e90>
2024-08-20 11:21:36,645 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9a10>
2024-08-20 11:21:36,645 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a82d0>
2024-08-20 11:21:36,646 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b9410>
2024-08-20 11:21:36,646 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb1d0>
2024-08-20 11:21:36,646 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,647 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b3990>
2024-08-20 11:21:36,649 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,650 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b21d0>
2024-08-20 11:21:36,652 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,652 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ab550>
2024-08-20 11:21:36,654 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,662 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9a8650>
2024-08-20 11:21:36,667 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e5bd0>
2024-08-20 11:21:36,668 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5450>
2024-08-20 11:21:36,668 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6010>
2024-08-20 11:21:36,669 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb890>
2024-08-20 11:21:36,669 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,670 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b8a90>
2024-08-20 11:21:36,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,674 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bbcd0>
2024-08-20 11:21:36,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,675 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e913910>
2024-08-20 11:21:36,677 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,684 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910790>
2024-08-20 11:21:36,689 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1790>
2024-08-20 11:21:36,690 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b1cd0>
2024-08-20 11:21:36,690 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bd310>
2024-08-20 11:21:36,691 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bcbd0>
2024-08-20 11:21:36,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,692 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bd690>
2024-08-20 11:21:36,696 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,697 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b33d0>
2024-08-20 11:21:36,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,697 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b08d0>
2024-08-20 11:21:36,701 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,708 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e911410>
2024-08-20 11:21:36,713 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913a50>
2024-08-20 11:21:36,714 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea464d0>
2024-08-20 11:21:36,714 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7a10>
2024-08-20 11:21:36,718 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4cd0>
2024-08-20 11:21:36,719 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,720 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5110>
2024-08-20 11:21:36,722 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,724 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6190>
2024-08-20 11:21:36,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,727 - INFO - Created relationship from nan to 气动泵（气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb4d0>
2024-08-20 11:21:36,731 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵（气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,741 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:36,746 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95e550>
2024-08-20 11:21:36,747 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e95f3d0>
2024-08-20 11:21:36,747 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8ed0>
2024-08-20 11:21:36,748 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a89d0>
2024-08-20 11:21:36,748 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,749 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9310>
2024-08-20 11:21:36,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,751 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e4a50>
2024-08-20 11:21:36,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,752 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6c90>
2024-08-20 11:21:36,754 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,761 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5cd0>
2024-08-20 11:21:36,767 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bbc50>
2024-08-20 11:21:36,767 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b9bd0>
2024-08-20 11:21:36,767 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b8590>
2024-08-20 11:21:36,768 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913890>
2024-08-20 11:21:36,768 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,768 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9139d0>
2024-08-20 11:21:36,772 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,772 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0350>
2024-08-20 11:21:36,772 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,773 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2610>
2024-08-20 11:21:36,775 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,781 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95cc50>
2024-08-20 11:21:36,785 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0a10>
2024-08-20 11:21:36,785 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913d10>
2024-08-20 11:21:36,786 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e911b10>
2024-08-20 11:21:36,786 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911c90>
2024-08-20 11:21:36,786 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,787 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b8e90>
2024-08-20 11:21:36,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,789 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba010>
2024-08-20 11:21:36,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,789 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45c10>
2024-08-20 11:21:36,793 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,798 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea47e50>
2024-08-20 11:21:36,802 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6810>
2024-08-20 11:21:36,802 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6dd0>
2024-08-20 11:21:36,803 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aac90>
2024-08-20 11:21:36,803 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9bd0>
2024-08-20 11:21:36,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,803 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95d250>
2024-08-20 11:21:36,805 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,806 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20e10>
2024-08-20 11:21:36,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,806 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95ead0>
2024-08-20 11:21:36,810 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,812 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5c10>
2024-08-20 11:21:36,817 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6850>
2024-08-20 11:21:36,817 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e4c90>
2024-08-20 11:21:36,818 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea47850>
2024-08-20 11:21:36,818 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea45fd0>
2024-08-20 11:21:36,818 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,818 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9e50>
2024-08-20 11:21:36,822 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,822 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aa8d0>
2024-08-20 11:21:36,822 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,822 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb5d0>
2024-08-20 11:21:36,824 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,829 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b87d0>
2024-08-20 11:21:36,834 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e911f10>
2024-08-20 11:21:36,834 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea22710>
2024-08-20 11:21:36,835 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23cd0>
2024-08-20 11:21:36,835 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea223d0>
2024-08-20 11:21:36,835 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,836 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ba7d0>
2024-08-20 11:21:36,837 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,838 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b9c50>
2024-08-20 11:21:36,838 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,838 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b19d0>
2024-08-20 11:21:36,840 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,841 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e913d90>
2024-08-20 11:21:36,842 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea450d0>
2024-08-20 11:21:36,842 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea44590>
2024-08-20 11:21:36,843 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7a10>
2024-08-20 11:21:36,843 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e62d0>
2024-08-20 11:21:36,843 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,843 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6dd0>
2024-08-20 11:21:36,847 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,847 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9abb90>
2024-08-20 11:21:36,847 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,847 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a82d0>
2024-08-20 11:21:36,849 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,854 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95c550>
2024-08-20 11:21:36,857 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21c50>
2024-08-20 11:21:36,858 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21ed0>
2024-08-20 11:21:36,859 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bd690>
2024-08-20 11:21:36,860 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6a50>
2024-08-20 11:21:36,860 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,860 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5590>
2024-08-20 11:21:36,864 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,864 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6390>
2024-08-20 11:21:36,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,868 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6890>
2024-08-20 11:21:36,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,876 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea45190>
2024-08-20 11:21:36,881 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab810>
2024-08-20 11:21:36,881 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910110>
2024-08-20 11:21:36,882 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910d90>
2024-08-20 11:21:36,882 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0190>
2024-08-20 11:21:36,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,883 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b8a10>
2024-08-20 11:21:36,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,885 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22690>
2024-08-20 11:21:36,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,886 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea224d0>
2024-08-20 11:21:36,887 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,893 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23490>
2024-08-20 11:21:36,898 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b9f90>
2024-08-20 11:21:36,898 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e910490>
2024-08-20 11:21:36,899 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912b50>
2024-08-20 11:21:36,899 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913050>
2024-08-20 11:21:36,899 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,900 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9a9bd0>
2024-08-20 11:21:36,902 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,902 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8a50>
2024-08-20 11:21:36,902 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,903 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea46690>
2024-08-20 11:21:36,904 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,909 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea46110>
2024-08-20 11:21:36,915 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7ad0>
2024-08-20 11:21:36,915 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bf750>
2024-08-20 11:21:36,916 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20750>
2024-08-20 11:21:36,916 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22890>
2024-08-20 11:21:36,916 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,917 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e8c0fd0>
2024-08-20 11:21:36,921 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,922 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e8c3710>
2024-08-20 11:21:36,922 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,923 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9106d0>
2024-08-20 11:21:36,924 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,930 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e911750>
2024-08-20 11:21:36,935 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22890>
2024-08-20 11:21:36,935 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea207d0>
2024-08-20 11:21:36,936 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea21bd0>
2024-08-20 11:21:36,937 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21690>
2024-08-20 11:21:36,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,938 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23550>
2024-08-20 11:21:36,942 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,942 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6d10>
2024-08-20 11:21:36,942 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,943 - INFO - Created relationship from nan to 边料拆包机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e74d0>
2024-08-20 11:21:36,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '边料拆包机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,953 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e7110>
2024-08-20 11:21:36,959 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95c0d0>
2024-08-20 11:21:36,959 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bcad0>
2024-08-20 11:21:36,960 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea45a90>
2024-08-20 11:21:36,961 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea44ed0>
2024-08-20 11:21:36,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,962 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bcad0>
2024-08-20 11:21:36,963 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,964 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95fbd0>
2024-08-20 11:21:36,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,964 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95da10>
2024-08-20 11:21:36,968 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,973 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6610>
2024-08-20 11:21:36,978 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6210>
2024-08-20 11:21:36,978 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e50d0>
2024-08-20 11:21:36,979 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea230d0>
2024-08-20 11:21:36,979 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea200d0>
2024-08-20 11:21:36,979 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:36,980 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea20690>
2024-08-20 11:21:36,982 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:36,982 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22190>
2024-08-20 11:21:36,982 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:36,983 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911110>
2024-08-20 11:21:36,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:36,992 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e911850>
2024-08-20 11:21:36,998 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46810>
2024-08-20 11:21:36,999 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aacd0>
2024-08-20 11:21:36,999 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea46b10>
2024-08-20 11:21:37,000 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46050>
2024-08-20 11:21:37,000 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,000 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e910450>
2024-08-20 11:21:37,002 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,003 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e912250>
2024-08-20 11:21:37,003 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,003 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e910a90>
2024-08-20 11:21:37,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,010 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea21710>
2024-08-20 11:21:37,015 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea203d0>
2024-08-20 11:21:37,016 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21910>
2024-08-20 11:21:37,017 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7a50>
2024-08-20 11:21:37,017 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e63d0>
2024-08-20 11:21:37,017 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,018 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e7190>
2024-08-20 11:21:37,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,021 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6510>
2024-08-20 11:21:37,022 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,022 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95fc50>
2024-08-20 11:21:37,024 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,030 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bc790>
2024-08-20 11:21:37,035 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95c550>
2024-08-20 11:21:37,035 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7cd0>
2024-08-20 11:21:37,036 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6e50>
2024-08-20 11:21:37,036 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7050>
2024-08-20 11:21:37,036 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,037 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5a50>
2024-08-20 11:21:37,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,039 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21850>
2024-08-20 11:21:37,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,040 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea20d90>
2024-08-20 11:21:37,041 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,047 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22790>
2024-08-20 11:21:37,051 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea202d0>
2024-08-20 11:21:37,051 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9117d0>
2024-08-20 11:21:37,052 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e913710>
2024-08-20 11:21:37,052 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea46c90>
2024-08-20 11:21:37,052 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,053 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aa710>
2024-08-20 11:21:37,054 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,055 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aa8d0>
2024-08-20 11:21:37,055 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,055 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9111d0>
2024-08-20 11:21:37,057 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,057 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e913a50>
2024-08-20 11:21:37,058 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21e50>
2024-08-20 11:21:37,058 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21e10>
2024-08-20 11:21:37,059 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea22610>
2024-08-20 11:21:37,059 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea222d0>
2024-08-20 11:21:37,059 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,060 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bd890>
2024-08-20 11:21:37,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,063 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea44950>
2024-08-20 11:21:37,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,064 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4850>
2024-08-20 11:21:37,065 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,071 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5d90>
2024-08-20 11:21:37,075 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aa050>
2024-08-20 11:21:37,075 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a9190>
2024-08-20 11:21:37,079 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e412710>
2024-08-20 11:21:37,083 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2a50>
2024-08-20 11:21:37,083 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,084 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9aa4d0>
2024-08-20 11:21:37,086 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,086 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aa650>
2024-08-20 11:21:37,090 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,090 - INFO - Created relationship from nan to 加热：蜡池加热、热熔胶池加热等 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95fbd0>
2024-08-20 11:21:37,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热：蜡池加热、热熔胶池加热等'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,099 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e74d0>
2024-08-20 11:21:37,104 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e61d0>
2024-08-20 11:21:37,104 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bca90>
2024-08-20 11:21:37,105 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea23e90>
2024-08-20 11:21:37,105 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20910>
2024-08-20 11:21:37,105 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,106 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea21a10>
2024-08-20 11:21:37,108 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,108 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22350>
2024-08-20 11:21:37,108 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,109 - INFO - Created relationship from nan to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea47890>
2024-08-20 11:21:37,111 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,117 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9103d0>
2024-08-20 11:21:37,121 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2f50>
2024-08-20 11:21:37,122 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0990>
2024-08-20 11:21:37,122 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e912b50>
2024-08-20 11:21:37,126 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e912710>
2024-08-20 11:21:37,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,127 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23890>
2024-08-20 11:21:37,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,130 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea22d90>
2024-08-20 11:21:37,130 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,131 - INFO - Created relationship from nan to 需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23690>
2024-08-20 11:21:37,133 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,138 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea22910>
2024-08-20 11:21:37,142 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea47e90>
2024-08-20 11:21:37,142 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea46bd0>
2024-08-20 11:21:37,143 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6690>
2024-08-20 11:21:37,145 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e4f90>
2024-08-20 11:21:37,145 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,145 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e6e50>
2024-08-20 11:21:37,147 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,148 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8d50>
2024-08-20 11:21:37,148 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,149 - INFO - Created relationship from nan to 包装机（所有设备） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b0950>
2024-08-20 11:21:37,151 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装机（所有设备）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,152 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b0250>
2024-08-20 11:21:37,154 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aa4d0>
2024-08-20 11:21:37,155 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a8710>
2024-08-20 11:21:37,155 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e7850>
2024-08-20 11:21:37,159 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7a90>
2024-08-20 11:21:37,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,161 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e4e10>
2024-08-20 11:21:37,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,163 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e6810>
2024-08-20 11:21:37,163 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,164 - INFO - Created relationship from nan to 小包装除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea45950>
2024-08-20 11:21:37,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '小包装除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,174 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23e10>
2024-08-20 11:21:37,179 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea204d0>
2024-08-20 11:21:37,179 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea21d50>
2024-08-20 11:21:37,180 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e910890>
2024-08-20 11:21:37,183 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2c10>
2024-08-20 11:21:37,184 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,185 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b1150>
2024-08-20 11:21:37,186 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,187 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9aed50>
2024-08-20 11:21:37,187 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,188 - INFO - Created relationship from nan to 包装产线 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b12d0>
2024-08-20 11:21:37,190 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装产线'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,197 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea44990>
2024-08-20 11:21:37,202 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23150>
2024-08-20 11:21:37,202 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20950>
2024-08-20 11:21:37,203 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea20cd0>
2024-08-20 11:21:37,206 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21790>
2024-08-20 11:21:37,206 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,207 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea20110>
2024-08-20 11:21:37,209 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,210 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e910110>
2024-08-20 11:21:37,210 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,211 - INFO - Created relationship from nan to 手工操作，不停机，不影响正常生产 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e6810>
2024-08-20 11:21:37,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '手工操作，不停机，不影响正常生产'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,239 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5810>
2024-08-20 11:21:37,245 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a8210>
2024-08-20 11:21:37,245 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9aef10>
2024-08-20 11:21:37,246 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9bbf10>
2024-08-20 11:21:37,249 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bb410>
2024-08-20 11:21:37,249 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,250 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e482a90>
2024-08-20 11:21:37,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,252 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e5410>
2024-08-20 11:21:37,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,253 - INFO - Created relationship from nan to 加热设备：蜡池加热、热熔胶池加热等，约20分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e4110>
2024-08-20 11:21:37,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热设备：蜡池加热、热熔胶池加热等，约20分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,261 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e4ed0>
2024-08-20 11:21:37,264 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea232d0>
2024-08-20 11:21:37,264 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20c10>
2024-08-20 11:21:37,264 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea225d0>
2024-08-20 11:21:37,267 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21a10>
2024-08-20 11:21:37,267 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,268 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23f90>
2024-08-20 11:21:37,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,270 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea462d0>
2024-08-20 11:21:37,270 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,271 - INFO - Created relationship from nan to 造盒机、包装机、裂胶机、折胶台 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9132d0>
2024-08-20 11:21:37,275 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '造盒机、包装机、裂胶机、折胶台'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,281 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b3ed0>
2024-08-20 11:21:37,285 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b9790>
2024-08-20 11:21:37,286 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9bacd0>
2024-08-20 11:21:37,286 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ba690>
2024-08-20 11:21:37,286 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b8a10>
2024-08-20 11:21:37,286 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,287 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea44f10>
2024-08-20 11:21:37,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,291 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea46e50>
2024-08-20 11:21:37,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,292 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2d50>
2024-08-20 11:21:37,295 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,300 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e910850>
2024-08-20 11:21:37,303 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aa710>
2024-08-20 11:21:37,303 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20a10>
2024-08-20 11:21:37,303 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea239d0>
2024-08-20 11:21:37,304 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20ed0>
2024-08-20 11:21:37,304 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,304 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea22d90>
2024-08-20 11:21:37,306 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,307 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e49d0>
2024-08-20 11:21:37,307 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,307 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e7010>
2024-08-20 11:21:37,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,312 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6890>
2024-08-20 11:21:37,317 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e71d0>
2024-08-20 11:21:37,317 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6dd0>
2024-08-20 11:21:37,318 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea232d0>
2024-08-20 11:21:37,318 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea208d0>
2024-08-20 11:21:37,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,319 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea20950>
2024-08-20 11:21:37,322 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,322 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea21650>
2024-08-20 11:21:37,322 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,323 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9a88d0>
2024-08-20 11:21:37,325 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,330 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9a8a10>
2024-08-20 11:21:37,334 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3210>
2024-08-20 11:21:37,335 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea44550>
2024-08-20 11:21:37,335 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea462d0>
2024-08-20 11:21:37,335 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b8790>
2024-08-20 11:21:37,336 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,336 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e8c3910>
2024-08-20 11:21:37,338 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,339 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e8c19d0>
2024-08-20 11:21:37,339 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,339 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb8d0>
2024-08-20 11:21:37,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,342 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ba110>
2024-08-20 11:21:37,342 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ae550>
2024-08-20 11:21:37,343 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b15d0>
2024-08-20 11:21:37,343 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0cd0>
2024-08-20 11:21:37,344 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0e50>
2024-08-20 11:21:37,344 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,344 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b1050>
2024-08-20 11:21:37,348 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,348 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e7fd0>
2024-08-20 11:21:37,348 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,349 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e7710>
2024-08-20 11:21:37,353 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,359 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5490>
2024-08-20 11:21:37,364 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9128d0>
2024-08-20 11:21:37,365 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9106d0>
2024-08-20 11:21:37,368 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95dcd0>
2024-08-20 11:21:37,372 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea23690>
2024-08-20 11:21:37,372 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,373 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95d390>
2024-08-20 11:21:37,377 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,377 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e95c1d0>
2024-08-20 11:21:37,379 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,380 - INFO - Created relationship from nan to 系统自动加热：几个加热版——无数据采集 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e911f90>
2024-08-20 11:21:37,383 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '系统自动加热：几个加热版——无数据采集'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,388 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e913bd0>
2024-08-20 11:21:37,392 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e59d0>
2024-08-20 11:21:37,392 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e6510>
2024-08-20 11:21:37,393 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5190>
2024-08-20 11:21:37,393 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2950>
2024-08-20 11:21:37,393 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,394 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b2f50>
2024-08-20 11:21:37,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,396 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2390>
2024-08-20 11:21:37,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,397 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9af6d0>
2024-08-20 11:21:37,401 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,406 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bb2d0>
2024-08-20 11:21:37,409 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22710>
2024-08-20 11:21:37,410 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea216d0>
2024-08-20 11:21:37,410 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aeb90>
2024-08-20 11:21:37,410 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3990>
2024-08-20 11:21:37,411 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,411 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b0790>
2024-08-20 11:21:37,413 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,414 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b0350>
2024-08-20 11:21:37,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,414 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b3b90>
2024-08-20 11:21:37,416 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,422 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bae90>
2024-08-20 11:21:37,426 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7e50>
2024-08-20 11:21:37,427 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5010>
2024-08-20 11:21:37,427 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e4750>
2024-08-20 11:21:37,429 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e78d0>
2024-08-20 11:21:37,430 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,430 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e913bd0>
2024-08-20 11:21:37,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,433 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e910150>
2024-08-20 11:21:37,433 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,434 - INFO - Created relationship from nan to 皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95d7d0>
2024-08-20 11:21:37,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,445 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12ea23650>
2024-08-20 11:21:37,451 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9120d0>
2024-08-20 11:21:37,451 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e4a10>
2024-08-20 11:21:37,452 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6310>
2024-08-20 11:21:37,455 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7dd0>
2024-08-20 11:21:37,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,456 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e74d0>
2024-08-20 11:21:37,458 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,459 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b9610>
2024-08-20 11:21:37,459 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,460 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bb0d0>
2024-08-20 11:21:37,464 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,473 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9bb5d0>
2024-08-20 11:21:37,479 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b0190>
2024-08-20 11:21:37,480 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b02d0>
2024-08-20 11:21:37,480 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b0610>
2024-08-20 11:21:37,481 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea22790>
2024-08-20 11:21:37,481 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,482 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23150>
2024-08-20 11:21:37,486 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,487 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea20210>
2024-08-20 11:21:37,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,488 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95d590>
2024-08-20 11:21:37,491 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,500 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b9550>
2024-08-20 11:21:37,504 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b9410>
2024-08-20 11:21:37,505 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b0bd0>
2024-08-20 11:21:37,505 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b3550>
2024-08-20 11:21:37,509 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2990>
2024-08-20 11:21:37,509 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,510 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9af790>
2024-08-20 11:21:37,514 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,515 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e5cd0>
2024-08-20 11:21:37,515 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,516 - INFO - Created relationship from nan to 20分钟左右 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e46d0>
2024-08-20 11:21:37,518 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '20分钟左右'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,526 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5090>
2024-08-20 11:21:37,532 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea21e90>
2024-08-20 11:21:37,532 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea23d50>
2024-08-20 11:21:37,533 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ab690>
2024-08-20 11:21:37,534 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab010>
2024-08-20 11:21:37,535 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,535 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea211d0>
2024-08-20 11:21:37,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,539 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea23250>
2024-08-20 11:21:37,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,540 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea21590>
2024-08-20 11:21:37,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,552 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6a10>
2024-08-20 11:21:37,558 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7fd0>
2024-08-20 11:21:37,558 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e913b10>
2024-08-20 11:21:37,559 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b2910>
2024-08-20 11:21:37,560 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b19d0>
2024-08-20 11:21:37,560 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,561 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b0bd0>
2024-08-20 11:21:37,563 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,564 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9af790>
2024-08-20 11:21:37,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,565 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9ba510>
2024-08-20 11:21:37,567 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,574 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9ba090>
2024-08-20 11:21:37,578 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9cd0>
2024-08-20 11:21:37,579 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9abb50>
2024-08-20 11:21:37,580 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9af9d0>
2024-08-20 11:21:37,580 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e95fc10>
2024-08-20 11:21:37,580 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,581 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bac10>
2024-08-20 11:21:37,583 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,584 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9ba290>
2024-08-20 11:21:37,585 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,586 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e4a50d0>
2024-08-20 11:21:37,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,595 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b0390>
2024-08-20 11:21:37,600 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2190>
2024-08-20 11:21:37,600 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e4f1550>
2024-08-20 11:21:37,602 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e6390>
2024-08-20 11:21:37,602 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e60d0>
2024-08-20 11:21:37,602 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,603 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5490>
2024-08-20 11:21:37,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,606 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea200d0>
2024-08-20 11:21:37,606 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,607 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ea23c90>
2024-08-20 11:21:37,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,618 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9aac50>
2024-08-20 11:21:37,624 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea20810>
2024-08-20 11:21:37,625 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e7a10>
2024-08-20 11:21:37,626 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5e90>
2024-08-20 11:21:37,627 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e63d0>
2024-08-20 11:21:37,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,628 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9e5b10>
2024-08-20 11:21:37,630 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,630 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b3390>
2024-08-20 11:21:37,630 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,631 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1b50>
2024-08-20 11:21:37,633 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,642 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b2f50>
2024-08-20 11:21:37,648 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ba890>
2024-08-20 11:21:37,649 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9ba610>
2024-08-20 11:21:37,650 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e95d310>
2024-08-20 11:21:37,650 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ab410>
2024-08-20 11:21:37,651 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,652 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bfdd0>
2024-08-20 11:21:37,653 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,654 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bc490>
2024-08-20 11:21:37,654 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,655 - INFO - Created relationship from nan to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bca50>
2024-08-20 11:21:37,658 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,667 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e912dd0>
2024-08-20 11:21:37,671 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9ae450>
2024-08-20 11:21:37,672 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b8750>
2024-08-20 11:21:37,672 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b85d0>
2024-08-20 11:21:37,675 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b3f50>
2024-08-20 11:21:37,676 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,677 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b1010>
2024-08-20 11:21:37,678 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,679 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b2750>
2024-08-20 11:21:37,679 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,680 - INFO - Created relationship from nan to 设备管理系统-可忽略能耗，追溯码 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e95f050>
2024-08-20 11:21:37,683 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '设备管理系统-可忽略能耗，追溯码'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,692 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e6b90>
2024-08-20 11:21:37,697 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6f90>
2024-08-20 11:21:37,698 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea20050>
2024-08-20 11:21:37,699 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44990>
2024-08-20 11:21:37,701 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea450d0>
2024-08-20 11:21:37,701 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,702 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e95ddd0>
2024-08-20 11:21:37,704 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,704 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e7990>
2024-08-20 11:21:37,704 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,706 - INFO - Created relationship from nan to 大箱喷码机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e5b50>
2024-08-20 11:21:37,708 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '大箱喷码机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,710 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9e5d50>
2024-08-20 11:21:37,715 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1990>
2024-08-20 11:21:37,716 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b3a90>
2024-08-20 11:21:37,717 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9b26d0>
2024-08-20 11:21:37,720 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b1850>
2024-08-20 11:21:37,720 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,721 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9b86d0>
2024-08-20 11:21:37,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,725 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a9ed0>
2024-08-20 11:21:37,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,727 - INFO - Created relationship from nan to 转箭过程待机，无其他能源消耗 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9af350>
2024-08-20 11:21:37,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '转箭过程待机，无其他能源消耗'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,739 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e4a4850>
2024-08-20 11:21:37,744 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea44d50>
2024-08-20 11:21:37,745 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e8c2e90>
2024-08-20 11:21:37,746 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9aeb50>
2024-08-20 11:21:37,746 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9950>
2024-08-20 11:21:37,747 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,748 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea47950>
2024-08-20 11:21:37,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,752 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ea46250>
2024-08-20 11:21:37,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,753 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9be990>
2024-08-20 11:21:37,757 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,766 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b0d90>
2024-08-20 11:21:37,771 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9b2510>
2024-08-20 11:21:37,772 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9b2610>
2024-08-20 11:21:37,772 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9ba510>
2024-08-20 11:21:37,773 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bac10>
2024-08-20 11:21:37,773 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,774 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea23090>
2024-08-20 11:21:37,778 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,779 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9e7c10>
2024-08-20 11:21:37,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,780 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9e7790>
2024-08-20 11:21:37,782 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,793 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e95fc90>
2024-08-20 11:21:37,798 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e6d10>
2024-08-20 11:21:37,799 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e72d0>
2024-08-20 11:21:37,799 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e4850>
2024-08-20 11:21:37,800 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e7a90>
2024-08-20 11:21:37,800 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,801 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9bb610>
2024-08-20 11:21:37,805 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,805 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9bbc50>
2024-08-20 11:21:37,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,806 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b1910>
2024-08-20 11:21:37,810 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,819 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b16d0>
2024-08-20 11:21:37,825 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e913310>
2024-08-20 11:21:37,826 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ea47e90>
2024-08-20 11:21:37,827 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ea44990>
2024-08-20 11:21:37,827 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9a9950>
2024-08-20 11:21:37,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,828 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e8c1250>
2024-08-20 11:21:37,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,833 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e478e10>
2024-08-20 11:21:37,834 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,835 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e8c0cd0>
2024-08-20 11:21:37,838 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,847 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e8c1890>
2024-08-20 11:21:37,852 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9e72d0>
2024-08-20 11:21:37,852 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9e5510>
2024-08-20 11:21:37,853 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9e5410>
2024-08-20 11:21:37,853 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12ea45c50>
2024-08-20 11:21:37,853 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,854 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12ea46490>
2024-08-20 11:21:37,856 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,857 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9b1110>
2024-08-20 11:21:37,857 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,858 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9b2f10>
2024-08-20 11:21:37,860 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,868 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x12e9b2090>
2024-08-20 11:21:37,873 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9bfd50>
2024-08-20 11:21:37,874 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12e9a8890>
2024-08-20 11:21:37,874 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12e9a8d50>
2024-08-20 11:21:37,875 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12e9aa9d0>
2024-08-20 11:21:37,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:21:37,876 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x12e9ab690>
2024-08-20 11:21:37,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:21:37,880 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12e9a8bd0>
2024-08-20 11:21:37,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:21:37,881 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12e9bf8d0>
2024-08-20 11:21:37,883 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:21:37,888 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bd8d0>
2024-08-20 11:21:37,899 - INFO - Created relationship from Extruder to 挤压机螺杆转速 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1f10>
2024-08-20 11:21:37,902 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机螺杆转速'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,906 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b3f50>
2024-08-20 11:21:37,908 - INFO - Created relationship from Extruder to 挤压机料位高低 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e4d50>
2024-08-20 11:21:37,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机料位高低'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,914 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5890>
2024-08-20 11:21:37,917 - INFO - Created relationship from Extruder to 挤压机出口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e78d0>
2024-08-20 11:21:37,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机出口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,924 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea46090>
2024-08-20 11:21:37,929 - INFO - Created relationship from Extruder to 挤压机夹套温度上 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e8c3150>
2024-08-20 11:21:37,932 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,937 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e913150>
2024-08-20 11:21:37,940 - INFO - Created relationship from Extruder to 挤压机夹套温度下 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e913710>
2024-08-20 11:21:37,944 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,950 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bad50>
2024-08-20 11:21:37,955 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e911d90>
2024-08-20 11:21:37,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,962 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e911a50>
2024-08-20 11:21:37,965 - INFO - Created relationship from Extruder to 挤压机压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5e90>
2024-08-20 11:21:37,969 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,974 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7090>
2024-08-20 11:21:37,982 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度1 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5390>
2024-08-20 11:21:37,986 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度1'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:37,990 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea45c50>
2024-08-20 11:21:37,994 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度2 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea46690>
2024-08-20 11:21:37,997 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度2'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,001 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b13d0>
2024-08-20 11:21:38,003 - INFO - Created relationship from Extruder to 挤压机夹套温度上（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b3590>
2024-08-20 11:21:38,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,009 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b3990>
2024-08-20 11:21:38,012 - INFO - Created relationship from Extruder to 挤压机夹套温度下（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bd690>
2024-08-20 11:21:38,013 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,017 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9aa410>
2024-08-20 11:21:38,022 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9ba090>
2024-08-20 11:21:38,023 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,028 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bae90>
2024-08-20 11:21:38,030 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b8390>
2024-08-20 11:21:38,034 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,038 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bd610>
2024-08-20 11:21:38,043 - INFO - Created relationship from Extruder to 挤压机入口温度_Max with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1fd0>
2024-08-20 11:21:38,046 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Max'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,050 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0a90>
2024-08-20 11:21:38,055 - INFO - Created relationship from Extruder to 挤压机入口温度_Min with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0d50>
2024-08-20 11:21:38,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Min'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,062 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9aa010>
2024-08-20 11:21:38,066 - INFO - Created relationship from Extruder to 挤压机入口温度_Avg with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7790>
2024-08-20 11:21:38,069 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Avg'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,074 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5510>
2024-08-20 11:21:38,079 - INFO - Created relationship from Rolling Powder to 表面粉下表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6c10>
2024-08-20 11:21:38,082 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,087 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c3590>
2024-08-20 11:21:38,093 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea45050>
2024-08-20 11:21:38,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,102 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e911b10>
2024-08-20 11:21:38,107 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9ac710>
2024-08-20 11:21:38,109 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,114 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea20090>
2024-08-20 11:21:38,119 - INFO - Created relationship from Rolling Powder to 表面粉上表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e4a47d0>
2024-08-20 11:21:38,122 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,128 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea45610>
2024-08-20 11:21:38,133 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e97b1d0>
2024-08-20 11:21:38,137 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,144 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7010>
2024-08-20 11:21:38,149 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5b10>
2024-08-20 11:21:38,153 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,159 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c1c10>
2024-08-20 11:21:38,164 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e911f90>
2024-08-20 11:21:38,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,173 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9ab3d0>
2024-08-20 11:21:38,178 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0610>
2024-08-20 11:21:38,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,187 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b06d0>
2024-08-20 11:21:38,192 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b16d0>
2024-08-20 11:21:38,196 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,203 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9be590>
2024-08-20 11:21:38,208 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea23950>
2024-08-20 11:21:38,210 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,216 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e94c4d0>
2024-08-20 11:21:38,219 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b2610>
2024-08-20 11:21:38,222 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,227 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1110>
2024-08-20 11:21:38,233 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮带（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9aa510>
2024-08-20 11:21:38,237 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮带（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,243 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bf850>
2024-08-20 11:21:38,247 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bb710>
2024-08-20 11:21:38,250 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,256 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c0d10>
2024-08-20 11:21:38,261 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e910c90>
2024-08-20 11:21:38,263 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,269 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5e10>
2024-08-20 11:21:38,274 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e72d0>
2024-08-20 11:21:38,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,284 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6c10>
2024-08-20 11:21:38,286 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea46dd0>
2024-08-20 11:21:38,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,296 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea23790>
2024-08-20 11:21:38,300 - INFO - Created relationship from Bull Roller to 大辊速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea205d0>
2024-08-20 11:21:38,302 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,307 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e911450>
2024-08-20 11:21:38,310 - INFO - Created relationship from Bull Roller to 大辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7010>
2024-08-20 11:21:38,314 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,319 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5490>
2024-08-20 11:21:38,324 - INFO - Created relationship from Bull Roller to 大辊速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9adf10>
2024-08-20 11:21:38,327 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,332 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c28d0>
2024-08-20 11:21:38,335 - INFO - Created relationship from Bull Roller to 大辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea458d0>
2024-08-20 11:21:38,339 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,346 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea46410>
2024-08-20 11:21:38,350 - INFO - Created relationship from 1st Roller to 1号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9ab3d0>
2024-08-20 11:21:38,354 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,359 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9a8f10>
2024-08-20 11:21:38,364 - INFO - Created relationship from 1st Roller to 1号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1750>
2024-08-20 11:21:38,368 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,374 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1890>
2024-08-20 11:21:38,379 - INFO - Created relationship from 1st Roller to 1号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bcbd0>
2024-08-20 11:21:38,381 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,387 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea23750>
2024-08-20 11:21:38,392 - INFO - Created relationship from 1st Roller to 1号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea212d0>
2024-08-20 11:21:38,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,402 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b9950>
2024-08-20 11:21:38,406 - INFO - Created relationship from 2nd Roller to 2号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bfd50>
2024-08-20 11:21:38,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,409 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b3c90>
2024-08-20 11:21:38,413 - INFO - Created relationship from 2nd Roller to 2号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0050>
2024-08-20 11:21:38,415 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,417 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c0cd0>
2024-08-20 11:21:38,422 - INFO - Created relationship from 2nd Roller to 2号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9aad50>
2024-08-20 11:21:38,425 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,426 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9a9950>
2024-08-20 11:21:38,431 - INFO - Created relationship from 2nd Roller to 2号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea45a50>
2024-08-20 11:21:38,434 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,435 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea46590>
2024-08-20 11:21:38,438 - INFO - Created relationship from 3rd Roller to 3号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7bd0>
2024-08-20 11:21:38,442 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,443 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e4a10>
2024-08-20 11:21:38,449 - INFO - Created relationship from 3rd Roller to 3号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea22110>
2024-08-20 11:21:38,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,454 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea22bd0>
2024-08-20 11:21:38,459 - INFO - Created relationship from 3rd Roller to 3号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea23710>
2024-08-20 11:21:38,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,462 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea46950>
2024-08-20 11:21:38,477 - INFO - Created relationship from 3rd Roller to 3号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e911c50>
2024-08-20 11:21:38,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,491 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e912bd0>
2024-08-20 11:21:38,496 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9aa990>
2024-08-20 11:21:38,500 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,501 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea22390>
2024-08-20 11:21:38,507 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea21750>
2024-08-20 11:21:38,509 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,511 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea203d0>
2024-08-20 11:21:38,515 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7b10>
2024-08-20 11:21:38,517 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,517 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6d90>
2024-08-20 11:21:38,523 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1d90>
2024-08-20 11:21:38,527 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,528 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b19d0>
2024-08-20 11:21:38,532 - INFO - Created relationship from Cooling Roller1 to 入口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bd290>
2024-08-20 11:21:38,536 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '入口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,537 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bc390>
2024-08-20 11:21:38,541 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e4471d0>
2024-08-20 11:21:38,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,546 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c2c50>
2024-08-20 11:21:38,552 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bfa10>
2024-08-20 11:21:38,555 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,556 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7d50>
2024-08-20 11:21:38,561 - INFO - Created relationship from Cooling Roller1 to Cooling Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6110>
2024-08-20 11:21:38,563 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: 'Cooling Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,564 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e4cd0>
2024-08-20 11:21:38,568 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea239d0>
2024-08-20 11:21:38,570 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,571 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea20a10>
2024-08-20 11:21:38,576 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9aab10>
2024-08-20 11:21:38,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,582 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b3ed0>
2024-08-20 11:21:38,586 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b38d0>
2024-08-20 11:21:38,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,589 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e910910>
2024-08-20 11:21:38,594 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea46650>
2024-08-20 11:21:38,596 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,597 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e95f790>
2024-08-20 11:21:38,603 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9a9090>
2024-08-20 11:21:38,607 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,608 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e910f10>
2024-08-20 11:21:38,613 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea47f90>
2024-08-20 11:21:38,615 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,617 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea20f50>
2024-08-20 11:21:38,623 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea20ad0>
2024-08-20 11:21:38,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,629 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea21850>
2024-08-20 11:21:38,633 - INFO - Created relationship from Cooling Roller1 to 1号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e50d0>
2024-08-20 11:21:38,637 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,638 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6c50>
2024-08-20 11:21:38,643 - INFO - Created relationship from Cooling Roller1 to 冷辊温度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bfc10>
2024-08-20 11:21:38,645 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊温度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,647 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c2c50>
2024-08-20 11:21:38,653 - INFO - Created relationship from Cooling Roller1 to 冷辊露点 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b1710>
2024-08-20 11:21:38,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊露点'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,658 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b3ad0>
2024-08-20 11:21:38,664 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e95e3d0>
2024-08-20 11:21:38,668 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,671 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e92e190>
2024-08-20 11:21:38,677 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bd810>
2024-08-20 11:21:38,681 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,684 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bd790>
2024-08-20 11:21:38,691 - INFO - Created relationship from Cooling Roller2 to 出口胶温度L with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6050>
2024-08-20 11:21:38,695 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度L'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,697 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e48d0>
2024-08-20 11:21:38,705 - INFO - Created relationship from Cooling Roller2 to 出口胶温度R with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e8c0c10>
2024-08-20 11:21:38,709 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度R'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,712 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e8c0750>
2024-08-20 11:21:38,720 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea201d0>
2024-08-20 11:21:38,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,728 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea23f10>
2024-08-20 11:21:38,734 - INFO - Created relationship from Cooling Roller2 to 2号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea448d0>
2024-08-20 11:21:38,738 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,740 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0a90>
2024-08-20 11:21:38,746 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0350>
2024-08-20 11:21:38,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,752 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e912bd0>
2024-08-20 11:21:38,758 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e92ca90>
2024-08-20 11:21:38,762 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,764 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e92e590>
2024-08-20 11:21:38,771 - INFO - Created relationship from Sheeting Machine to 切片产线速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e95f990>
2024-08-20 11:21:38,775 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片产线速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,776 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b03d0>
2024-08-20 11:21:38,797 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b2310>
2024-08-20 11:21:38,800 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,803 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b2410>
2024-08-20 11:21:38,810 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e6010>
2024-08-20 11:21:38,814 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,818 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e57d0>
2024-08-20 11:21:38,824 - INFO - Created relationship from SPC Weighter to 口香糖重量 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e482a90>
2024-08-20 11:21:38,828 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖重量'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,831 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea23c90>
2024-08-20 11:21:38,839 - INFO - Created relationship from SPC Weighter to 口香糖单片长度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea231d0>
2024-08-20 11:21:38,843 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片长度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,845 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea21490>
2024-08-20 11:21:38,851 - INFO - Created relationship from SPC Weighter to 口香糖单片宽度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9afcd0>
2024-08-20 11:21:38,855 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片宽度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,857 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9bdb50>
2024-08-20 11:21:38,863 - INFO - Created relationship from SPC Weighter to 口香糖单片深度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea45610>
2024-08-20 11:21:38,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片深度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,868 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea473d0>
2024-08-20 11:21:38,875 - INFO - Created relationship from SPC Weighter to 口香糖单片厚度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9bec90>
2024-08-20 11:21:38,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片厚度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,881 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9afd90>
2024-08-20 11:21:38,888 - INFO - Created relationship from SPC Weighter to 口香糖生产班次 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea44510>
2024-08-20 11:21:38,890 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖生产班次'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,892 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea21e10>
2024-08-20 11:21:38,897 - INFO - Created relationship from SPC Weighter to 口香糖香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea21790>
2024-08-20 11:21:38,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,902 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12ea23f10>
2024-08-20 11:21:38,908 - INFO - Created relationship from Sheeting Machine to 系统速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12ea21c90>
2024-08-20 11:21:38,912 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '系统速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,914 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e4190>
2024-08-20 11:21:38,918 - INFO - Created relationship from Mixer1 to Mixer1_配方名称 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e5e90>
2024-08-20 11:21:38,921 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方名称'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,922 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e77d0>
2024-08-20 11:21:38,928 - INFO - Created relationship from Mixer1 to Mixer1_配方代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b2d10>
2024-08-20 11:21:38,932 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,935 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b2910>
2024-08-20 11:21:38,943 - INFO - Created relationship from Sheeting Machine to 切片机运行状态 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9119d0>
2024-08-20 11:21:38,945 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机运行状态'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,947 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e910f50>
2024-08-20 11:21:38,953 - INFO - Created relationship from Sheeting Machine to 停机时间 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9e7450>
2024-08-20 11:21:38,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '停机时间'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,958 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9e50d0>
2024-08-20 11:21:38,964 - INFO - Created relationship from Sheeting Machine to 切片机状态代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e481490>
2024-08-20 11:21:38,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机状态代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:21:38,979 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0910>
2024-08-20 11:21:38,984 - INFO - Created relationship from Sheeting Machine to SKU香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x12e9b0b90>
2024-08-20 11:21:38,987 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: 'SKU香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:45,356 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1630b6990>
2024-08-20 11:27:45,363 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163103a90>
2024-08-20 11:27:45,367 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x162e41850>
2024-08-20 11:27:45,372 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x162eeba50>
2024-08-20 11:27:45,377 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,378 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1630b60d0>
2024-08-20 11:27:45,380 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,381 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163246510>
2024-08-20 11:27:45,381 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1632454d0>
2024-08-20 11:27:45,382 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1632443d0>
2024-08-20 11:27:45,382 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,384 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163243110>
2024-08-20 11:27:45,384 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,384 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x162d88d10>
2024-08-20 11:27:45,385 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163126010>
2024-08-20 11:27:45,386 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163245150>
2024-08-20 11:27:45,387 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,387 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245a90>
2024-08-20 11:27:45,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,388 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163246dd0>
2024-08-20 11:27:45,389 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x12ffd3050>
2024-08-20 11:27:45,390 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163223b50>
2024-08-20 11:27:45,391 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,391 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222b10>
2024-08-20 11:27:45,391 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,392 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163221a50>
2024-08-20 11:27:45,393 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163220090>
2024-08-20 11:27:45,399 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1632207d0>
2024-08-20 11:27:45,399 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,400 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bb0d0>
2024-08-20 11:27:45,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,401 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631b9e10>
2024-08-20 11:27:45,402 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631b8bd0>
2024-08-20 11:27:45,402 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1632207d0>
2024-08-20 11:27:45,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,403 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1632219d0>
2024-08-20 11:27:45,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,404 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163222f50>
2024-08-20 11:27:45,404 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163222950>
2024-08-20 11:27:45,405 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163223590>
2024-08-20 11:27:45,405 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,406 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163003d50>
2024-08-20 11:27:45,406 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,406 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163245b10>
2024-08-20 11:27:45,407 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163244990>
2024-08-20 11:27:45,408 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163244350>
2024-08-20 11:27:45,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,408 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x162e950d0>
2024-08-20 11:27:45,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,409 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631bad90>
2024-08-20 11:27:45,410 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631bb950>
2024-08-20 11:27:45,411 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1631b3d50>
2024-08-20 11:27:45,411 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,412 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:45,412 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,413 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x162e75fd0>
2024-08-20 11:27:45,417 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163245810>
2024-08-20 11:27:45,418 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163244ad0>
2024-08-20 11:27:45,420 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,423 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163244310>
2024-08-20 11:27:45,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,428 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631ba410>
2024-08-20 11:27:45,431 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631bbb90>
2024-08-20 11:27:45,432 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1631bb050>
2024-08-20 11:27:45,434 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,435 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bba10>
2024-08-20 11:27:45,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,439 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163223cd0>
2024-08-20 11:27:45,439 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163221d90>
2024-08-20 11:27:45,440 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163221050>
2024-08-20 11:27:45,440 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,441 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b2550>
2024-08-20 11:27:45,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,442 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631b1f10>
2024-08-20 11:27:45,442 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631b0c50>
2024-08-20 11:27:45,443 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163221850>
2024-08-20 11:27:45,443 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,444 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:45,444 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,445 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163223750>
2024-08-20 11:27:45,445 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163220990>
2024-08-20 11:27:45,446 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163221110>
2024-08-20 11:27:45,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,447 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ba450>
2024-08-20 11:27:45,447 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,448 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631b9210>
2024-08-20 11:27:45,449 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631ba150>
2024-08-20 11:27:45,450 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163246e90>
2024-08-20 11:27:45,450 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,450 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245a90>
2024-08-20 11:27:45,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,451 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163246690>
2024-08-20 11:27:45,452 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631b1250>
2024-08-20 11:27:45,452 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1631b3650>
2024-08-20 11:27:45,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,453 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311eb90>
2024-08-20 11:27:45,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,454 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1632443d0>
2024-08-20 11:27:45,455 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163245690>
2024-08-20 11:27:45,455 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163245450>
2024-08-20 11:27:45,456 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,456 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x162d824d0>
2024-08-20 11:27:45,456 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,457 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631baf10>
2024-08-20 11:27:45,457 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1631b9a10>
2024-08-20 11:27:45,460 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1631ba490>
2024-08-20 11:27:45,463 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,464 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b0350>
2024-08-20 11:27:45,464 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,465 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x1631b2110>
2024-08-20 11:27:45,465 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x1632229d0>
2024-08-20 11:27:45,467 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163223c10>
2024-08-20 11:27:45,467 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,470 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220890>
2024-08-20 11:27:45,470 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,471 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x16311f1d0>
2024-08-20 11:27:45,471 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x16311e310>
2024-08-20 11:27:45,472 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x163223e90>
2024-08-20 11:27:45,472 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,473 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223a10>
2024-08-20 11:27:45,473 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,474 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x163222810>
2024-08-20 11:27:45,474 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x163220650>
2024-08-20 11:27:45,475 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x1631b8090>
2024-08-20 11:27:45,475 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 11:27:45,476 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b9b50>
2024-08-20 11:27:45,476 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:45,477 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b9010>
2024-08-20 11:27:45,479 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b3e50>
2024-08-20 11:27:45,483 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1710>
2024-08-20 11:27:45,486 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12ffd2c10>
2024-08-20 11:27:45,489 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,490 - INFO - Created relationship from Extruder to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163244590>
2024-08-20 11:27:45,493 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,494 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632468d0>
2024-08-20 11:27:45,496 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311dc10>
2024-08-20 11:27:45,497 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311c9d0>
2024-08-20 11:27:45,501 - INFO - Created relationship from Sheeting Operator#1 to Rolling Powder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b1a10>
2024-08-20 11:27:45,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Rolling Powder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,505 - INFO - Created relationship from Rolling Powder to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b36d0>
2024-08-20 11:27:45,508 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,509 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163003d50>
2024-08-20 11:27:45,511 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1632441d0>
2024-08-20 11:27:45,512 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244c90>
2024-08-20 11:27:45,516 - INFO - Created relationship from Sheeting Operator#1 to Bull Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x10f97b810>
2024-08-20 11:27:45,519 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Bull Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,520 - INFO - Created relationship from Bull Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ba090>
2024-08-20 11:27:45,522 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,523 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b9510>
2024-08-20 11:27:45,523 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163223d50>
2024-08-20 11:27:45,524 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163221810>
2024-08-20 11:27:45,529 - INFO - Created relationship from Sheeting Operator#1 to 1st Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222450>
2024-08-20 11:27:45,534 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '1st Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,535 - INFO - Created relationship from 1st Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d950>
2024-08-20 11:27:45,537 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,538 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311ee50>
2024-08-20 11:27:45,539 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312f4d0>
2024-08-20 11:27:45,539 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222990>
2024-08-20 11:27:45,544 - INFO - Created relationship from Sheeting Operator#1 to 2nd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221490>
2024-08-20 11:27:45,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '2nd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,548 - INFO - Created relationship from 2nd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163223210>
2024-08-20 11:27:45,551 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,552 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221dd0>
2024-08-20 11:27:45,553 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b9e50>
2024-08-20 11:27:45,555 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bad90>
2024-08-20 11:27:45,559 - INFO - Created relationship from Sheeting Operator#1 to 3rd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb150>
2024-08-20 11:27:45,561 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '3rd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,563 - INFO - Created relationship from 3rd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163244a10>
2024-08-20 11:27:45,566 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,567 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244210>
2024-08-20 11:27:45,572 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311e810>
2024-08-20 11:27:45,573 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311dc10>
2024-08-20 11:27:45,576 - INFO - Created relationship from Sheeting Operator#1 to Forming Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2090>
2024-08-20 11:27:45,579 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Forming Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,581 - INFO - Created relationship from Forming Roller to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3cd0>
2024-08-20 11:27:45,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,586 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312e450>
2024-08-20 11:27:45,589 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311cb90>
2024-08-20 11:27:45,591 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311fb90>
2024-08-20 11:27:45,596 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b0350>
2024-08-20 11:27:45,600 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,602 - INFO - Created relationship from Cooling Roller1 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3c50>
2024-08-20 11:27:45,606 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,607 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8190>
2024-08-20 11:27:45,609 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631ba590>
2024-08-20 11:27:45,610 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b9ed0>
2024-08-20 11:27:45,615 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163247050>
2024-08-20 11:27:45,620 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,622 - INFO - Created relationship from Cooling Roller2 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163245fd0>
2024-08-20 11:27:45,626 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,627 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632209d0>
2024-08-20 11:27:45,631 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163221010>
2024-08-20 11:27:45,632 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220c50>
2024-08-20 11:27:45,638 - INFO - Created relationship from Sheeting Operator#1 to Scoring Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312ec50>
2024-08-20 11:27:45,641 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Scoring Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,643 - INFO - Created relationship from Scoring Roller to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312d4d0>
2024-08-20 11:27:45,645 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,646 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163246ed0>
2024-08-20 11:27:45,651 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163246510>
2024-08-20 11:27:45,654 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ba510>
2024-08-20 11:27:45,674 - INFO - Created relationship from Sheeting Operator#2 to SPC Weighter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b8150>
2024-08-20 11:27:45,678 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'SPC Weighter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,680 - INFO - Created relationship from SPC Weighter to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ba990>
2024-08-20 11:27:45,683 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,685 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222810>
2024-08-20 11:27:45,689 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163222910>
2024-08-20 11:27:45,690 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632214d0>
2024-08-20 11:27:45,695 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16308ab10>
2024-08-20 11:27:45,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,699 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3290>
2024-08-20 11:27:45,701 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,703 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311eb50>
2024-08-20 11:27:45,707 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312e8d0>
2024-08-20 11:27:45,713 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e510>
2024-08-20 11:27:45,721 - INFO - Created relationship from Pre-Process Operator to Xylitol Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631abbd0>
2024-08-20 11:27:45,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Xylitol Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,726 - INFO - Created relationship from Xylitol Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312c190>
2024-08-20 11:27:45,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Xylitol Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,733 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312e690>
2024-08-20 11:27:45,736 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311c190>
2024-08-20 11:27:45,738 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311ccd0>
2024-08-20 11:27:45,744 - INFO - Created relationship from Pre-Process Operator to Sugar Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3090>
2024-08-20 11:27:45,748 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Sugar Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,750 - INFO - Created relationship from Sugar Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b2e50>
2024-08-20 11:27:45,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,754 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223ed0>
2024-08-20 11:27:45,756 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163222890>
2024-08-20 11:27:45,758 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163221b90>
2024-08-20 11:27:45,764 - INFO - Created relationship from Pre-Process Operator to Dissolving Tank with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b8290>
2024-08-20 11:27:45,766 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Dissolving Tank'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,767 - INFO - Created relationship from Dissolving Tank to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b9c50>
2024-08-20 11:27:45,770 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dissolving Tank'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,772 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244850>
2024-08-20 11:27:45,777 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163244910>
2024-08-20 11:27:45,783 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aab50>
2024-08-20 11:27:45,788 - INFO - Created relationship from Mixing Operator to Flowmeter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b90d0>
2024-08-20 11:27:45,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Flowmeter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,794 - INFO - Created relationship from Flowmeter to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ba290>
2024-08-20 11:27:45,798 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Flowmeter'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,801 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163246410>
2024-08-20 11:27:45,803 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163245e10>
2024-08-20 11:27:45,804 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245110>
2024-08-20 11:27:45,809 - INFO - Created relationship from Mixing Operator to Jacket Warer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221490>
2024-08-20 11:27:45,811 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Jacket Warer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,813 - INFO - Created relationship from Jacket Warer to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163222910>
2024-08-20 11:27:45,817 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Jacket Warer'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,819 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223790>
2024-08-20 11:27:45,820 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b0610>
2024-08-20 11:27:45,822 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b17d0>
2024-08-20 11:27:45,826 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311f1d0>
2024-08-20 11:27:45,829 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,831 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312e550>
2024-08-20 11:27:45,835 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,836 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aa710>
2024-08-20 11:27:45,838 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631a9650>
2024-08-20 11:27:45,839 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244e10>
2024-08-20 11:27:45,845 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246190>
2024-08-20 11:27:45,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,850 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1632452d0>
2024-08-20 11:27:45,852 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,854 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312d990>
2024-08-20 11:27:45,856 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312f890>
2024-08-20 11:27:45,857 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312c490>
2024-08-20 11:27:45,862 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312fc90>
2024-08-20 11:27:45,866 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,867 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163169d90>
2024-08-20 11:27:45,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,872 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311de10>
2024-08-20 11:27:45,874 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311cfd0>
2024-08-20 11:27:45,875 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311f5d0>
2024-08-20 11:27:45,880 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3fd0>
2024-08-20 11:27:45,883 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,884 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3010>
2024-08-20 11:27:45,889 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,891 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b12d0>
2024-08-20 11:27:45,894 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x162d583d0>
2024-08-20 11:27:45,899 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311f610>
2024-08-20 11:27:45,905 - INFO - Created relationship from Management personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311d690>
2024-08-20 11:27:45,908 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Management personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,910 - INFO - Created relationship from nan to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d110>
2024-08-20 11:27:45,912 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,915 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1620df390>
2024-08-20 11:27:45,938 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312f790>
2024-08-20 11:27:45,940 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312ecd0>
2024-08-20 11:27:45,941 - INFO - Created relationship from Production personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c310>
2024-08-20 11:27:45,944 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Production personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,945 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163246e10>
2024-08-20 11:27:45,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,947 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163246650>
2024-08-20 11:27:45,948 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b1050>
2024-08-20 11:27:45,952 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b15d0>
2024-08-20 11:27:45,952 - INFO - Created relationship from Quality control personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2310>
2024-08-20 11:27:45,954 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Quality control personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,955 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163220710>
2024-08-20 11:27:45,955 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,956 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0b50>
2024-08-20 11:27:45,956 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b3790>
2024-08-20 11:27:45,961 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b07d0>
2024-08-20 11:27:45,961 - INFO - Created relationship from Research and development personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312e690>
2024-08-20 11:27:45,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Research and development personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,965 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312fcd0>
2024-08-20 11:27:45,965 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,966 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312c450>
2024-08-20 11:27:45,966 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312fc90>
2024-08-20 11:27:45,970 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244e50>
2024-08-20 11:27:45,972 - INFO - Created relationship from Logistics personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246050>
2024-08-20 11:27:45,976 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Logistics personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:45,977 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x162e75210>
2024-08-20 11:27:45,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:45,979 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311ced0>
2024-08-20 11:27:45,983 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311dbd0>
2024-08-20 11:27:45,988 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222e10>
2024-08-20 11:27:45,993 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223d90>
2024-08-20 11:27:45,996 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,011 - INFO - Created relationship from Sieve Shaker to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x162d66150>
2024-08-20 11:27:46,014 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,016 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244890>
2024-08-20 11:27:46,017 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1632476d0>
2024-08-20 11:27:46,024 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x162d35410>
2024-08-20 11:27:46,041 - INFO - Created relationship from Raw Material Operator to Elevator with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311f9d0>
2024-08-20 11:27:46,045 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Elevator'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,055 - INFO - Created relationship from Elevator to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d9d0>
2024-08-20 11:27:46,059 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Elevator'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,060 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f310>
2024-08-20 11:27:46,066 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312da50>
2024-08-20 11:27:46,072 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312d690>
2024-08-20 11:27:46,086 - INFO - Created relationship from Raw Material Operator to 1#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312ed90>
2024-08-20 11:27:46,089 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '1#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,097 - INFO - Created relationship from 1#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3b90>
2024-08-20 11:27:46,101 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,103 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0e90>
2024-08-20 11:27:46,104 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163221e50>
2024-08-20 11:27:46,111 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163221650>
2024-08-20 11:27:46,138 - INFO - Created relationship from Raw Material Operator to 2#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d2d0>
2024-08-20 11:27:46,140 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '2#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,143 - INFO - Created relationship from 2#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312cc10>
2024-08-20 11:27:46,146 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,147 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f910>
2024-08-20 11:27:46,147 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x162d43f90>
2024-08-20 11:27:46,149 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b21d0>
2024-08-20 11:27:46,166 - INFO - Created relationship from Raw Material Operator to 3#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2710>
2024-08-20 11:27:46,169 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '3#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,173 - INFO - Created relationship from 3#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d110>
2024-08-20 11:27:46,175 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,176 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311ed90>
2024-08-20 11:27:46,176 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311e010>
2024-08-20 11:27:46,178 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632457d0>
2024-08-20 11:27:46,187 - INFO - Created relationship from Raw Material Operator to Sugar Grinder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632466d0>
2024-08-20 11:27:46,190 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grinder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,196 - INFO - Created relationship from Sugar Grinder to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163221d10>
2024-08-20 11:27:46,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinder'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,201 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223610>
2024-08-20 11:27:46,203 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163220590>
2024-08-20 11:27:46,207 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245810>
2024-08-20 11:27:46,217 - INFO - Created relationship from Raw Material Operator to Sugar Grind Blower with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632460d0>
2024-08-20 11:27:46,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grind Blower'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,225 - INFO - Created relationship from Sugar Grind Blower to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163246e50>
2024-08-20 11:27:46,228 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grind Blower'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,230 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e010>
2024-08-20 11:27:46,230 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311c990>
2024-08-20 11:27:46,234 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311e790>
2024-08-20 11:27:46,242 - INFO - Created relationship from Raw Material Operator to Sugar Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b22d0>
2024-08-20 11:27:46,245 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,250 - INFO - Created relationship from Sugar Sieve Shaker to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3390>
2024-08-20 11:27:46,253 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Sieve Shaker'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,255 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312e8d0>
2024-08-20 11:27:46,256 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312d490>
2024-08-20 11:27:46,259 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fd10>
2024-08-20 11:27:46,268 - INFO - Created relationship from Raw Material Operator to Sugar Unloader with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223710>
2024-08-20 11:27:46,271 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Unloader'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,277 - INFO - Created relationship from Sugar Unloader to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163220c90>
2024-08-20 11:27:46,279 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Unloader'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,281 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8d90>
2024-08-20 11:27:46,293 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312e090>
2024-08-20 11:27:46,298 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312cc10>
2024-08-20 11:27:46,299 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d590>
2024-08-20 11:27:46,299 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,300 - INFO - Created relationship from Sieve Shaker to 胶基 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163222890>
2024-08-20 11:27:46,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '胶基'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,304 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223610>
2024-08-20 11:27:46,308 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163220490>
2024-08-20 11:27:46,309 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311dc90>
2024-08-20 11:27:46,310 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311eb10>
2024-08-20 11:27:46,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,312 - INFO - Created relationship from Sieve Shaker to 山梨醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311cfd0>
2024-08-20 11:27:46,314 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '山梨醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,315 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b2110>
2024-08-20 11:27:46,320 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b0fd0>
2024-08-20 11:27:46,321 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245890>
2024-08-20 11:27:46,322 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163245b10>
2024-08-20 11:27:46,322 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,324 - INFO - Created relationship from Sieve Shaker to 木糖醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ba410>
2024-08-20 11:27:46,326 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '木糖醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,327 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1590>
2024-08-20 11:27:46,331 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b3590>
2024-08-20 11:27:46,332 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311dfd0>
2024-08-20 11:27:46,333 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311ef90>
2024-08-20 11:27:46,334 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,335 - INFO - Created relationship from Sieve Shaker to 表面粉 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311f650>
2024-08-20 11:27:46,338 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '表面粉'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,340 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e290>
2024-08-20 11:27:46,344 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163245e90>
2024-08-20 11:27:46,345 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245150>
2024-08-20 11:27:46,347 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220490>
2024-08-20 11:27:46,347 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,349 - INFO - Created relationship from Sieve Shaker to 香精 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163220ad0>
2024-08-20 11:27:46,353 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '香精'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,354 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312fc50>
2024-08-20 11:27:46,355 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312c5d0>
2024-08-20 11:27:46,357 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bbc90>
2024-08-20 11:27:46,358 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9410>
2024-08-20 11:27:46,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,360 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163222310>
2024-08-20 11:27:46,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,362 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221510>
2024-08-20 11:27:46,363 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1632452d0>
2024-08-20 11:27:46,365 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163246850>
2024-08-20 11:27:46,366 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163244dd0>
2024-08-20 11:27:46,367 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,368 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312cbd0>
2024-08-20 11:27:46,368 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,370 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f090>
2024-08-20 11:27:46,371 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312ec50>
2024-08-20 11:27:46,372 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311f410>
2024-08-20 11:27:46,374 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311c9d0>
2024-08-20 11:27:46,374 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,375 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311fe90>
2024-08-20 11:27:46,375 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,377 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b3cd0>
2024-08-20 11:27:46,378 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631bafd0>
2024-08-20 11:27:46,380 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bbd10>
2024-08-20 11:27:46,382 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b09d0>
2024-08-20 11:27:46,383 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,384 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b1b90>
2024-08-20 11:27:46,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,387 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f290>
2024-08-20 11:27:46,388 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311fe10>
2024-08-20 11:27:46,390 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311e790>
2024-08-20 11:27:46,395 - INFO - Created relationship from Mixing Operator to Mixer Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246450>
2024-08-20 11:27:46,397 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,399 - INFO - Created relationship from Mixer Dusting Machine to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163245090>
2024-08-20 11:27:46,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer Dusting Machine'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,405 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f110>
2024-08-20 11:27:46,407 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312f890>
2024-08-20 11:27:46,408 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312c190>
2024-08-20 11:27:46,413 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220f50>
2024-08-20 11:27:46,418 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,421 - INFO - Created relationship from Model Temperature Controller 1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b87d0>
2024-08-20 11:27:46,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,425 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bba90>
2024-08-20 11:27:46,427 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631a9cd0>
2024-08-20 11:27:46,428 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fe50>
2024-08-20 11:27:46,432 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312e290>
2024-08-20 11:27:46,435 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,436 - INFO - Created relationship from Model Temperature Controller 2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312d2d0>
2024-08-20 11:27:46,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,439 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632238d0>
2024-08-20 11:27:46,440 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163220550>
2024-08-20 11:27:46,440 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245090>
2024-08-20 11:27:46,444 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246e10>
2024-08-20 11:27:46,447 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,448 - INFO - Created relationship from Model Temperature Controller 3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d810>
2024-08-20 11:27:46,450 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,451 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311c4d0>
2024-08-20 11:27:46,452 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311fb50>
2024-08-20 11:27:46,453 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8050>
2024-08-20 11:27:46,457 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3790>
2024-08-20 11:27:46,460 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,461 - INFO - Created relationship from Model Temperature Controller 4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631a9a10>
2024-08-20 11:27:46,463 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,465 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aaf50>
2024-08-20 11:27:46,465 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b86d0>
2024-08-20 11:27:46,466 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631baa90>
2024-08-20 11:27:46,467 - INFO - Created relationship from Sheeting Operator#1 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311fb50>
2024-08-20 11:27:46,470 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,471 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d950>
2024-08-20 11:27:46,471 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,472 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311c050>
2024-08-20 11:27:46,472 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b22d0>
2024-08-20 11:27:46,473 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b0490>
2024-08-20 11:27:46,474 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220ad0>
2024-08-20 11:27:46,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,474 - INFO - Created relationship from Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163244050>
2024-08-20 11:27:46,476 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,476 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163245110>
2024-08-20 11:27:46,477 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312db50>
2024-08-20 11:27:46,478 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f110>
2024-08-20 11:27:46,482 - INFO - Created relationship from Sheeting Operator#1 to Triam Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aad10>
2024-08-20 11:27:46,485 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Triam Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,491 - INFO - Created relationship from Triam Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631a8310>
2024-08-20 11:27:46,506 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Triam Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,511 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8890>
2024-08-20 11:27:46,511 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631bb150>
2024-08-20 11:27:46,512 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b90d0>
2024-08-20 11:27:46,516 - INFO - Created relationship from Sheeting Operator#2 to Dehumidifer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b82d0>
2024-08-20 11:27:46,519 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Dehumidifer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,520 - INFO - Created relationship from Dehumidifer to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163245e90>
2024-08-20 11:27:46,524 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dehumidifer'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,525 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163246050>
2024-08-20 11:27:46,526 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163244590>
2024-08-20 11:27:46,526 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311e750>
2024-08-20 11:27:46,531 - INFO - Created relationship from Sheeting Operator#2 to Refrigerating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311cd10>
2024-08-20 11:27:46,533 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Refrigerating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,534 - INFO - Created relationship from Refrigerating Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311cfd0>
2024-08-20 11:27:46,536 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Refrigerating Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,537 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312ddd0>
2024-08-20 11:27:46,538 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312c8d0>
2024-08-20 11:27:46,538 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fcd0>
2024-08-20 11:27:46,542 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x162e76550>
2024-08-20 11:27:46,547 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,548 - INFO - Created relationship from Sheeting Dusting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312dcd0>
2024-08-20 11:27:46,551 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Dusting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,553 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312fb50>
2024-08-20 11:27:46,554 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312dc10>
2024-08-20 11:27:46,554 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f090>
2024-08-20 11:27:46,559 - INFO - Created relationship from Sheeting Operator#1 to First Floor Air Conditioner with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311c350>
2024-08-20 11:27:46,562 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'First Floor Air Conditioner'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,563 - INFO - Created relationship from First Floor Air Conditioner to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311fe90>
2024-08-20 11:27:46,567 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'First Floor Air Conditioner'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,569 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f950>
2024-08-20 11:27:46,574 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163244b90>
2024-08-20 11:27:46,578 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632460d0>
2024-08-20 11:27:46,585 - INFO - Created relationship from 小包装操作员 to Wax Pool with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246fd0>
2024-08-20 11:27:46,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Wax Pool'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,589 - INFO - Created relationship from Wax Pool to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631bb390>
2024-08-20 11:27:46,591 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Wax Pool'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,592 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bb4d0>
2024-08-20 11:27:46,593 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163220d90>
2024-08-20 11:27:46,595 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223350>
2024-08-20 11:27:46,599 - INFO - Created relationship from 小包装操作员 to Hot Melt Adhesive with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163247cd0>
2024-08-20 11:27:46,603 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Hot Melt Adhesive'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,605 - INFO - Created relationship from Hot Melt Adhesive to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163245290>
2024-08-20 11:27:46,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Hot Melt Adhesive'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,610 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163247e90>
2024-08-20 11:27:46,611 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631bbd10>
2024-08-20 11:27:46,612 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8790>
2024-08-20 11:27:46,615 - INFO - Created relationship from 小包装操作员 to 1#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba750>
2024-08-20 11:27:46,618 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,619 - INFO - Created relationship from 1#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311e9d0>
2024-08-20 11:27:46,621 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,622 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e610>
2024-08-20 11:27:46,623 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311d4d0>
2024-08-20 11:27:46,624 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312de50>
2024-08-20 11:27:46,628 - INFO - Created relationship from 小包装操作员 to 2#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d150>
2024-08-20 11:27:46,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,633 - INFO - Created relationship from 2#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312ecd0>
2024-08-20 11:27:46,636 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,638 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222910>
2024-08-20 11:27:46,639 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163223210>
2024-08-20 11:27:46,640 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e0d0>
2024-08-20 11:27:46,644 - INFO - Created relationship from 小包装操作员 to 3#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c7d0>
2024-08-20 11:27:46,647 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,657 - INFO - Created relationship from 3#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312f410>
2024-08-20 11:27:46,660 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,662 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e010>
2024-08-20 11:27:46,663 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311ee90>
2024-08-20 11:27:46,667 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311ced0>
2024-08-20 11:27:46,675 - INFO - Created relationship from 小包装操作员 to 4#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311edd0>
2024-08-20 11:27:46,679 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,685 - INFO - Created relationship from 4#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631bbe10>
2024-08-20 11:27:46,687 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,689 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631baed0>
2024-08-20 11:27:46,690 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163246ad0>
2024-08-20 11:27:46,694 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632452d0>
2024-08-20 11:27:46,703 - INFO - Created relationship from 小包装操作员 to 5#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221090>
2024-08-20 11:27:46,706 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,712 - INFO - Created relationship from 5#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163222050>
2024-08-20 11:27:46,715 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,717 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221310>
2024-08-20 11:27:46,718 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163245450>
2024-08-20 11:27:46,721 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244550>
2024-08-20 11:27:46,730 - INFO - Created relationship from 小包装操作员 to 6#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163244750>
2024-08-20 11:27:46,732 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,738 - INFO - Created relationship from 6#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311e510>
2024-08-20 11:27:46,741 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,743 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f5d0>
2024-08-20 11:27:46,744 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311d390>
2024-08-20 11:27:46,746 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bbcd0>
2024-08-20 11:27:46,756 - INFO - Created relationship from 小包装操作员 to 7#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9c10>
2024-08-20 11:27:46,758 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,763 - INFO - Created relationship from 7#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b9a90>
2024-08-20 11:27:46,766 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,768 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312ce50>
2024-08-20 11:27:46,769 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312f590>
2024-08-20 11:27:46,773 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632218d0>
2024-08-20 11:27:46,780 - INFO - Created relationship from 小包装操作员 to 8#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222310>
2024-08-20 11:27:46,783 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,789 - INFO - Created relationship from 8#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163222610>
2024-08-20 11:27:46,791 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,792 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632217d0>
2024-08-20 11:27:46,793 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163222090>
2024-08-20 11:27:46,796 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632211d0>
2024-08-20 11:27:46,804 - INFO - Created relationship from 小包装操作员 to 9#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bbd90>
2024-08-20 11:27:46,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,811 - INFO - Created relationship from 9#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631bb2d0>
2024-08-20 11:27:46,814 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,816 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b99d0>
2024-08-20 11:27:46,818 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312de50>
2024-08-20 11:27:46,843 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f310>
2024-08-20 11:27:46,847 - INFO - Created relationship from 小包装操作员 to 10#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312e610>
2024-08-20 11:27:46,850 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,851 - INFO - Created relationship from 10#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311e010>
2024-08-20 11:27:46,854 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,855 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e490>
2024-08-20 11:27:46,855 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163246c90>
2024-08-20 11:27:46,856 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244510>
2024-08-20 11:27:46,860 - INFO - Created relationship from 小包装操作员 to 11#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b0fd0>
2024-08-20 11:27:46,863 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '11#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,864 - INFO - Created relationship from 11#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311ee10>
2024-08-20 11:27:46,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '11#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,868 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e410>
2024-08-20 11:27:46,868 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311eb90>
2024-08-20 11:27:46,869 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312dad0>
2024-08-20 11:27:46,872 - INFO - Created relationship from 小包装操作员 to 12#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312ec90>
2024-08-20 11:27:46,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '12#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,876 - INFO - Created relationship from 12#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312d2d0>
2024-08-20 11:27:46,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '12#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,881 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163245410>
2024-08-20 11:27:46,883 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163245010>
2024-08-20 11:27:46,884 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bba10>
2024-08-20 11:27:46,889 - INFO - Created relationship from 小包装操作员 to 1#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba110>
2024-08-20 11:27:46,893 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,895 - INFO - Created relationship from 1#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1632201d0>
2024-08-20 11:27:46,898 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,900 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632229d0>
2024-08-20 11:27:46,902 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b3690>
2024-08-20 11:27:46,904 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b15d0>
2024-08-20 11:27:46,909 - INFO - Created relationship from 小包装操作员 to 2#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba110>
2024-08-20 11:27:46,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,916 - INFO - Created relationship from 2#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631badd0>
2024-08-20 11:27:46,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,922 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12fffb850>
2024-08-20 11:27:46,923 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163245a50>
2024-08-20 11:27:46,924 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245990>
2024-08-20 11:27:46,928 - INFO - Created relationship from 小包装操作员 to 3#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632220d0>
2024-08-20 11:27:46,932 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,933 - INFO - Created relationship from 3#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163223f50>
2024-08-20 11:27:46,936 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,937 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312c490>
2024-08-20 11:27:46,939 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16312d710>
2024-08-20 11:27:46,940 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e790>
2024-08-20 11:27:46,945 - INFO - Created relationship from 小包装操作员 to 4#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311c190>
2024-08-20 11:27:46,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,948 - INFO - Created relationship from 4#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311fb90>
2024-08-20 11:27:46,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,953 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1e90>
2024-08-20 11:27:46,955 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b1c50>
2024-08-20 11:27:46,956 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312cd90>
2024-08-20 11:27:46,962 - INFO - Created relationship from 小包装操作员 to 5#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312fad0>
2024-08-20 11:27:46,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,965 - INFO - Created relationship from 5#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312dc90>
2024-08-20 11:27:46,970 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,971 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311fad0>
2024-08-20 11:27:46,972 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311de90>
2024-08-20 11:27:46,973 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311f1d0>
2024-08-20 11:27:46,977 - INFO - Created relationship from 小包装操作员 to 6#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163245b50>
2024-08-20 11:27:46,981 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:46,982 - INFO - Created relationship from 6#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1632452d0>
2024-08-20 11:27:46,986 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:46,987 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632220d0>
2024-08-20 11:27:46,989 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631bb190>
2024-08-20 11:27:46,991 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8e10>
2024-08-20 11:27:46,999 - INFO - Created relationship from 小包装操作员 to 7#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x162e97110>
2024-08-20 11:27:47,002 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,004 - INFO - Created relationship from 7#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3150>
2024-08-20 11:27:47,009 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,011 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631a8e10>
2024-08-20 11:27:47,013 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b8d10>
2024-08-20 11:27:47,015 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8fd0>
2024-08-20 11:27:47,020 - INFO - Created relationship from 小包装操作员 to 8#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9190>
2024-08-20 11:27:47,024 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,026 - INFO - Created relationship from 8#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163244550>
2024-08-20 11:27:47,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,030 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1a10>
2024-08-20 11:27:47,032 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b1010>
2024-08-20 11:27:47,034 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1950>
2024-08-20 11:27:47,040 - INFO - Created relationship from 小包装操作员 to 9#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311de90>
2024-08-20 11:27:47,044 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,047 - INFO - Created relationship from 9#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311cd50>
2024-08-20 11:27:47,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,051 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632237d0>
2024-08-20 11:27:47,053 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163220250>
2024-08-20 11:27:47,055 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e7d0>
2024-08-20 11:27:47,062 - INFO - Created relationship from 小包装操作员 to 10#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d210>
2024-08-20 11:27:47,066 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,069 - INFO - Created relationship from 10#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631aa810>
2024-08-20 11:27:47,073 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,074 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632233d0>
2024-08-20 11:27:47,075 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1632227d0>
2024-08-20 11:27:47,084 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311d690>
2024-08-20 11:27:47,099 - INFO - Created relationship from 小包装操作员 to PKG Dusting  Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311eb50>
2024-08-20 11:27:47,104 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'PKG Dusting  Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,114 - INFO - Created relationship from PKG Dusting  Machine to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311cb50>
2024-08-20 11:27:47,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'PKG Dusting  Machine'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,118 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1fd0>
2024-08-20 11:27:47,124 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b1f10>
2024-08-20 11:27:47,134 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e590>
2024-08-20 11:27:47,146 - INFO - Created relationship from 大包装操作员 to 1#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d0d0>
2024-08-20 11:27:47,148 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,159 - INFO - Created relationship from 1#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163245150>
2024-08-20 11:27:47,163 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,164 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163245850>
2024-08-20 11:27:47,165 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631bb790>
2024-08-20 11:27:47,170 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ab410>
2024-08-20 11:27:47,180 - INFO - Created relationship from 大包装操作员 to 2#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aa490>
2024-08-20 11:27:47,184 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,194 - INFO - Created relationship from 2#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ab950>
2024-08-20 11:27:47,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,199 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244ed0>
2024-08-20 11:27:47,201 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163244890>
2024-08-20 11:27:47,205 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fc90>
2024-08-20 11:27:47,217 - INFO - Created relationship from 大包装操作员 to 3#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d110>
2024-08-20 11:27:47,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,242 - INFO - Created relationship from 3#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b0b10>
2024-08-20 11:27:47,243 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,243 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b2110>
2024-08-20 11:27:47,243 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b8290>
2024-08-20 11:27:47,247 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bbb90>
2024-08-20 11:27:47,254 - INFO - Created relationship from 大包装操作员 to 4#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311f110>
2024-08-20 11:27:47,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,264 - INFO - Created relationship from 4#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311f7d0>
2024-08-20 11:27:47,267 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,268 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632219d0>
2024-08-20 11:27:47,268 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163222210>
2024-08-20 11:27:47,272 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315d3d0>
2024-08-20 11:27:47,279 - INFO - Created relationship from 大包装操作员 to 3705Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631abc90>
2024-08-20 11:27:47,281 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3705Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,282 - INFO - Created relationship from 3705Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631abcd0>
2024-08-20 11:27:47,284 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3705Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,285 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b2a10>
2024-08-20 11:27:47,285 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b2a50>
2024-08-20 11:27:47,286 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3750>
2024-08-20 11:27:47,291 - INFO - Created relationship from 大包装操作员 to 3701Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b04d0>
2024-08-20 11:27:47,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3701Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,295 - INFO - Created relationship from 3701Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1630b60d0>
2024-08-20 11:27:47,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3701Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,298 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bba10>
2024-08-20 11:27:47,299 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b9710>
2024-08-20 11:27:47,300 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ba350>
2024-08-20 11:27:47,304 - INFO - Created relationship from 大包装操作员 to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311e610>
2024-08-20 11:27:47,307 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,309 - INFO - Created relationship from CP28 to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311f750>
2024-08-20 11:27:47,312 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'CP28'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,313 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311d650>
2024-08-20 11:27:47,315 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1632448d0>
2024-08-20 11:27:47,317 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311d950>
2024-08-20 11:27:47,322 - INFO - Created relationship from 大包装操作员 to 1# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311e650>
2024-08-20 11:27:47,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,325 - INFO - Created relationship from 1# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d310>
2024-08-20 11:27:47,328 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,330 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8a50>
2024-08-20 11:27:47,331 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b8790>
2024-08-20 11:27:47,332 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8c90>
2024-08-20 11:27:47,336 - INFO - Created relationship from 大包装操作员 to 2# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9c10>
2024-08-20 11:27:47,339 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,341 - INFO - Created relationship from 2# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b1350>
2024-08-20 11:27:47,344 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,345 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b2750>
2024-08-20 11:27:47,346 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b2f90>
2024-08-20 11:27:47,347 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aba10>
2024-08-20 11:27:47,350 - INFO - Created relationship from 大包装操作员 to 3# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631a9ed0>
2024-08-20 11:27:47,352 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,353 - INFO - Created relationship from 3# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163246e90>
2024-08-20 11:27:47,355 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,356 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244650>
2024-08-20 11:27:47,356 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631ab550>
2024-08-20 11:27:47,357 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ab5d0>
2024-08-20 11:27:47,361 - INFO - Created relationship from 大包装操作员 to 4# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631abe10>
2024-08-20 11:27:47,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,366 - INFO - Created relationship from 4# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ba050>
2024-08-20 11:27:47,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,373 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bbdd0>
2024-08-20 11:27:47,374 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b8fd0>
2024-08-20 11:27:47,376 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163246990>
2024-08-20 11:27:47,381 - INFO - Created relationship from 大包装操作员 to 5# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3090>
2024-08-20 11:27:47,383 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,384 - INFO - Created relationship from 5# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3150>
2024-08-20 11:27:47,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,390 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b3cd0>
2024-08-20 11:27:47,392 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311c810>
2024-08-20 11:27:47,393 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311ecd0>
2024-08-20 11:27:47,398 - INFO - Created relationship from 大包装操作员 to 1#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311c050>
2024-08-20 11:27:47,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,405 - INFO - Created relationship from 1#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163223f10>
2024-08-20 11:27:47,407 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,409 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1a90>
2024-08-20 11:27:47,410 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b3d10>
2024-08-20 11:27:47,411 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3490>
2024-08-20 11:27:47,416 - INFO - Created relationship from 大包装操作员 to 2#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3d50>
2024-08-20 11:27:47,418 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,419 - INFO - Created relationship from 2#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163244e10>
2024-08-20 11:27:47,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,440 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311c550>
2024-08-20 11:27:47,441 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x16311c150>
2024-08-20 11:27:47,441 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311e0d0>
2024-08-20 11:27:47,444 - INFO - Created relationship from 大包装操作员 to 3#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb1d0>
2024-08-20 11:27:47,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,447 - INFO - Created relationship from 3#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b94d0>
2024-08-20 11:27:47,450 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,451 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b9c10>
2024-08-20 11:27:47,453 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631a8cd0>
2024-08-20 11:27:47,453 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220a10>
2024-08-20 11:27:47,458 - INFO - Created relationship from 大包装操作员 to 4#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221f10>
2024-08-20 11:27:47,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,462 - INFO - Created relationship from 4#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b8450>
2024-08-20 11:27:47,464 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,466 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bbb10>
2024-08-20 11:27:47,467 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631bad50>
2024-08-20 11:27:47,468 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311fb50>
2024-08-20 11:27:47,475 - INFO - Created relationship from 大包装操作员 to 5#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311f790>
2024-08-20 11:27:47,479 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,480 - INFO - Created relationship from 5#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311e250>
2024-08-20 11:27:47,484 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,486 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631a9e10>
2024-08-20 11:27:47,487 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631ab050>
2024-08-20 11:27:47,489 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245610>
2024-08-20 11:27:47,496 - INFO - Created relationship from 大包装操作员 to 6#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2b50>
2024-08-20 11:27:47,500 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '6#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,502 - INFO - Created relationship from 6#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b1790>
2024-08-20 11:27:47,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,506 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b3ed0>
2024-08-20 11:27:47,509 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163223a10>
2024-08-20 11:27:47,512 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222790>
2024-08-20 11:27:47,517 - INFO - Created relationship from 大包装操作员 to 7#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246250>
2024-08-20 11:27:47,519 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '7#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,521 - INFO - Created relationship from 7#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b0110>
2024-08-20 11:27:47,526 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,528 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b3590>
2024-08-20 11:27:47,530 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631b1e10>
2024-08-20 11:27:47,532 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311e790>
2024-08-20 11:27:47,537 - INFO - Created relationship from 大包装操作员 to 8#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311f510>
2024-08-20 11:27:47,542 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '8#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,544 - INFO - Created relationship from 8#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311cb10>
2024-08-20 11:27:47,547 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,549 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aa350>
2024-08-20 11:27:47,551 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x1631a9f10>
2024-08-20 11:27:47,561 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b86d0>
2024-08-20 11:27:47,577 - INFO - Created relationship from 大包装操作员 to 9#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba890>
2024-08-20 11:27:47,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '9#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,593 - INFO - Created relationship from 9#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:47,598 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,600 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222810>
2024-08-20 11:27:47,602 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x163221a50>
2024-08-20 11:27:47,612 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ab5d0>
2024-08-20 11:27:47,626 - INFO - Created relationship from 大包装操作员 to 10#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631abe10>
2024-08-20 11:27:47,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '10#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:47,634 - INFO - Created relationship from 10#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631baf50>
2024-08-20 11:27:47,636 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,638 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631b82d0>
2024-08-20 11:27:47,644 - INFO - Created relationship from Room Temperature to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311ee90>
2024-08-20 11:27:47,648 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,649 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16311e650>
2024-08-20 11:27:47,650 - INFO - Created relationship from Room Temperature to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311e910>
2024-08-20 11:27:47,653 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,655 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631b1c90>
2024-08-20 11:27:47,656 - INFO - Created relationship from Room Temperature to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b2090>
2024-08-20 11:27:47,659 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,660 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x163220190>
2024-08-20 11:27:47,661 - INFO - Created relationship from Room Temperature to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163221650>
2024-08-20 11:27:47,664 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,665 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x163220cd0>
2024-08-20 11:27:47,666 - INFO - Created relationship from Room Temperature to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163246e90>
2024-08-20 11:27:47,668 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,669 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16312d150>
2024-08-20 11:27:47,670 - INFO - Created relationship from Room Temperature to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x162eece10>
2024-08-20 11:27:47,673 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,675 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631b3350>
2024-08-20 11:27:47,677 - INFO - Created relationship from Room Temperature to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b0b10>
2024-08-20 11:27:47,680 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,682 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x163245b10>
2024-08-20 11:27:47,683 - INFO - Created relationship from Room Temperature to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1632464d0>
2024-08-20 11:27:47,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,686 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x163223710>
2024-08-20 11:27:47,688 - INFO - Created relationship from Room Temperature to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163220b10>
2024-08-20 11:27:47,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,693 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16311f0d0>
2024-08-20 11:27:47,696 - INFO - Created relationship from Humidity to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311eb50>
2024-08-20 11:27:47,700 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,701 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16311d850>
2024-08-20 11:27:47,703 - INFO - Created relationship from Humidity to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631bac50>
2024-08-20 11:27:47,704 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,706 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631b8190>
2024-08-20 11:27:47,707 - INFO - Created relationship from Humidity to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631aacd0>
2024-08-20 11:27:47,709 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,711 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16312e510>
2024-08-20 11:27:47,712 - INFO - Created relationship from Humidity to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d0d0>
2024-08-20 11:27:47,716 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,717 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16311c550>
2024-08-20 11:27:47,718 - INFO - Created relationship from Humidity to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311cc50>
2024-08-20 11:27:47,721 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,722 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631b9390>
2024-08-20 11:27:47,723 - INFO - Created relationship from Humidity to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631bb710>
2024-08-20 11:27:47,740 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,742 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631ab650>
2024-08-20 11:27:47,743 - INFO - Created relationship from Humidity to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631aba50>
2024-08-20 11:27:47,746 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,747 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x163244710>
2024-08-20 11:27:47,748 - INFO - Created relationship from Humidity to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1632229d0>
2024-08-20 11:27:47,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,752 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1632232d0>
2024-08-20 11:27:47,753 - INFO - Created relationship from Humidity to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b20d0>
2024-08-20 11:27:47,756 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,757 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x1631b3290>
2024-08-20 11:27:47,760 - INFO - Created relationship from Logistics Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x12ffd2c10>
2024-08-20 11:27:47,763 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Logistics Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,765 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x16312de10>
2024-08-20 11:27:47,768 - INFO - Created relationship from Warehouse Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163221c50>
2024-08-20 11:27:47,770 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Warehouse Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,772 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x163221390>
2024-08-20 11:27:47,780 - INFO - Created relationship from Xylitol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163221310>
2024-08-20 11:27:47,784 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,788 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x163246450>
2024-08-20 11:27:47,794 - INFO - Created relationship from Sugar Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3210>
2024-08-20 11:27:47,796 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sugar Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,799 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631b1e10>
2024-08-20 11:27:47,805 - INFO - Created relationship from Acid Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b3690>
2024-08-20 11:27:47,809 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Acid Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,811 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631a9cd0>
2024-08-20 11:27:47,818 - INFO - Created relationship from Cooling Agent to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b8e90>
2024-08-20 11:27:47,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Cooling Agent'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,822 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631b9850>
2024-08-20 11:27:47,828 - INFO - Created relationship from Menthol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d510>
2024-08-20 11:27:47,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Menthol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,833 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16311ed90>
2024-08-20 11:27:47,840 - INFO - Created relationship from Pigment to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312c790>
2024-08-20 11:27:47,844 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Pigment'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,847 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16312ff10>
2024-08-20 11:27:47,852 - INFO - Created relationship from Glucose to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631bb890>
2024-08-20 11:27:47,856 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glucose'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,857 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631ba490>
2024-08-20 11:27:47,864 - INFO - Created relationship from Glycerinum to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312e150>
2024-08-20 11:27:47,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glycerinum'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,870 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16312c450>
2024-08-20 11:27:47,874 - INFO - Created relationship from Essence to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631aaf90>
2024-08-20 11:27:47,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Essence'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,881 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631a9d90>
2024-08-20 11:27:47,887 - INFO - Created relationship from Sorbitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311c250>
2024-08-20 11:27:47,891 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sorbitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,892 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16311c990>
2024-08-20 11:27:47,895 - INFO - Created relationship from Xylitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b1c50>
2024-08-20 11:27:47,897 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,899 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631b14d0>
2024-08-20 11:27:47,905 - INFO - Created relationship from Granulated Sugar to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163246990>
2024-08-20 11:27:47,909 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Granulated Sugar'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,910 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x163222d90>
2024-08-20 11:27:47,916 - INFO - Created relationship from Gum Base to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163222a90>
2024-08-20 11:27:47,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Base'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,922 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16315ebd0>
2024-08-20 11:27:47,929 - INFO - Created relationship from Gum Micelle to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163244990>
2024-08-20 11:27:47,933 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,934 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631b2410>
2024-08-20 11:27:47,940 - INFO - Created relationship from Corn Starch to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631b0610>
2024-08-20 11:27:47,944 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Corn Starch'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,945 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631b20d0>
2024-08-20 11:27:47,947 - INFO - Created relationship from Gum Micelle to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x163220b10>
2024-08-20 11:27:47,949 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,950 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1632230d0>
2024-08-20 11:27:47,952 - INFO - Created relationship from Gum Micelle to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631abe10>
2024-08-20 11:27:47,955 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,957 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16312d910>
2024-08-20 11:27:47,959 - INFO - Created relationship from Gum Micelle to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16312eed0>
2024-08-20 11:27:47,962 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,964 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x16311cc50>
2024-08-20 11:27:47,965 - INFO - Created relationship from Gum Micelle to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x16311d550>
2024-08-20 11:27:47,968 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,970 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x1631bbad0>
2024-08-20 11:27:47,971 - INFO - Created relationship from Gum Micelle to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x1631ba190>
2024-08-20 11:27:47,974 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 11:27:47,977 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x12fa24110>
2024-08-20 11:27:47,978 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x16312c650>
2024-08-20 11:27:47,985 - INFO - Created relationship from FVSS to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312ec50>
2024-08-20 11:27:47,989 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVSS'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:47,992 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x16312d890>
2024-08-20 11:27:47,994 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631ab650>
2024-08-20 11:27:48,001 - INFO - Created relationship from FVBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631aa3d0>
2024-08-20 11:27:48,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,007 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x163222310>
2024-08-20 11:27:48,008 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x163221cd0>
2024-08-20 11:27:48,014 - INFO - Created relationship from EXCW to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223c90>
2024-08-20 11:27:48,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXCW'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,017 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631b9810>
2024-08-20 11:27:48,018 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631b90d0>
2024-08-20 11:27:48,024 - INFO - Created relationship from EBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x162e97110>
2024-08-20 11:27:48,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,031 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631b0050>
2024-08-20 11:27:48,034 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631b3350>
2024-08-20 11:27:48,039 - INFO - Created relationship from FVWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220bd0>
2024-08-20 11:27:48,043 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,045 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x163220050>
2024-08-20 11:27:48,046 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1632233d0>
2024-08-20 11:27:48,050 - INFO - Created relationship from EXPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222a50>
2024-08-20 11:27:48,052 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,054 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631a9cd0>
2024-08-20 11:27:48,055 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x12ffd38d0>
2024-08-20 11:27:48,060 - INFO - Created relationship from EXTP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bb610>
2024-08-20 11:27:48,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXTP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,065 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631bbfd0>
2024-08-20 11:27:48,066 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x16312f850>
2024-08-20 11:27:48,072 - INFO - Created relationship from EXSM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312cf90>
2024-08-20 11:27:48,076 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXSM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,079 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x16312c510>
2024-08-20 11:27:48,081 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631b30d0>
2024-08-20 11:27:48,088 - INFO - Created relationship from FVPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b25d0>
2024-08-20 11:27:48,093 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,095 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1632464d0>
2024-08-20 11:27:48,098 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x16312e890>
2024-08-20 11:27:48,118 - INFO - Created relationship from DMLM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312d610>
2024-08-20 11:27:48,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMLM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,125 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x16312d590>
2024-08-20 11:27:48,127 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631ba790>
2024-08-20 11:27:48,133 - INFO - Created relationship from DMRR to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b8590>
2024-08-20 11:27:48,137 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRR'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,139 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631bb050>
2024-08-20 11:27:48,142 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631aa710>
2024-08-20 11:27:48,149 - INFO - Created relationship from DMRM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1cd0>
2024-08-20 11:27:48,154 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,156 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631b2c90>
2024-08-20 11:27:48,157 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631b1150>
2024-08-20 11:27:48,164 - INFO - Created relationship from DMRJ to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223d90>
2024-08-20 11:27:48,169 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRJ'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,172 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x163223ed0>
2024-08-20 11:27:48,175 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x163247190>
2024-08-20 11:27:48,181 - INFO - Created relationship from DMRC to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163246dd0>
2024-08-20 11:27:48,184 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRC'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,186 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631b2650>
2024-08-20 11:27:48,188 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631b3b50>
2024-08-20 11:27:48,196 - INFO - Created relationship from DMPE to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631a9050>
2024-08-20 11:27:48,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPE'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,203 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631aa710>
2024-08-20 11:27:48,205 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x1631bac90>
2024-08-20 11:27:48,211 - INFO - Created relationship from WSP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ba550>
2024-08-20 11:27:48,215 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'WSP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,217 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1631b9bd0>
2024-08-20 11:27:48,219 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x163223a90>
2024-08-20 11:27:48,225 - INFO - Created relationship from DMPY to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:48,227 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPY'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,229 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x163220f50>
2024-08-20 11:27:48,231 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x16312e690>
2024-08-20 11:27:48,238 - INFO - Created relationship from RPWP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312f5d0>
2024-08-20 11:27:48,242 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'RPWP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,244 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x1632446d0>
2024-08-20 11:27:48,246 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x163245510>
2024-08-20 11:27:48,254 - INFO - Created relationship from AUWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163244b10>
2024-08-20 11:27:48,259 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'AUWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,283 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b8350>
2024-08-20 11:27:48,288 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x12fff3b90>
2024-08-20 11:27:48,292 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312c150>
2024-08-20 11:27:48,294 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f110>
2024-08-20 11:27:48,300 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312d050>
2024-08-20 11:27:48,304 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,306 - INFO - Created relationship from Sheeting to 环境控制 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ab090>
2024-08-20 11:27:48,308 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '环境控制'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,311 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631aa890>
2024-08-20 11:27:48,315 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,319 - INFO - Created relationship from 环境控制 to 区域空调 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220a90>
2024-08-20 11:27:48,323 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '环境控制'}), (b:Machine {name: '区域空调'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,344 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163221410>
2024-08-20 11:27:48,350 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2010>
2024-08-20 11:27:48,352 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1450>
2024-08-20 11:27:48,354 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311c810>
2024-08-20 11:27:48,358 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f410>
2024-08-20 11:27:48,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,360 - INFO - Created relationship from Sheeting to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631aa6d0>
2024-08-20 11:27:48,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,365 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ab650>
2024-08-20 11:27:48,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,367 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2f10>
2024-08-20 11:27:48,370 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,387 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b26d0>
2024-08-20 11:27:48,394 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220310>
2024-08-20 11:27:48,395 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222890>
2024-08-20 11:27:48,396 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632202d0>
2024-08-20 11:27:48,402 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ded0>
2024-08-20 11:27:48,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,404 - INFO - Created relationship from Sheeting to 挤压、切片系统生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312f2d0>
2024-08-20 11:27:48,407 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,409 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312d850>
2024-08-20 11:27:48,409 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,411 - INFO - Created relationship from 挤压、切片系统生产前调试 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba310>
2024-08-20 11:27:48,415 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统生产前调试'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,431 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b8f90>
2024-08-20 11:27:48,436 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c510>
2024-08-20 11:27:48,437 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f3d0>
2024-08-20 11:27:48,438 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f5d0>
2024-08-20 11:27:48,441 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312d810>
2024-08-20 11:27:48,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,442 - INFO - Created relationship from Sheeting to 除湿机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312f310>
2024-08-20 11:27:48,445 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,446 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312cd50>
2024-08-20 11:27:48,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,447 - INFO - Created relationship from 除湿机生产前调试 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b8050>
2024-08-20 11:27:48,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前调试'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,463 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b8b90>
2024-08-20 11:27:48,466 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632221d0>
2024-08-20 11:27:48,467 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220a10>
2024-08-20 11:27:48,468 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223b90>
2024-08-20 11:27:48,469 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1632237d0>
2024-08-20 11:27:48,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,470 - INFO - Created relationship from Sheeting to 除湿机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b38d0>
2024-08-20 11:27:48,473 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,474 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b2d10>
2024-08-20 11:27:48,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,475 - INFO - Created relationship from 除湿机生产前空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631abb90>
2024-08-20 11:27:48,478 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,491 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311d510>
2024-08-20 11:27:48,497 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3810>
2024-08-20 11:27:48,498 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aba50>
2024-08-20 11:27:48,499 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aa250>
2024-08-20 11:27:48,505 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221a10>
2024-08-20 11:27:48,506 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,507 - INFO - Created relationship from Sheeting to 冷冻机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163223ed0>
2024-08-20 11:27:48,511 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,512 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221490>
2024-08-20 11:27:48,513 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,513 - INFO - Created relationship from 冷冻机生产前调试 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223990>
2024-08-20 11:27:48,516 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前调试'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,528 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bab50>
2024-08-20 11:27:48,531 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163245490>
2024-08-20 11:27:48,532 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312d150>
2024-08-20 11:27:48,534 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312ced0>
2024-08-20 11:27:48,535 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311cc50>
2024-08-20 11:27:48,535 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,540 - INFO - Created relationship from Sheeting to 冷冻机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311f450>
2024-08-20 11:27:48,543 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,545 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315f910>
2024-08-20 11:27:48,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,550 - INFO - Created relationship from 冷冻机生产前空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311f750>
2024-08-20 11:27:48,553 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,561 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163244b10>
2024-08-20 11:27:48,565 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ba090>
2024-08-20 11:27:48,566 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bb690>
2024-08-20 11:27:48,568 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fc90>
2024-08-20 11:27:48,570 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312f690>
2024-08-20 11:27:48,571 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,574 - INFO - Created relationship from Sheeting to 切片机除尘系统生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312c5d0>
2024-08-20 11:27:48,576 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,577 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221810>
2024-08-20 11:27:48,577 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,580 - INFO - Created relationship from 切片机除尘系统生产前空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221d10>
2024-08-20 11:27:48,583 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产前空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,590 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632210d0>
2024-08-20 11:27:48,593 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b11d0>
2024-08-20 11:27:48,594 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315d0d0>
2024-08-20 11:27:48,595 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e6b50>
2024-08-20 11:27:48,596 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7710>
2024-08-20 11:27:48,596 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,597 - INFO - Created relationship from Sheeting to 挤压、切片系统运行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315f010>
2024-08-20 11:27:48,600 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统运行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,601 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222110>
2024-08-20 11:27:48,601 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,602 - INFO - Created relationship from 挤压、切片系统运行 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223e10>
2024-08-20 11:27:48,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统运行'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,606 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163222c50>
2024-08-20 11:27:48,611 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aaf90>
2024-08-20 11:27:48,612 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1a10>
2024-08-20 11:27:48,613 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b87d0>
2024-08-20 11:27:48,614 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ba090>
2024-08-20 11:27:48,615 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,616 - INFO - Created relationship from Sheeting to 挤压、切片系统停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8e90>
2024-08-20 11:27:48,618 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,619 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312cc90>
2024-08-20 11:27:48,619 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,621 - INFO - Created relationship from 挤压、切片系统停止生产 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312f690>
2024-08-20 11:27:48,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统停止生产'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,627 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312d0d0>
2024-08-20 11:27:48,630 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6cd0>
2024-08-20 11:27:48,631 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5d10>
2024-08-20 11:27:48,632 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bb710>
2024-08-20 11:27:48,633 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ba090>
2024-08-20 11:27:48,633 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,634 - INFO - Created relationship from Sheeting to 冷冻机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8190>
2024-08-20 11:27:48,637 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,638 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311cd50>
2024-08-20 11:27:48,639 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,639 - INFO - Created relationship from 冷冻机生产中空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311e790>
2024-08-20 11:27:48,641 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产中空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,654 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a8290>
2024-08-20 11:27:48,659 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c250>
2024-08-20 11:27:48,660 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f490>
2024-08-20 11:27:48,661 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312ff50>
2024-08-20 11:27:48,663 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222fd0>
2024-08-20 11:27:48,663 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,669 - INFO - Created relationship from Sheeting to 除湿机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163223610>
2024-08-20 11:27:48,672 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,674 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222150>
2024-08-20 11:27:48,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,679 - INFO - Created relationship from 除湿机生产中空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315ee50>
2024-08-20 11:27:48,682 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产中空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,695 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7450>
2024-08-20 11:27:48,699 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220990>
2024-08-20 11:27:48,700 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223750>
2024-08-20 11:27:48,702 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223f90>
2024-08-20 11:27:48,703 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315fe50>
2024-08-20 11:27:48,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,708 - INFO - Created relationship from Sheeting to 切片机除尘系统生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312fcd0>
2024-08-20 11:27:48,711 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,713 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312d890>
2024-08-20 11:27:48,713 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,718 - INFO - Created relationship from 切片机除尘系统生产中空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312dc50>
2024-08-20 11:27:48,722 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产中空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,733 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aba90>
2024-08-20 11:27:48,739 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d990>
2024-08-20 11:27:48,740 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8c10>
2024-08-20 11:27:48,741 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ba490>
2024-08-20 11:27:48,744 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6b50>
2024-08-20 11:27:48,744 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,745 - INFO - Created relationship from Sheeting to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5410>
2024-08-20 11:27:48,748 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,750 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e6ad0>
2024-08-20 11:27:48,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,751 - INFO - Created relationship from 异常处理 to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315f0d0>
2024-08-20 11:27:48,753 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,764 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16315cb10>
2024-08-20 11:27:48,770 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8c10>
2024-08-20 11:27:48,771 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8950>
2024-08-20 11:27:48,774 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aa450>
2024-08-20 11:27:48,776 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aa610>
2024-08-20 11:27:48,776 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,781 - INFO - Created relationship from Mixer to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x162e2e490>
2024-08-20 11:27:48,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,786 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311ea50>
2024-08-20 11:27:48,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,791 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311ee10>
2024-08-20 11:27:48,795 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,835 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x162d51f90>
2024-08-20 11:27:48,838 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163246cd0>
2024-08-20 11:27:48,839 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312cd10>
2024-08-20 11:27:48,839 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312cc10>
2024-08-20 11:27:48,843 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312cfd0>
2024-08-20 11:27:48,844 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,848 - INFO - Created relationship from Mixer to 生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311ff50>
2024-08-20 11:27:48,851 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,852 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311f790>
2024-08-20 11:27:48,853 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,856 - INFO - Created relationship from 生产前调试 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311c650>
2024-08-20 11:27:48,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '生产前调试'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,874 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163247d10>
2024-08-20 11:27:48,878 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163246e50>
2024-08-20 11:27:48,878 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aafd0>
2024-08-20 11:27:48,881 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aa250>
2024-08-20 11:27:48,884 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8890>
2024-08-20 11:27:48,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,886 - INFO - Created relationship from Mixer to 启动夹套水加热器 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b82d0>
2024-08-20 11:27:48,889 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '启动夹套水加热器'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,890 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b9c50>
2024-08-20 11:27:48,891 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,894 - INFO - Created relationship from 启动夹套水加热器 to 夹套水系统（设备清单中名称为热水）-用到热水、模温机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315f510>
2024-08-20 11:27:48,897 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '启动夹套水加热器'}), (b:Machine {name: '夹套水系统（设备清单中名称为热水）-用到热水、模温机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,914 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312e0d0>
2024-08-20 11:27:48,920 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x162d43f90>
2024-08-20 11:27:48,922 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220cd0>
2024-08-20 11:27:48,924 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631babd0>
2024-08-20 11:27:48,928 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8d90>
2024-08-20 11:27:48,928 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,929 - INFO - Created relationship from Mixer to NCS系统降温 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bb690>
2024-08-20 11:27:48,932 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: 'NCS系统降温'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,933 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x12ffd2c10>
2024-08-20 11:27:48,933 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,937 - INFO - Created relationship from NCS系统降温 to 停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315d790>
2024-08-20 11:27:48,939 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'NCS系统降温'}), (b:Machine {name: '停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,946 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a9850>
2024-08-20 11:27:48,949 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163247e10>
2024-08-20 11:27:48,950 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163246650>
2024-08-20 11:27:48,952 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f310>
2024-08-20 11:27:48,954 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e290>
2024-08-20 11:27:48,954 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,957 - INFO - Created relationship from Mixer to 除尘系统启动 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312de10>
2024-08-20 11:27:48,960 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '除尘系统启动'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,961 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311fa50>
2024-08-20 11:27:48,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,964 - INFO - Created relationship from 除尘系统启动 to 混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311cad0>
2024-08-20 11:27:48,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除尘系统启动'}), (b:Machine {name: '混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,970 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163220390>
2024-08-20 11:27:48,973 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311e910>
2024-08-20 11:27:48,973 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311ef90>
2024-08-20 11:27:48,974 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163246850>
2024-08-20 11:27:48,977 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163244550>
2024-08-20 11:27:48,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:48,980 - INFO - Created relationship from Mixer to 1#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1632440d0>
2024-08-20 11:27:48,983 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '1#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:48,984 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631a9b50>
2024-08-20 11:27:48,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:48,988 - INFO - Created relationship from 1#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aa1d0>
2024-08-20 11:27:48,991 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '1#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:48,999 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16315ed50>
2024-08-20 11:27:49,003 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ed90>
2024-08-20 11:27:49,004 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312d490>
2024-08-20 11:27:49,005 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b9950>
2024-08-20 11:27:49,006 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b9e50>
2024-08-20 11:27:49,007 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,010 - INFO - Created relationship from Mixer to 2#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163220550>
2024-08-20 11:27:49,012 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '2#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,014 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220990>
2024-08-20 11:27:49,014 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,018 - INFO - Created relationship from 2#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d6d0>
2024-08-20 11:27:49,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '2#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,030 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312dc50>
2024-08-20 11:27:49,036 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16315d250>
2024-08-20 11:27:49,039 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315d990>
2024-08-20 11:27:49,046 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631abb50>
2024-08-20 11:27:49,047 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aaa10>
2024-08-20 11:27:49,048 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,051 - INFO - Created relationship from Mixer to 3#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ba250>
2024-08-20 11:27:49,054 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '3#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,054 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b8e90>
2024-08-20 11:27:49,054 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,058 - INFO - Created relationship from 3#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163244b10>
2024-08-20 11:27:49,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '3#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,068 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632454d0>
2024-08-20 11:27:49,073 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163221990>
2024-08-20 11:27:49,074 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220690>
2024-08-20 11:27:49,075 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632230d0>
2024-08-20 11:27:49,077 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222c10>
2024-08-20 11:27:49,078 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,081 - INFO - Created relationship from Mixer to 4#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1632215d0>
2024-08-20 11:27:49,084 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '4#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,085 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220210>
2024-08-20 11:27:49,085 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,089 - INFO - Created relationship from 4#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220b90>
2024-08-20 11:27:49,092 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '4#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,103 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632454d0>
2024-08-20 11:27:49,109 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d610>
2024-08-20 11:27:49,110 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311ee10>
2024-08-20 11:27:49,111 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631abb50>
2024-08-20 11:27:49,113 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x162d88d10>
2024-08-20 11:27:49,113 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,117 - INFO - Created relationship from Mixer to 停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315eb10>
2024-08-20 11:27:49,122 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,123 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b9710>
2024-08-20 11:27:49,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,127 - INFO - Created relationship from 停止生产 to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bafd0>
2024-08-20 11:27:49,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '停止生产'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,139 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312f790>
2024-08-20 11:27:49,143 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3d50>
2024-08-20 11:27:49,145 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b3690>
2024-08-20 11:27:49,148 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315c690>
2024-08-20 11:27:49,152 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315c550>
2024-08-20 11:27:49,153 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,154 - INFO - Created relationship from Mixer to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312d690>
2024-08-20 11:27:49,157 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,158 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312e250>
2024-08-20 11:27:49,159 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,163 - INFO - Created relationship from 异常处理 to 一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aa9d0>
2024-08-20 11:27:49,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,170 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631ab050>
2024-08-20 11:27:49,175 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bb1d0>
2024-08-20 11:27:49,180 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bb710>
2024-08-20 11:27:49,181 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bab90>
2024-08-20 11:27:49,183 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163245450>
2024-08-20 11:27:49,187 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,188 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163244910>
2024-08-20 11:27:49,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,193 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220790>
2024-08-20 11:27:49,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,198 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:49,202 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,215 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b1150>
2024-08-20 11:27:49,220 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163246610>
2024-08-20 11:27:49,221 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b89d0>
2024-08-20 11:27:49,222 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631baf90>
2024-08-20 11:27:49,229 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bac90>
2024-08-20 11:27:49,230 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,233 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311c350>
2024-08-20 11:27:49,235 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,238 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311ffd0>
2024-08-20 11:27:49,248 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,256 - INFO - Created relationship from nan to 振筛机\配料提升机升降正常\电子称打印机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:49,258 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机\\配料提升机升降正常\\电子称打印机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,319 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632225d0>
2024-08-20 11:27:49,324 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aab50>
2024-08-20 11:27:49,325 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312da90>
2024-08-20 11:27:49,326 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312da50>
2024-08-20 11:27:49,329 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315cc90>
2024-08-20 11:27:49,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,330 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b1010>
2024-08-20 11:27:49,334 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,334 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1910>
2024-08-20 11:27:49,335 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,337 - INFO - Created relationship from nan to 振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631a99d0>
2024-08-20 11:27:49,340 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,366 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aad90>
2024-08-20 11:27:49,382 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220a50>
2024-08-20 11:27:49,383 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312fb50>
2024-08-20 11:27:49,384 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f610>
2024-08-20 11:27:49,385 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311ca10>
2024-08-20 11:27:49,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,386 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311d790>
2024-08-20 11:27:49,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,390 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315cad0>
2024-08-20 11:27:49,390 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,390 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b95d0>
2024-08-20 11:27:49,392 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,397 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631baf90>
2024-08-20 11:27:49,401 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b38d0>
2024-08-20 11:27:49,402 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0ed0>
2024-08-20 11:27:49,403 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e4f90>
2024-08-20 11:27:49,408 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6fd0>
2024-08-20 11:27:49,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,409 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b2690>
2024-08-20 11:27:49,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,411 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b0cd0>
2024-08-20 11:27:49,411 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,412 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163245910>
2024-08-20 11:27:49,415 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,421 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b9390>
2024-08-20 11:27:49,425 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311cc90>
2024-08-20 11:27:49,426 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311c350>
2024-08-20 11:27:49,427 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fc50>
2024-08-20 11:27:49,428 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312f6d0>
2024-08-20 11:27:49,428 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,428 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163220a50>
2024-08-20 11:27:49,431 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,432 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221350>
2024-08-20 11:27:49,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,433 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315d7d0>
2024-08-20 11:27:49,435 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,440 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aa810>
2024-08-20 11:27:49,444 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6810>
2024-08-20 11:27:49,445 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7490>
2024-08-20 11:27:49,446 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632211d0>
2024-08-20 11:27:49,449 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163223090>
2024-08-20 11:27:49,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,450 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315e490>
2024-08-20 11:27:49,452 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,453 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315c050>
2024-08-20 11:27:49,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,455 - INFO - Created relationship from nan to 吸包机、振筛机（密封气囊） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631abd10>
2024-08-20 11:27:49,458 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吸包机、振筛机（密封气囊）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,464 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311fd90>
2024-08-20 11:27:49,469 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312db10>
2024-08-20 11:27:49,470 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f1d0>
2024-08-20 11:27:49,471 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8690>
2024-08-20 11:27:49,474 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8650>
2024-08-20 11:27:49,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,475 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245dd0>
2024-08-20 11:27:49,478 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,479 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1210>
2024-08-20 11:27:49,479 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,482 - INFO - Created relationship from nan to 振筛机（震动开关、抽风开关、密封气囊）、电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e79d0>
2024-08-20 11:27:49,485 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机（震动开关、抽风开关、密封气囊）、电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,492 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e4650>
2024-08-20 11:27:49,497 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b27d0>
2024-08-20 11:27:49,498 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bab50>
2024-08-20 11:27:49,498 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b93d0>
2024-08-20 11:27:49,502 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bb790>
2024-08-20 11:27:49,502 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,503 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312f0d0>
2024-08-20 11:27:49,505 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,506 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312da90>
2024-08-20 11:27:49,506 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,509 - INFO - Created relationship from nan to 气动泵 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d8d0>
2024-08-20 11:27:49,511 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,516 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311e7d0>
2024-08-20 11:27:49,520 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16315c650>
2024-08-20 11:27:49,521 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223b10>
2024-08-20 11:27:49,521 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222510>
2024-08-20 11:27:49,525 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5950>
2024-08-20 11:27:49,525 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,525 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5dd0>
2024-08-20 11:27:49,528 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,530 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bfcd0>
2024-08-20 11:27:49,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,532 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb910>
2024-08-20 11:27:49,536 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,541 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bbbd0>
2024-08-20 11:27:49,546 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4c10>
2024-08-20 11:27:49,547 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e63d0>
2024-08-20 11:27:49,548 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5210>
2024-08-20 11:27:49,552 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6710>
2024-08-20 11:27:49,553 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,554 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163246950>
2024-08-20 11:27:49,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,558 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245e90>
2024-08-20 11:27:49,558 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,561 - INFO - Created relationship from nan to 电子秤（预热60min） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632446d0>
2024-08-20 11:27:49,563 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤（预热60min）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,571 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a9850>
2024-08-20 11:27:49,577 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b18d0>
2024-08-20 11:27:49,578 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0990>
2024-08-20 11:27:49,579 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3050>
2024-08-20 11:27:49,583 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315e450>
2024-08-20 11:27:49,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,584 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b14d0>
2024-08-20 11:27:49,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,589 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b3450>
2024-08-20 11:27:49,589 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,590 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b1a50>
2024-08-20 11:27:49,593 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,600 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aa250>
2024-08-20 11:27:49,604 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163244650>
2024-08-20 11:27:49,605 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244050>
2024-08-20 11:27:49,606 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244e50>
2024-08-20 11:27:49,609 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6790>
2024-08-20 11:27:49,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,610 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5350>
2024-08-20 11:27:49,613 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,614 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7f90>
2024-08-20 11:27:49,614 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,618 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机\抽风系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e7690>
2024-08-20 11:27:49,622 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机\\抽风系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,631 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b9e10>
2024-08-20 11:27:49,637 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16315fbd0>
2024-08-20 11:27:49,638 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221d90>
2024-08-20 11:27:49,639 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315f610>
2024-08-20 11:27:49,642 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315cd50>
2024-08-20 11:27:49,642 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,642 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e42d0>
2024-08-20 11:27:49,645 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,646 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4390>
2024-08-20 11:27:49,646 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,650 - INFO - Created relationship from nan to 地磅 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5590>
2024-08-20 11:27:49,652 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '地磅'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,663 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb690>
2024-08-20 11:27:49,669 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631baf90>
2024-08-20 11:27:49,670 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163245850>
2024-08-20 11:27:49,671 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163247010>
2024-08-20 11:27:49,675 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ab450>
2024-08-20 11:27:49,675 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,677 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ab650>
2024-08-20 11:27:49,686 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,688 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b0890>
2024-08-20 11:27:49,688 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,691 - INFO - Created relationship from nan to 升降梯 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b0a10>
2024-08-20 11:27:49,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '升降梯'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,699 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b3310>
2024-08-20 11:27:49,701 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631a9e90>
2024-08-20 11:27:49,702 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244d50>
2024-08-20 11:27:49,702 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244150>
2024-08-20 11:27:49,703 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163247e90>
2024-08-20 11:27:49,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,703 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b37d0>
2024-08-20 11:27:49,706 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,707 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b3e50>
2024-08-20 11:27:49,707 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,708 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3910>
2024-08-20 11:27:49,710 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,715 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b8cd0>
2024-08-20 11:27:49,719 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6b50>
2024-08-20 11:27:49,720 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7c90>
2024-08-20 11:27:49,720 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e4f10>
2024-08-20 11:27:49,721 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315cd50>
2024-08-20 11:27:49,721 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,721 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163222510>
2024-08-20 11:27:49,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,725 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220310>
2024-08-20 11:27:49,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,726 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bbcd0>
2024-08-20 11:27:49,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,734 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b9bd0>
2024-08-20 11:27:49,739 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6b10>
2024-08-20 11:27:49,740 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5b90>
2024-08-20 11:27:49,741 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5ad0>
2024-08-20 11:27:49,745 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315f610>
2024-08-20 11:27:49,745 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,745 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315f190>
2024-08-20 11:27:49,747 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,748 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b3f50>
2024-08-20 11:27:49,748 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,749 - INFO - Created relationship from nan to 电子称、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3950>
2024-08-20 11:27:49,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,757 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163245a50>
2024-08-20 11:27:49,761 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223d10>
2024-08-20 11:27:49,762 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221510>
2024-08-20 11:27:49,763 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222b90>
2024-08-20 11:27:49,767 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222f50>
2024-08-20 11:27:49,767 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,768 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b0ed0>
2024-08-20 11:27:49,769 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,770 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1010>
2024-08-20 11:27:49,770 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,771 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2550>
2024-08-20 11:27:49,773 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,778 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632226d0>
2024-08-20 11:27:49,783 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223450>
2024-08-20 11:27:49,784 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244b90>
2024-08-20 11:27:49,784 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163247090>
2024-08-20 11:27:49,788 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1632448d0>
2024-08-20 11:27:49,788 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,789 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315cf10>
2024-08-20 11:27:49,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,793 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7710>
2024-08-20 11:27:49,793 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,795 - INFO - Created relationship from nan to 电子称（Depend on PPlan）、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e6410>
2024-08-20 11:27:49,798 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称（Depend on PPlan）、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,802 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e62d0>
2024-08-20 11:27:49,808 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311e510>
2024-08-20 11:27:49,809 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311ee10>
2024-08-20 11:27:49,810 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315ed90>
2024-08-20 11:27:49,811 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bbb10>
2024-08-20 11:27:49,811 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,811 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ba790>
2024-08-20 11:27:49,814 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,815 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e6110>
2024-08-20 11:27:49,815 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,816 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5950>
2024-08-20 11:27:49,819 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,824 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e5290>
2024-08-20 11:27:49,829 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632442d0>
2024-08-20 11:27:49,830 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632440d0>
2024-08-20 11:27:49,830 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220d50>
2024-08-20 11:27:49,831 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221650>
2024-08-20 11:27:49,831 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,832 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1632232d0>
2024-08-20 11:27:49,834 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,835 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1c90>
2024-08-20 11:27:49,835 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,835 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b1a50>
2024-08-20 11:27:49,838 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,843 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311ccd0>
2024-08-20 11:27:49,845 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2610>
2024-08-20 11:27:49,846 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163247cd0>
2024-08-20 11:27:49,847 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163245cd0>
2024-08-20 11:27:49,848 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163247e10>
2024-08-20 11:27:49,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,848 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163220fd0>
2024-08-20 11:27:49,850 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,850 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:49,851 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,851 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222fd0>
2024-08-20 11:27:49,854 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,858 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e5850>
2024-08-20 11:27:49,863 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5b90>
2024-08-20 11:27:49,864 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e42d0>
2024-08-20 11:27:49,865 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b89d0>
2024-08-20 11:27:49,869 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315edd0>
2024-08-20 11:27:49,869 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,869 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311f290>
2024-08-20 11:27:49,871 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,872 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311fa10>
2024-08-20 11:27:49,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,872 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311e650>
2024-08-20 11:27:49,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,876 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a9d90>
2024-08-20 11:27:49,877 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e44d0>
2024-08-20 11:27:49,877 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5510>
2024-08-20 11:27:49,878 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5c10>
2024-08-20 11:27:49,878 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8e90>
2024-08-20 11:27:49,878 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,879 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b82d0>
2024-08-20 11:27:49,881 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,882 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222cd0>
2024-08-20 11:27:49,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,882 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223f10>
2024-08-20 11:27:49,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,893 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632214d0>
2024-08-20 11:27:49,897 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632464d0>
2024-08-20 11:27:49,897 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1010>
2024-08-20 11:27:49,898 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312ead0>
2024-08-20 11:27:49,898 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ef50>
2024-08-20 11:27:49,899 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,899 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b3550>
2024-08-20 11:27:49,902 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,903 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315c690>
2024-08-20 11:27:49,906 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,907 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632464d0>
2024-08-20 11:27:49,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,915 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163246610>
2024-08-20 11:27:49,920 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223f10>
2024-08-20 11:27:49,921 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632225d0>
2024-08-20 11:27:49,921 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e4bd0>
2024-08-20 11:27:49,925 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e60d0>
2024-08-20 11:27:49,925 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,926 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4850>
2024-08-20 11:27:49,929 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,930 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e6f90>
2024-08-20 11:27:49,930 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,932 - INFO - Created relationship from nan to Kanban with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b8a50>
2024-08-20 11:27:49,935 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'Kanban'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,940 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311cb50>
2024-08-20 11:27:49,944 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312d890>
2024-08-20 11:27:49,945 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312fe50>
2024-08-20 11:27:49,946 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5050>
2024-08-20 11:27:49,948 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6b10>
2024-08-20 11:27:49,948 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,948 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6050>
2024-08-20 11:27:49,951 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,952 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7b90>
2024-08-20 11:27:49,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,954 - INFO - Created relationship from nan to 叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311d9d0>
2024-08-20 11:27:49,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,962 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631ba450>
2024-08-20 11:27:49,967 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163222e90>
2024-08-20 11:27:49,968 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223a50>
2024-08-20 11:27:49,968 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223fd0>
2024-08-20 11:27:49,970 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1632455d0>
2024-08-20 11:27:49,970 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,971 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245910>
2024-08-20 11:27:49,973 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,973 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315d450>
2024-08-20 11:27:49,973 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,975 - INFO - Created relationship from nan to 砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312e990>
2024-08-20 11:27:49,978 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:49,983 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312fc50>
2024-08-20 11:27:49,988 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163244510>
2024-08-20 11:27:49,989 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244710>
2024-08-20 11:27:49,990 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632458d0>
2024-08-20 11:27:49,994 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222110>
2024-08-20 11:27:49,994 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:49,995 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163220bd0>
2024-08-20 11:27:49,997 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:49,997 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222150>
2024-08-20 11:27:49,997 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:49,999 - INFO - Created relationship from nan to 1#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9dd0>
2024-08-20 11:27:50,003 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,007 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b8ed0>
2024-08-20 11:27:50,012 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7b90>
2024-08-20 11:27:50,012 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7610>
2024-08-20 11:27:50,013 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e62d0>
2024-08-20 11:27:50,017 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e590>
2024-08-20 11:27:50,018 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,018 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312ff50>
2024-08-20 11:27:50,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,023 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631be990>
2024-08-20 11:27:50,023 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,025 - INFO - Created relationship from nan to 砂糖系统、糖粉接收罐和循环系统罐、磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312f450>
2024-08-20 11:27:50,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、糖粉接收罐和循环系统罐、磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,033 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312d110>
2024-08-20 11:27:50,039 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x162e2e490>
2024-08-20 11:27:50,040 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311d9d0>
2024-08-20 11:27:50,041 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311fa10>
2024-08-20 11:27:50,045 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f690>
2024-08-20 11:27:50,046 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,047 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245610>
2024-08-20 11:27:50,048 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,049 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245b50>
2024-08-20 11:27:50,050 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,052 - INFO - Created relationship from nan to 2#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163244190>
2024-08-20 11:27:50,055 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '2#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,061 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b9910>
2024-08-20 11:27:50,066 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aba10>
2024-08-20 11:27:50,067 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aab10>
2024-08-20 11:27:50,067 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e62d0>
2024-08-20 11:27:50,071 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5250>
2024-08-20 11:27:50,071 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,072 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631aa7d0>
2024-08-20 11:27:50,075 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,076 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631a8110>
2024-08-20 11:27:50,076 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,079 - INFO - Created relationship from nan to 3#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bba10>
2024-08-20 11:27:50,082 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '3#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,087 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b9910>
2024-08-20 11:27:50,091 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163246310>
2024-08-20 11:27:50,092 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632456d0>
2024-08-20 11:27:50,093 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311d990>
2024-08-20 11:27:50,097 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c950>
2024-08-20 11:27:50,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,098 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311c390>
2024-08-20 11:27:50,099 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,100 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312c750>
2024-08-20 11:27:50,100 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,101 - INFO - Created relationship from nan to 电动叉车、电葫芦、砂糖系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d050>
2024-08-20 11:27:50,102 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车、电葫芦、砂糖系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,104 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312f910>
2024-08-20 11:27:50,108 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6050>
2024-08-20 11:27:50,109 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7650>
2024-08-20 11:27:50,110 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f610>
2024-08-20 11:27:50,116 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312fe10>
2024-08-20 11:27:50,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,117 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312e850>
2024-08-20 11:27:50,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,120 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311db10>
2024-08-20 11:27:50,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,121 - INFO - Created relationship from nan to 电葫芦、ZMT21 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311ec90>
2024-08-20 11:27:50,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电葫芦、ZMT21'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,124 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311ce10>
2024-08-20 11:27:50,128 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163246ed0>
2024-08-20 11:27:50,128 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163244350>
2024-08-20 11:27:50,129 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b8c10>
2024-08-20 11:27:50,131 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8990>
2024-08-20 11:27:50,131 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,132 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631abbd0>
2024-08-20 11:27:50,135 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,136 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4910>
2024-08-20 11:27:50,136 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,136 - INFO - Created relationship from nan to 下糖斗RV阀、磨糖机、磨糖风机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e4b10>
2024-08-20 11:27:50,139 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '下糖斗RV阀、磨糖机、磨糖风机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,142 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7b90>
2024-08-20 11:27:50,146 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b99d0>
2024-08-20 11:27:50,147 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aa890>
2024-08-20 11:27:50,148 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aa710>
2024-08-20 11:27:50,152 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163247e90>
2024-08-20 11:27:50,152 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,153 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163246ed0>
2024-08-20 11:27:50,155 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,156 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163244850>
2024-08-20 11:27:50,156 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,157 - INFO - Created relationship from nan to 卸糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311de10>
2024-08-20 11:27:50,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '卸糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,162 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311d290>
2024-08-20 11:27:50,167 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c190>
2024-08-20 11:27:50,168 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312e090>
2024-08-20 11:27:50,169 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e6a10>
2024-08-20 11:27:50,173 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6810>
2024-08-20 11:27:50,173 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,174 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x162d65f10>
2024-08-20 11:27:50,177 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,179 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222790>
2024-08-20 11:27:50,179 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,180 - INFO - Created relationship from nan to 1#风机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5010>
2024-08-20 11:27:50,184 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#风机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,188 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e5bd0>
2024-08-20 11:27:50,191 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f9d0>
2024-08-20 11:27:50,192 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311d910>
2024-08-20 11:27:50,193 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311d4d0>
2024-08-20 11:27:50,197 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ddd0>
2024-08-20 11:27:50,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,198 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312d810>
2024-08-20 11:27:50,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,201 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312d490>
2024-08-20 11:27:50,202 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,203 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246b10>
2024-08-20 11:27:50,205 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,208 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163244190>
2024-08-20 11:27:50,212 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8690>
2024-08-20 11:27:50,213 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222210>
2024-08-20 11:27:50,213 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222e10>
2024-08-20 11:27:50,214 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221390>
2024-08-20 11:27:50,215 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,216 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245490>
2024-08-20 11:27:50,218 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,219 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245110>
2024-08-20 11:27:50,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,220 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631a9c10>
2024-08-20 11:27:50,223 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,224 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631ab750>
2024-08-20 11:27:50,229 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ea90>
2024-08-20 11:27:50,229 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f450>
2024-08-20 11:27:50,230 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312cd90>
2024-08-20 11:27:50,230 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311eb10>
2024-08-20 11:27:50,230 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,231 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311e810>
2024-08-20 11:27:50,233 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,233 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311df50>
2024-08-20 11:27:50,233 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,234 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e4a10>
2024-08-20 11:27:50,237 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,238 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163222610>
2024-08-20 11:27:50,242 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632203d0>
2024-08-20 11:27:50,242 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x12ffd2c10>
2024-08-20 11:27:50,243 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311c510>
2024-08-20 11:27:50,243 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c610>
2024-08-20 11:27:50,243 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,244 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311dbd0>
2024-08-20 11:27:50,247 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,248 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7850>
2024-08-20 11:27:50,248 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,248 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5090>
2024-08-20 11:27:50,251 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,253 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb1d0>
2024-08-20 11:27:50,255 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312cd10>
2024-08-20 11:27:50,256 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312e190>
2024-08-20 11:27:50,256 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ab450>
2024-08-20 11:27:50,256 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222810>
2024-08-20 11:27:50,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,257 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163222bd0>
2024-08-20 11:27:50,260 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,261 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223610>
2024-08-20 11:27:50,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,261 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632455d0>
2024-08-20 11:27:50,264 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,266 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163245650>
2024-08-20 11:27:50,269 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e790>
2024-08-20 11:27:50,269 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312c690>
2024-08-20 11:27:50,270 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312c8d0>
2024-08-20 11:27:50,273 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ba210>
2024-08-20 11:27:50,274 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,274 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5710>
2024-08-20 11:27:50,277 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,278 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7710>
2024-08-20 11:27:50,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,278 - INFO - Created relationship from nan to 搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222e10>
2024-08-20 11:27:50,280 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,281 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632210d0>
2024-08-20 11:27:50,285 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311cd10>
2024-08-20 11:27:50,285 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f490>
2024-08-20 11:27:50,285 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311d050>
2024-08-20 11:27:50,288 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163245050>
2024-08-20 11:27:50,288 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,288 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315cdd0>
2024-08-20 11:27:50,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,292 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315c150>
2024-08-20 11:27:50,292 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,292 - INFO - Created relationship from nan to 搅拌罐、吸尘器 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315e5d0>
2024-08-20 11:27:50,296 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐、吸尘器'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,297 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163246850>
2024-08-20 11:27:50,301 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163221810>
2024-08-20 11:27:50,301 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632210d0>
2024-08-20 11:27:50,301 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222e10>
2024-08-20 11:27:50,302 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7010>
2024-08-20 11:27:50,302 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,302 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e7550>
2024-08-20 11:27:50,305 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,306 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311cad0>
2024-08-20 11:27:50,306 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,306 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311cf90>
2024-08-20 11:27:50,309 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,310 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311fb90>
2024-08-20 11:27:50,315 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e650>
2024-08-20 11:27:50,315 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312eb50>
2024-08-20 11:27:50,316 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b0350>
2024-08-20 11:27:50,316 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2b50>
2024-08-20 11:27:50,316 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,317 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8c10>
2024-08-20 11:27:50,320 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,321 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312f290>
2024-08-20 11:27:50,321 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,321 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c8d0>
2024-08-20 11:27:50,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,325 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311de90>
2024-08-20 11:27:50,328 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d990>
2024-08-20 11:27:50,328 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e4850>
2024-08-20 11:27:50,328 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7e10>
2024-08-20 11:27:50,329 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4810>
2024-08-20 11:27:50,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,329 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221cd0>
2024-08-20 11:27:50,333 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,334 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223ad0>
2024-08-20 11:27:50,334 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,334 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632475d0>
2024-08-20 11:27:50,336 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,337 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632440d0>
2024-08-20 11:27:50,342 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:50,343 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1650>
2024-08-20 11:27:50,343 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632234d0>
2024-08-20 11:27:50,344 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222cd0>
2024-08-20 11:27:50,344 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,344 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221d50>
2024-08-20 11:27:50,347 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,348 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315f6d0>
2024-08-20 11:27:50,348 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,348 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b1610>
2024-08-20 11:27:50,350 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,351 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b0350>
2024-08-20 11:27:50,356 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163245ad0>
2024-08-20 11:27:50,356 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7a90>
2024-08-20 11:27:50,357 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7450>
2024-08-20 11:27:50,361 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c050>
2024-08-20 11:27:50,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,361 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311c550>
2024-08-20 11:27:50,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,366 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311df50>
2024-08-20 11:27:50,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,367 - INFO - Created relationship from nan to 振动筛 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c190>
2024-08-20 11:27:50,370 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振动筛'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,371 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312d610>
2024-08-20 11:27:50,376 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4fd0>
2024-08-20 11:27:50,377 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312ec50>
2024-08-20 11:27:50,377 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312d050>
2024-08-20 11:27:50,378 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312f9d0>
2024-08-20 11:27:50,378 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,379 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311ef50>
2024-08-20 11:27:50,382 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,383 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311f210>
2024-08-20 11:27:50,383 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,384 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311d490>
2024-08-20 11:27:50,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,389 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163244190>
2024-08-20 11:27:50,390 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3510>
2024-08-20 11:27:50,391 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0190>
2024-08-20 11:27:50,392 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223e50>
2024-08-20 11:27:50,393 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220790>
2024-08-20 11:27:50,393 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,394 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631be1d0>
2024-08-20 11:27:50,397 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,398 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bda10>
2024-08-20 11:27:50,399 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,400 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b25d0>
2024-08-20 11:27:50,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,408 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b1350>
2024-08-20 11:27:50,413 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16315f0d0>
2024-08-20 11:27:50,414 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315d710>
2024-08-20 11:27:50,415 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163058b90>
2024-08-20 11:27:50,422 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163244890>
2024-08-20 11:27:50,423 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,440 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1632457d0>
2024-08-20 11:27:50,444 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,445 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163246e10>
2024-08-20 11:27:50,448 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,449 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632239d0>
2024-08-20 11:27:50,452 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,453 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163220a10>
2024-08-20 11:27:50,457 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x162d65f10>
2024-08-20 11:27:50,457 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b9b50>
2024-08-20 11:27:50,457 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b9490>
2024-08-20 11:27:50,459 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c950>
2024-08-20 11:27:50,459 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,460 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631baf50>
2024-08-20 11:27:50,462 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,463 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b9bd0>
2024-08-20 11:27:50,463 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,463 - INFO - Created relationship from nan to 是否为胶基系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b84d0>
2024-08-20 11:27:50,467 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为胶基系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,468 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632476d0>
2024-08-20 11:27:50,471 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x162008510>
2024-08-20 11:27:50,472 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315db50>
2024-08-20 11:27:50,472 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220890>
2024-08-20 11:27:50,474 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221e90>
2024-08-20 11:27:50,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,475 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163222a50>
2024-08-20 11:27:50,477 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,478 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1632229d0>
2024-08-20 11:27:50,479 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,480 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2210>
2024-08-20 11:27:50,488 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,490 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b1ed0>
2024-08-20 11:27:50,496 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311fc10>
2024-08-20 11:27:50,499 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311c610>
2024-08-20 11:27:50,500 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3c10>
2024-08-20 11:27:50,507 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2d90>
2024-08-20 11:27:50,507 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,509 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b0710>
2024-08-20 11:27:50,514 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,516 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315eb10>
2024-08-20 11:27:50,516 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,519 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315c690>
2024-08-20 11:27:50,523 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,525 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163244350>
2024-08-20 11:27:50,531 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223510>
2024-08-20 11:27:50,532 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220150>
2024-08-20 11:27:50,534 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632222d0>
2024-08-20 11:27:50,539 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222c90>
2024-08-20 11:27:50,540 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,542 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221550>
2024-08-20 11:27:50,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,548 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bb390>
2024-08-20 11:27:50,548 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,551 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311ef50>
2024-08-20 11:27:50,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,561 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311eb90>
2024-08-20 11:27:50,569 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632227d0>
2024-08-20 11:27:50,570 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222a90>
2024-08-20 11:27:50,572 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222710>
2024-08-20 11:27:50,573 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220f90>
2024-08-20 11:27:50,574 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,575 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8750>
2024-08-20 11:27:50,580 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,582 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bb9d0>
2024-08-20 11:27:50,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,585 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16301c950>
2024-08-20 11:27:50,589 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,591 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632476d0>
2024-08-20 11:27:50,599 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16315ef10>
2024-08-20 11:27:50,600 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0ed0>
2024-08-20 11:27:50,602 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1290>
2024-08-20 11:27:50,604 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311e690>
2024-08-20 11:27:50,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,606 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311d510>
2024-08-20 11:27:50,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,612 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312de10>
2024-08-20 11:27:50,612 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,615 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311e210>
2024-08-20 11:27:50,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,620 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311e490>
2024-08-20 11:27:50,627 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163244490>
2024-08-20 11:27:50,629 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315dd10>
2024-08-20 11:27:50,631 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315cb10>
2024-08-20 11:27:50,638 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3810>
2024-08-20 11:27:50,638 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,641 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b1fd0>
2024-08-20 11:27:50,643 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,645 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1110>
2024-08-20 11:27:50,646 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,649 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb2d0>
2024-08-20 11:27:50,653 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,655 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb610>
2024-08-20 11:27:50,663 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163221e50>
2024-08-20 11:27:50,664 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312cf10>
2024-08-20 11:27:50,665 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312d910>
2024-08-20 11:27:50,670 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312f8d0>
2024-08-20 11:27:50,670 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,672 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b9d10>
2024-08-20 11:27:50,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,675 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ba210>
2024-08-20 11:27:50,676 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,678 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c050>
2024-08-20 11:27:50,683 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,686 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312dc10>
2024-08-20 11:27:50,694 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223e50>
2024-08-20 11:27:50,695 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221b10>
2024-08-20 11:27:50,696 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x12ffd3410>
2024-08-20 11:27:50,697 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315e490>
2024-08-20 11:27:50,698 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,699 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245950>
2024-08-20 11:27:50,702 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,703 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245190>
2024-08-20 11:27:50,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,706 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b0890>
2024-08-20 11:27:50,711 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,714 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b0050>
2024-08-20 11:27:50,722 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d610>
2024-08-20 11:27:50,724 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aa450>
2024-08-20 11:27:50,725 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244e90>
2024-08-20 11:27:50,727 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163245910>
2024-08-20 11:27:50,728 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,730 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163244090>
2024-08-20 11:27:50,733 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,735 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315f590>
2024-08-20 11:27:50,736 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,739 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311d650>
2024-08-20 11:27:50,743 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,746 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311e950>
2024-08-20 11:27:50,748 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3ad0>
2024-08-20 11:27:50,749 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221a10>
2024-08-20 11:27:50,750 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163221fd0>
2024-08-20 11:27:50,752 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221350>
2024-08-20 11:27:50,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,753 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312c490>
2024-08-20 11:27:50,756 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,757 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312f790>
2024-08-20 11:27:50,757 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,759 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb5d0>
2024-08-20 11:27:50,762 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,771 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a9ed0>
2024-08-20 11:27:50,779 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223d10>
2024-08-20 11:27:50,780 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223f10>
2024-08-20 11:27:50,782 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220c50>
2024-08-20 11:27:50,783 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221190>
2024-08-20 11:27:50,784 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,786 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b3ad0>
2024-08-20 11:27:50,792 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,794 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b0410>
2024-08-20 11:27:50,799 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,802 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3350>
2024-08-20 11:27:50,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,809 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311e1d0>
2024-08-20 11:27:50,818 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e450>
2024-08-20 11:27:50,820 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315e450>
2024-08-20 11:27:50,822 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163246cd0>
2024-08-20 11:27:50,827 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1632470d0>
2024-08-20 11:27:50,828 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,830 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631aab10>
2024-08-20 11:27:50,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,835 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7350>
2024-08-20 11:27:50,835 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,837 - INFO - Created relationship from nan to 是否为山梨醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315e890>
2024-08-20 11:27:50,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为山梨醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,844 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a8ed0>
2024-08-20 11:27:50,853 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c610>
2024-08-20 11:27:50,855 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312d490>
2024-08-20 11:27:50,856 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312fcd0>
2024-08-20 11:27:50,859 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163244e50>
2024-08-20 11:27:50,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,861 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163247fd0>
2024-08-20 11:27:50,864 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,865 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1110>
2024-08-20 11:27:50,866 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,867 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2550>
2024-08-20 11:27:50,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,887 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b3810>
2024-08-20 11:27:50,893 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163221c10>
2024-08-20 11:27:50,894 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7d50>
2024-08-20 11:27:50,895 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5e50>
2024-08-20 11:27:50,897 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7c10>
2024-08-20 11:27:50,897 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,899 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b11d0>
2024-08-20 11:27:50,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,902 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b07d0>
2024-08-20 11:27:50,903 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,904 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb0d0>
2024-08-20 11:27:50,906 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,921 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163221690>
2024-08-20 11:27:50,927 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ed90>
2024-08-20 11:27:50,928 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312cd90>
2024-08-20 11:27:50,929 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312c290>
2024-08-20 11:27:50,933 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f610>
2024-08-20 11:27:50,934 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,935 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631a8210>
2024-08-20 11:27:50,938 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,940 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163246490>
2024-08-20 11:27:50,940 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,942 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315d450>
2024-08-20 11:27:50,946 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,958 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e6cd0>
2024-08-20 11:27:50,963 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4750>
2024-08-20 11:27:50,965 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bf150>
2024-08-20 11:27:50,966 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311ea50>
2024-08-20 11:27:50,967 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631abfd0>
2024-08-20 11:27:50,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,968 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315f510>
2024-08-20 11:27:50,971 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:50,972 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312cd10>
2024-08-20 11:27:50,973 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:50,974 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c8d0>
2024-08-20 11:27:50,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:50,989 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163245290>
2024-08-20 11:27:50,993 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163246150>
2024-08-20 11:27:50,995 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220710>
2024-08-20 11:27:50,996 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632201d0>
2024-08-20 11:27:50,997 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8950>
2024-08-20 11:27:50,998 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:50,999 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6b90>
2024-08-20 11:27:51,003 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,004 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4410>
2024-08-20 11:27:51,004 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,005 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b1110>
2024-08-20 11:27:51,007 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,018 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b2450>
2024-08-20 11:27:51,024 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163222e10>
2024-08-20 11:27:51,025 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222690>
2024-08-20 11:27:51,027 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b0d10>
2024-08-20 11:27:51,028 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3490>
2024-08-20 11:27:51,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,030 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245c50>
2024-08-20 11:27:51,033 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,034 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163245cd0>
2024-08-20 11:27:51,035 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,037 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312d250>
2024-08-20 11:27:51,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,050 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312c190>
2024-08-20 11:27:51,056 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7e10>
2024-08-20 11:27:51,058 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e4850>
2024-08-20 11:27:51,059 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315fb50>
2024-08-20 11:27:51,060 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ab890>
2024-08-20 11:27:51,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,062 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bd250>
2024-08-20 11:27:51,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,066 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bc710>
2024-08-20 11:27:51,066 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,068 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315f590>
2024-08-20 11:27:51,072 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,084 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x162d803d0>
2024-08-20 11:27:51,091 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e62d0>
2024-08-20 11:27:51,092 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e4050>
2024-08-20 11:27:51,093 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e4690>
2024-08-20 11:27:51,093 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ab790>
2024-08-20 11:27:51,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,095 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ab450>
2024-08-20 11:27:51,098 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,099 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312fb50>
2024-08-20 11:27:51,099 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,100 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312edd0>
2024-08-20 11:27:51,105 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,106 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312f6d0>
2024-08-20 11:27:51,108 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220a90>
2024-08-20 11:27:51,109 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221dd0>
2024-08-20 11:27:51,110 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222390>
2024-08-20 11:27:51,112 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163246190>
2024-08-20 11:27:51,112 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,113 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312f690>
2024-08-20 11:27:51,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,117 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312cd50>
2024-08-20 11:27:51,117 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,118 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312fd10>
2024-08-20 11:27:51,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,137 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163222610>
2024-08-20 11:27:51,142 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220910>
2024-08-20 11:27:51,144 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221b10>
2024-08-20 11:27:51,145 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632218d0>
2024-08-20 11:27:51,146 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4b10>
2024-08-20 11:27:51,146 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,147 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6510>
2024-08-20 11:27:51,150 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,152 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e5e50>
2024-08-20 11:27:51,161 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,165 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x12fffb850>
2024-08-20 11:27:51,168 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,181 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aaf90>
2024-08-20 11:27:51,186 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163245e50>
2024-08-20 11:27:51,188 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163246350>
2024-08-20 11:27:51,190 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5bd0>
2024-08-20 11:27:51,195 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4850>
2024-08-20 11:27:51,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,196 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4d50>
2024-08-20 11:27:51,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,202 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e6550>
2024-08-20 11:27:51,202 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,204 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631a8290>
2024-08-20 11:27:51,206 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,219 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631ab450>
2024-08-20 11:27:51,224 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163222bd0>
2024-08-20 11:27:51,226 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221190>
2024-08-20 11:27:51,227 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223c10>
2024-08-20 11:27:51,228 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220490>
2024-08-20 11:27:51,229 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,230 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312f410>
2024-08-20 11:27:51,234 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,235 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312e990>
2024-08-20 11:27:51,235 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,236 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163247050>
2024-08-20 11:27:51,240 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,252 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163246450>
2024-08-20 11:27:51,257 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312fed0>
2024-08-20 11:27:51,258 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312ed90>
2024-08-20 11:27:51,260 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315e950>
2024-08-20 11:27:51,261 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ab450>
2024-08-20 11:27:51,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,263 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631aa710>
2024-08-20 11:27:51,267 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,268 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223090>
2024-08-20 11:27:51,268 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,269 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222a10>
2024-08-20 11:27:51,273 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,286 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163221190>
2024-08-20 11:27:51,291 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7bd0>
2024-08-20 11:27:51,292 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7810>
2024-08-20 11:27:51,293 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7290>
2024-08-20 11:27:51,297 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163245e90>
2024-08-20 11:27:51,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,299 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b3210>
2024-08-20 11:27:51,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,304 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b1fd0>
2024-08-20 11:27:51,305 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,306 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163246c50>
2024-08-20 11:27:51,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,321 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163223210>
2024-08-20 11:27:51,326 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163221d90>
2024-08-20 11:27:51,327 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220710>
2024-08-20 11:27:51,328 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220110>
2024-08-20 11:27:51,332 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6610>
2024-08-20 11:27:51,333 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,334 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4b10>
2024-08-20 11:27:51,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,338 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e40d0>
2024-08-20 11:27:51,339 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,340 - INFO - Created relationship from nan to 木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ab5d0>
2024-08-20 11:27:51,345 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,354 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631ab910>
2024-08-20 11:27:51,359 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b0890>
2024-08-20 11:27:51,360 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0490>
2024-08-20 11:27:51,361 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3ed0>
2024-08-20 11:27:51,363 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311fb90>
2024-08-20 11:27:51,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,365 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b1010>
2024-08-20 11:27:51,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,370 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b3150>
2024-08-20 11:27:51,370 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,371 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b0250>
2024-08-20 11:27:51,373 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,384 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631a8d50>
2024-08-20 11:27:51,390 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ead0>
2024-08-20 11:27:51,391 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7a50>
2024-08-20 11:27:51,392 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e53d0>
2024-08-20 11:27:51,393 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7590>
2024-08-20 11:27:51,394 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,395 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6e10>
2024-08-20 11:27:51,398 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,399 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223f10>
2024-08-20 11:27:51,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,401 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222410>
2024-08-20 11:27:51,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,413 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163222ed0>
2024-08-20 11:27:51,419 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311ea50>
2024-08-20 11:27:51,422 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e410>
2024-08-20 11:27:51,423 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163246850>
2024-08-20 11:27:51,424 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222d50>
2024-08-20 11:27:51,424 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,425 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163222950>
2024-08-20 11:27:51,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,428 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1632222d0>
2024-08-20 11:27:51,428 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,429 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221c90>
2024-08-20 11:27:51,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,442 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312d050>
2024-08-20 11:27:51,448 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4310>
2024-08-20 11:27:51,449 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5390>
2024-08-20 11:27:51,450 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e63d0>
2024-08-20 11:27:51,450 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aa890>
2024-08-20 11:27:51,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,452 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315eed0>
2024-08-20 11:27:51,454 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,454 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b0210>
2024-08-20 11:27:51,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,456 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b12d0>
2024-08-20 11:27:51,459 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,470 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311f450>
2024-08-20 11:27:51,476 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16315cb10>
2024-08-20 11:27:51,477 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315e5d0>
2024-08-20 11:27:51,478 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3dd0>
2024-08-20 11:27:51,479 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b1950>
2024-08-20 11:27:51,480 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,481 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6850>
2024-08-20 11:27:51,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,484 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e5390>
2024-08-20 11:27:51,485 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,486 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e57d0>
2024-08-20 11:27:51,489 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,491 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7290>
2024-08-20 11:27:51,494 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163221990>
2024-08-20 11:27:51,495 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220f10>
2024-08-20 11:27:51,496 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222690>
2024-08-20 11:27:51,497 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163245c50>
2024-08-20 11:27:51,497 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,499 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311f250>
2024-08-20 11:27:51,501 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,502 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311f650>
2024-08-20 11:27:51,503 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,504 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311ee50>
2024-08-20 11:27:51,507 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,522 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632443d0>
2024-08-20 11:27:51,528 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223490>
2024-08-20 11:27:51,529 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220990>
2024-08-20 11:27:51,531 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163221450>
2024-08-20 11:27:51,532 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220310>
2024-08-20 11:27:51,532 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,533 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221850>
2024-08-20 11:27:51,536 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,537 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7a90>
2024-08-20 11:27:51,540 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,542 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5950>
2024-08-20 11:27:51,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,551 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7250>
2024-08-20 11:27:51,557 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3650>
2024-08-20 11:27:51,558 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315f3d0>
2024-08-20 11:27:51,558 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b9e50>
2024-08-20 11:27:51,559 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bbdd0>
2024-08-20 11:27:51,559 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,560 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e7ad0>
2024-08-20 11:27:51,563 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,564 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4190>
2024-08-20 11:27:51,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,565 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e7990>
2024-08-20 11:27:51,568 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,574 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e6310>
2024-08-20 11:27:51,578 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b0bd0>
2024-08-20 11:27:51,579 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315c5d0>
2024-08-20 11:27:51,580 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312dad0>
2024-08-20 11:27:51,580 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163247650>
2024-08-20 11:27:51,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,581 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221c90>
2024-08-20 11:27:51,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,585 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221590>
2024-08-20 11:27:51,585 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,586 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223010>
2024-08-20 11:27:51,589 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,594 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311dbd0>
2024-08-20 11:27:51,599 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bb150>
2024-08-20 11:27:51,600 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bce50>
2024-08-20 11:27:51,601 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bacd0>
2024-08-20 11:27:51,602 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bb9d0>
2024-08-20 11:27:51,602 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,602 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163245e50>
2024-08-20 11:27:51,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,605 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311f490>
2024-08-20 11:27:51,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,606 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312fcd0>
2024-08-20 11:27:51,608 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,613 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b0250>
2024-08-20 11:27:51,618 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163222a90>
2024-08-20 11:27:51,618 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222d50>
2024-08-20 11:27:51,619 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220b90>
2024-08-20 11:27:51,620 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163221a50>
2024-08-20 11:27:51,620 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,620 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315fc10>
2024-08-20 11:27:51,623 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,624 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7850>
2024-08-20 11:27:51,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,625 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e6750>
2024-08-20 11:27:51,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,632 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631be250>
2024-08-20 11:27:51,636 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4690>
2024-08-20 11:27:51,637 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e55d0>
2024-08-20 11:27:51,638 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315c850>
2024-08-20 11:27:51,642 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315cad0>
2024-08-20 11:27:51,642 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,643 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163222e50>
2024-08-20 11:27:51,647 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,648 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163223150>
2024-08-20 11:27:51,649 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,650 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221ed0>
2024-08-20 11:27:51,654 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,660 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163223c90>
2024-08-20 11:27:51,664 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ccd0>
2024-08-20 11:27:51,665 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e790>
2024-08-20 11:27:51,665 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163244650>
2024-08-20 11:27:51,666 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b9190>
2024-08-20 11:27:51,666 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,666 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631beb10>
2024-08-20 11:27:51,669 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,671 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631667d0>
2024-08-20 11:27:51,671 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,672 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bedd0>
2024-08-20 11:27:51,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,679 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bf2d0>
2024-08-20 11:27:51,682 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7990>
2024-08-20 11:27:51,683 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5550>
2024-08-20 11:27:51,684 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7c90>
2024-08-20 11:27:51,685 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8c90>
2024-08-20 11:27:51,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,686 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8890>
2024-08-20 11:27:51,688 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,689 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b8850>
2024-08-20 11:27:51,689 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,690 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311d1d0>
2024-08-20 11:27:51,693 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,698 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311ed90>
2024-08-20 11:27:51,704 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2910>
2024-08-20 11:27:51,705 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1190>
2024-08-20 11:27:51,705 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3810>
2024-08-20 11:27:51,706 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315eed0>
2024-08-20 11:27:51,707 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,707 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b1590>
2024-08-20 11:27:51,709 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,709 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b22d0>
2024-08-20 11:27:51,710 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,710 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3350>
2024-08-20 11:27:51,713 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,718 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311f910>
2024-08-20 11:27:51,723 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311db90>
2024-08-20 11:27:51,724 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e6410>
2024-08-20 11:27:51,725 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7310>
2024-08-20 11:27:51,726 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5e50>
2024-08-20 11:27:51,726 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,727 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e7550>
2024-08-20 11:27:51,730 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,731 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bb4d0>
2024-08-20 11:27:51,732 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,733 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba790>
2024-08-20 11:27:51,734 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,741 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bd1d0>
2024-08-20 11:27:51,746 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aa810>
2024-08-20 11:27:51,747 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631aaf90>
2024-08-20 11:27:51,748 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315f810>
2024-08-20 11:27:51,748 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8350>
2024-08-20 11:27:51,748 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,749 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bb490>
2024-08-20 11:27:51,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,753 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bc790>
2024-08-20 11:27:51,753 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,754 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bedd0>
2024-08-20 11:27:51,756 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,761 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e4950>
2024-08-20 11:27:51,764 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e44d0>
2024-08-20 11:27:51,765 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e6410>
2024-08-20 11:27:51,766 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311f810>
2024-08-20 11:27:51,766 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f150>
2024-08-20 11:27:51,767 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,767 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311cb10>
2024-08-20 11:27:51,770 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,771 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b0110>
2024-08-20 11:27:51,772 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,773 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3bd0>
2024-08-20 11:27:51,776 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,778 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631abed0>
2024-08-20 11:27:51,780 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311fcd0>
2024-08-20 11:27:51,781 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e7d0>
2024-08-20 11:27:51,782 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1190>
2024-08-20 11:27:51,783 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3310>
2024-08-20 11:27:51,783 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,784 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b0e50>
2024-08-20 11:27:51,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,786 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7a10>
2024-08-20 11:27:51,786 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,787 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e6750>
2024-08-20 11:27:51,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,795 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7290>
2024-08-20 11:27:51,800 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bf210>
2024-08-20 11:27:51,801 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b9d50>
2024-08-20 11:27:51,802 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bb4d0>
2024-08-20 11:27:51,803 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315e5d0>
2024-08-20 11:27:51,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,804 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x162e76550>
2024-08-20 11:27:51,807 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,809 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312f410>
2024-08-20 11:27:51,811 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,812 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631a9ad0>
2024-08-20 11:27:51,815 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,821 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bf210>
2024-08-20 11:27:51,826 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e78d0>
2024-08-20 11:27:51,827 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5dd0>
2024-08-20 11:27:51,828 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5ad0>
2024-08-20 11:27:51,829 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5510>
2024-08-20 11:27:51,829 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,830 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b87d0>
2024-08-20 11:27:51,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,834 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ba210>
2024-08-20 11:27:51,835 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,836 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9a90>
2024-08-20 11:27:51,838 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,843 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b1410>
2024-08-20 11:27:51,849 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d390>
2024-08-20 11:27:51,850 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f8d0>
2024-08-20 11:27:51,850 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e450>
2024-08-20 11:27:51,851 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e790>
2024-08-20 11:27:51,851 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,852 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312ee50>
2024-08-20 11:27:51,855 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,856 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312c2d0>
2024-08-20 11:27:51,856 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,857 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x10782c250>
2024-08-20 11:27:51,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,864 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b3110>
2024-08-20 11:27:51,867 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c550>
2024-08-20 11:27:51,867 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315d710>
2024-08-20 11:27:51,868 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e63d0>
2024-08-20 11:27:51,872 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6950>
2024-08-20 11:27:51,873 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,874 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6850>
2024-08-20 11:27:51,877 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,878 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b8590>
2024-08-20 11:27:51,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,880 - INFO - Created relationship from nan to 气动泵（气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b8c90>
2024-08-20 11:27:51,883 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵（气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,889 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bc950>
2024-08-20 11:27:51,893 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632460d0>
2024-08-20 11:27:51,894 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163245650>
2024-08-20 11:27:51,895 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aa210>
2024-08-20 11:27:51,896 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bcb50>
2024-08-20 11:27:51,896 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,897 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e7890>
2024-08-20 11:27:51,900 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,901 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e6810>
2024-08-20 11:27:51,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,902 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e6990>
2024-08-20 11:27:51,905 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,911 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7750>
2024-08-20 11:27:51,915 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311e5d0>
2024-08-20 11:27:51,916 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8d10>
2024-08-20 11:27:51,916 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631ba550>
2024-08-20 11:27:51,917 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ba350>
2024-08-20 11:27:51,917 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,918 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:51,921 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,922 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b2950>
2024-08-20 11:27:51,922 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,923 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312cc50>
2024-08-20 11:27:51,925 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,932 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163246050>
2024-08-20 11:27:51,936 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bbb90>
2024-08-20 11:27:51,937 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1790>
2024-08-20 11:27:51,938 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b0150>
2024-08-20 11:27:51,938 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b0d10>
2024-08-20 11:27:51,938 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,939 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311dd90>
2024-08-20 11:27:51,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,941 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311e190>
2024-08-20 11:27:51,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,942 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312f350>
2024-08-20 11:27:51,945 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,951 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312d210>
2024-08-20 11:27:51,956 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7850>
2024-08-20 11:27:51,957 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e6050>
2024-08-20 11:27:51,958 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bc790>
2024-08-20 11:27:51,959 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bd850>
2024-08-20 11:27:51,959 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,960 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163244090>
2024-08-20 11:27:51,963 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,964 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1632235d0>
2024-08-20 11:27:51,965 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,965 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163245cd0>
2024-08-20 11:27:51,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,969 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e6e90>
2024-08-20 11:27:51,974 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5150>
2024-08-20 11:27:51,975 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e79d0>
2024-08-20 11:27:51,975 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631abe90>
2024-08-20 11:27:51,976 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c750>
2024-08-20 11:27:51,976 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,977 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312ced0>
2024-08-20 11:27:51,980 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:51,981 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311c850>
2024-08-20 11:27:51,981 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:51,982 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bca90>
2024-08-20 11:27:51,984 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:51,991 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16315f910>
2024-08-20 11:27:51,995 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3150>
2024-08-20 11:27:51,995 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223f50>
2024-08-20 11:27:51,996 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1632204d0>
2024-08-20 11:27:51,997 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220c10>
2024-08-20 11:27:51,998 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:51,998 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311ca50>
2024-08-20 11:27:52,001 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,002 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311c490>
2024-08-20 11:27:52,002 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,003 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2810>
2024-08-20 11:27:52,006 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,007 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b1750>
2024-08-20 11:27:52,009 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312cc50>
2024-08-20 11:27:52,010 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312c910>
2024-08-20 11:27:52,011 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aabd0>
2024-08-20 11:27:52,011 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bfd50>
2024-08-20 11:27:52,011 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,012 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e7350>
2024-08-20 11:27:52,015 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,016 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e75d0>
2024-08-20 11:27:52,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,017 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e6b50>
2024-08-20 11:27:52,018 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,026 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163246a50>
2024-08-20 11:27:52,030 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223b90>
2024-08-20 11:27:52,031 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163223890>
2024-08-20 11:27:52,035 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163247c10>
2024-08-20 11:27:52,036 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5690>
2024-08-20 11:27:52,037 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,038 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e7bd0>
2024-08-20 11:27:52,042 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,042 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e6b90>
2024-08-20 11:27:52,045 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,046 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e48d0>
2024-08-20 11:27:52,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,057 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312c450>
2024-08-20 11:27:52,063 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631becd0>
2024-08-20 11:27:52,063 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b02d0>
2024-08-20 11:27:52,064 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1dd0>
2024-08-20 11:27:52,065 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b84d0>
2024-08-20 11:27:52,065 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,066 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311f9d0>
2024-08-20 11:27:52,069 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,070 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311f5d0>
2024-08-20 11:27:52,070 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,071 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222490>
2024-08-20 11:27:52,074 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,083 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632233d0>
2024-08-20 11:27:52,090 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f150>
2024-08-20 11:27:52,091 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311c4d0>
2024-08-20 11:27:52,091 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b2690>
2024-08-20 11:27:52,092 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2a10>
2024-08-20 11:27:52,093 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,094 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bd390>
2024-08-20 11:27:52,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,097 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631be350>
2024-08-20 11:27:52,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,098 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312eb10>
2024-08-20 11:27:52,101 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,111 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312f450>
2024-08-20 11:27:52,117 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4350>
2024-08-20 11:27:52,118 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5010>
2024-08-20 11:27:52,119 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222c10>
2024-08-20 11:27:52,120 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220cd0>
2024-08-20 11:27:52,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,122 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163220ad0>
2024-08-20 11:27:52,124 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,126 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631642d0>
2024-08-20 11:27:52,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,128 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163223110>
2024-08-20 11:27:52,132 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,142 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163222810>
2024-08-20 11:27:52,148 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632219d0>
2024-08-20 11:27:52,149 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220a10>
2024-08-20 11:27:52,150 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bb810>
2024-08-20 11:27:52,155 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8c90>
2024-08-20 11:27:52,155 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,157 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bb890>
2024-08-20 11:27:52,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,161 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4f10>
2024-08-20 11:27:52,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,163 - INFO - Created relationship from nan to 边料拆包机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5250>
2024-08-20 11:27:52,168 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '边料拆包机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,178 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7ed0>
2024-08-20 11:27:52,184 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632470d0>
2024-08-20 11:27:52,185 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163245010>
2024-08-20 11:27:52,186 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e210>
2024-08-20 11:27:52,188 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c2d0>
2024-08-20 11:27:52,189 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,190 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163247d10>
2024-08-20 11:27:52,193 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,194 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163244850>
2024-08-20 11:27:52,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,196 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163247090>
2024-08-20 11:27:52,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,209 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e6d50>
2024-08-20 11:27:52,216 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4b50>
2024-08-20 11:27:52,217 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5090>
2024-08-20 11:27:52,217 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bb150>
2024-08-20 11:27:52,218 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b9810>
2024-08-20 11:27:52,218 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,219 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bbfd0>
2024-08-20 11:27:52,222 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,223 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:52,223 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,224 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222ed0>
2024-08-20 11:27:52,226 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,231 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163221c90>
2024-08-20 11:27:52,237 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c810>
2024-08-20 11:27:52,238 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e310>
2024-08-20 11:27:52,239 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312e950>
2024-08-20 11:27:52,239 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312fa90>
2024-08-20 11:27:52,239 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,240 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312eed0>
2024-08-20 11:27:52,243 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,244 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222450>
2024-08-20 11:27:52,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,245 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632201d0>
2024-08-20 11:27:52,248 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,253 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163223150>
2024-08-20 11:27:52,257 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bbb90>
2024-08-20 11:27:52,258 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631ba510>
2024-08-20 11:27:52,259 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5e50>
2024-08-20 11:27:52,260 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7cd0>
2024-08-20 11:27:52,260 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,261 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e50d0>
2024-08-20 11:27:52,264 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,265 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e44d0>
2024-08-20 11:27:52,265 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,266 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632455d0>
2024-08-20 11:27:52,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,275 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632467d0>
2024-08-20 11:27:52,279 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163245b50>
2024-08-20 11:27:52,280 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e40d0>
2024-08-20 11:27:52,281 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5410>
2024-08-20 11:27:52,281 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5b10>
2024-08-20 11:27:52,282 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,282 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4890>
2024-08-20 11:27:52,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,286 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b93d0>
2024-08-20 11:27:52,286 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,287 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b86d0>
2024-08-20 11:27:52,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,296 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bbb10>
2024-08-20 11:27:52,301 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632233d0>
2024-08-20 11:27:52,302 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632237d0>
2024-08-20 11:27:52,303 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312cd90>
2024-08-20 11:27:52,304 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312ff90>
2024-08-20 11:27:52,305 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,305 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311c490>
2024-08-20 11:27:52,307 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,308 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311dbd0>
2024-08-20 11:27:52,308 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,309 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632236d0>
2024-08-20 11:27:52,312 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,313 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163223390>
2024-08-20 11:27:52,315 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163222b10>
2024-08-20 11:27:52,316 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bafd0>
2024-08-20 11:27:52,316 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bbd10>
2024-08-20 11:27:52,317 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8890>
2024-08-20 11:27:52,317 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,318 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312de90>
2024-08-20 11:27:52,321 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,322 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312e990>
2024-08-20 11:27:52,322 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,323 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e5890>
2024-08-20 11:27:52,326 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,333 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e5450>
2024-08-20 11:27:52,337 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311f010>
2024-08-20 11:27:52,338 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e490>
2024-08-20 11:27:52,341 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16311f210>
2024-08-20 11:27:52,345 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bdf50>
2024-08-20 11:27:52,346 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,347 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311f0d0>
2024-08-20 11:27:52,351 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,351 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311c990>
2024-08-20 11:27:52,354 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,356 - INFO - Created relationship from nan to 加热：蜡池加热、热熔胶池加热等 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163247190>
2024-08-20 11:27:52,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热：蜡池加热、热熔胶池加热等'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,367 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e5410>
2024-08-20 11:27:52,374 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7250>
2024-08-20 11:27:52,375 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5fd0>
2024-08-20 11:27:52,375 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b95d0>
2024-08-20 11:27:52,376 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631ba790>
2024-08-20 11:27:52,376 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,377 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312e8d0>
2024-08-20 11:27:52,380 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,381 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312f690>
2024-08-20 11:27:52,381 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,383 - INFO - Created relationship from nan to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222710>
2024-08-20 11:27:52,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,392 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163220850>
2024-08-20 11:27:52,398 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631be690>
2024-08-20 11:27:52,399 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631a8ed0>
2024-08-20 11:27:52,400 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bdad0>
2024-08-20 11:27:52,405 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163220050>
2024-08-20 11:27:52,405 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,406 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221150>
2024-08-20 11:27:52,408 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,409 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220bd0>
2024-08-20 11:27:52,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,411 - INFO - Created relationship from nan to 需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163222410>
2024-08-20 11:27:52,416 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,424 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631ba250>
2024-08-20 11:27:52,429 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312f690>
2024-08-20 11:27:52,429 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312f910>
2024-08-20 11:27:52,430 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e44d0>
2024-08-20 11:27:52,433 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7610>
2024-08-20 11:27:52,433 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,434 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4c10>
2024-08-20 11:27:52,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,439 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163247050>
2024-08-20 11:27:52,439 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,440 - INFO - Created relationship from nan to 包装机（所有设备） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311de50>
2024-08-20 11:27:52,444 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装机（所有设备）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,446 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aa790>
2024-08-20 11:27:52,458 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311efd0>
2024-08-20 11:27:52,464 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e7c90>
2024-08-20 11:27:52,465 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5410>
2024-08-20 11:27:52,468 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e63d0>
2024-08-20 11:27:52,468 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,469 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5d10>
2024-08-20 11:27:52,473 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,473 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312e850>
2024-08-20 11:27:52,473 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,474 - INFO - Created relationship from nan to 小包装除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16312c650>
2024-08-20 11:27:52,478 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '小包装除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,484 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312d010>
2024-08-20 11:27:52,488 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8250>
2024-08-20 11:27:52,488 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222b10>
2024-08-20 11:27:52,489 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163223ed0>
2024-08-20 11:27:52,493 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222450>
2024-08-20 11:27:52,493 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,494 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631abdd0>
2024-08-20 11:27:52,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,498 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315d350>
2024-08-20 11:27:52,499 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,499 - INFO - Created relationship from nan to 包装产线 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aa9d0>
2024-08-20 11:27:52,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装产线'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,509 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b8ed0>
2024-08-20 11:27:52,513 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632236d0>
2024-08-20 11:27:52,514 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222990>
2024-08-20 11:27:52,515 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163221150>
2024-08-20 11:27:52,519 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163222d10>
2024-08-20 11:27:52,519 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,520 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16312e090>
2024-08-20 11:27:52,524 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,524 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16312e3d0>
2024-08-20 11:27:52,525 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,526 - INFO - Created relationship from nan to 手工操作，不停机，不影响正常生产 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bc050>
2024-08-20 11:27:52,531 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '手工操作，不停机，不影响正常生产'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,541 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7850>
2024-08-20 11:27:52,547 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7b90>
2024-08-20 11:27:52,548 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315e5d0>
2024-08-20 11:27:52,550 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1250>
2024-08-20 11:27:52,555 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2550>
2024-08-20 11:27:52,555 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,556 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315cdd0>
2024-08-20 11:27:52,559 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,560 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163246e50>
2024-08-20 11:27:52,561 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,563 - INFO - Created relationship from nan to 加热设备：蜡池加热、热熔胶池加热等，约20分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e70d0>
2024-08-20 11:27:52,565 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热设备：蜡池加热、热熔胶池加热等，约20分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,577 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e4dd0>
2024-08-20 11:27:52,583 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311e450>
2024-08-20 11:27:52,584 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312d690>
2024-08-20 11:27:52,586 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f590>
2024-08-20 11:27:52,590 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e910>
2024-08-20 11:27:52,591 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,593 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163223d90>
2024-08-20 11:27:52,595 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,596 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163220150>
2024-08-20 11:27:52,596 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,599 - INFO - Created relationship from nan to 造盒机、包装机、裂胶机、折胶台 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bafd0>
2024-08-20 11:27:52,603 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '造盒机、包装机、裂胶机、折胶台'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,614 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb910>
2024-08-20 11:27:52,618 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b0710>
2024-08-20 11:27:52,620 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b27d0>
2024-08-20 11:27:52,621 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b0490>
2024-08-20 11:27:52,623 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b0f90>
2024-08-20 11:27:52,623 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,624 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ab350>
2024-08-20 11:27:52,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,628 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b9bd0>
2024-08-20 11:27:52,629 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,630 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba090>
2024-08-20 11:27:52,634 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,646 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312ea90>
2024-08-20 11:27:52,651 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1632236d0>
2024-08-20 11:27:52,652 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222d50>
2024-08-20 11:27:52,653 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163220c10>
2024-08-20 11:27:52,655 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5490>
2024-08-20 11:27:52,655 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,657 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e61d0>
2024-08-20 11:27:52,661 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,661 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4490>
2024-08-20 11:27:52,662 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,664 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632466d0>
2024-08-20 11:27:52,668 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,671 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631be110>
2024-08-20 11:27:52,677 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e6b90>
2024-08-20 11:27:52,678 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e5390>
2024-08-20 11:27:52,678 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7a50>
2024-08-20 11:27:52,680 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d1d0>
2024-08-20 11:27:52,680 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,681 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163221890>
2024-08-20 11:27:52,684 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,685 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1632233d0>
2024-08-20 11:27:52,686 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,687 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220310>
2024-08-20 11:27:52,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,704 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16312fa90>
2024-08-20 11:27:52,711 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b9490>
2024-08-20 11:27:52,713 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b8590>
2024-08-20 11:27:52,714 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b87d0>
2024-08-20 11:27:52,715 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b1290>
2024-08-20 11:27:52,716 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,718 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163165010>
2024-08-20 11:27:52,722 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,724 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163165c90>
2024-08-20 11:27:52,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,726 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e4510>
2024-08-20 11:27:52,730 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,731 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e48d0>
2024-08-20 11:27:52,733 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e59d0>
2024-08-20 11:27:52,734 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b1ed0>
2024-08-20 11:27:52,735 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b2110>
2024-08-20 11:27:52,736 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b26d0>
2024-08-20 11:27:52,736 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,738 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315d810>
2024-08-20 11:27:52,742 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,743 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315c750>
2024-08-20 11:27:52,743 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,744 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b9050>
2024-08-20 11:27:52,747 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,761 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb050>
2024-08-20 11:27:52,767 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bdad0>
2024-08-20 11:27:52,768 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bce50>
2024-08-20 11:27:52,773 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163247dd0>
2024-08-20 11:27:52,778 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163247d10>
2024-08-20 11:27:52,778 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,780 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631a9090>
2024-08-20 11:27:52,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,786 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ab490>
2024-08-20 11:27:52,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,792 - INFO - Created relationship from nan to 系统自动加热：几个加热版——无数据采集 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b96d0>
2024-08-20 11:27:52,797 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '系统自动加热：几个加热版——无数据采集'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,815 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631badd0>
2024-08-20 11:27:52,821 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bedd0>
2024-08-20 11:27:52,823 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315cf10>
2024-08-20 11:27:52,824 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b30d0>
2024-08-20 11:27:52,825 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3410>
2024-08-20 11:27:52,825 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,827 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b0b10>
2024-08-20 11:27:52,831 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,831 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e7390>
2024-08-20 11:27:52,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,834 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e7550>
2024-08-20 11:27:52,837 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,853 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e4e50>
2024-08-20 11:27:52,859 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163223d50>
2024-08-20 11:27:52,861 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222f50>
2024-08-20 11:27:52,862 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163246950>
2024-08-20 11:27:52,863 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163246610>
2024-08-20 11:27:52,863 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,865 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b1590>
2024-08-20 11:27:52,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,868 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b3590>
2024-08-20 11:27:52,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,869 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b0c50>
2024-08-20 11:27:52,871 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,883 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e6e10>
2024-08-20 11:27:52,887 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e4850>
2024-08-20 11:27:52,889 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315f610>
2024-08-20 11:27:52,890 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315f910>
2024-08-20 11:27:52,894 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b9050>
2024-08-20 11:27:52,894 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,896 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631bb7d0>
2024-08-20 11:27:52,900 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,900 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631bf210>
2024-08-20 11:27:52,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,903 - INFO - Created relationship from nan to 皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aac10>
2024-08-20 11:27:52,906 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,915 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1632227d0>
2024-08-20 11:27:52,921 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631baf50>
2024-08-20 11:27:52,922 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631bbd90>
2024-08-20 11:27:52,922 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b9750>
2024-08-20 11:27:52,927 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631aab10>
2024-08-20 11:27:52,928 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,929 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631a8f50>
2024-08-20 11:27:52,931 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,932 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16315f810>
2024-08-20 11:27:52,932 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,934 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e59d0>
2024-08-20 11:27:52,939 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,945 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631e7b50>
2024-08-20 11:27:52,951 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b07d0>
2024-08-20 11:27:52,952 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:52,952 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b0c10>
2024-08-20 11:27:52,954 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x163246c10>
2024-08-20 11:27:52,954 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,955 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163222050>
2024-08-20 11:27:52,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,958 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222c10>
2024-08-20 11:27:52,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,959 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2e90>
2024-08-20 11:27:52,962 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:52,973 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b1750>
2024-08-20 11:27:52,979 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e57d0>
2024-08-20 11:27:52,980 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e4d90>
2024-08-20 11:27:52,981 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e4b50>
2024-08-20 11:27:52,984 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16315f310>
2024-08-20 11:27:52,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:52,986 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163246b50>
2024-08-20 11:27:52,989 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:52,990 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163247c10>
2024-08-20 11:27:52,991 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:52,993 - INFO - Created relationship from nan to 20分钟左右 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631aacd0>
2024-08-20 11:27:52,998 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '20分钟左右'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,007 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb350>
2024-08-20 11:27:53,011 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220650>
2024-08-20 11:27:53,012 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163220dd0>
2024-08-20 11:27:53,014 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163222c50>
2024-08-20 11:27:53,015 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16311c790>
2024-08-20 11:27:53,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,017 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163220b10>
2024-08-20 11:27:53,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,021 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221190>
2024-08-20 11:27:53,022 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,023 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163220810>
2024-08-20 11:27:53,026 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,036 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631aaf90>
2024-08-20 11:27:53,041 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8090>
2024-08-20 11:27:53,042 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16315f650>
2024-08-20 11:27:53,044 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315db50>
2024-08-20 11:27:53,045 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5650>
2024-08-20 11:27:53,045 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,047 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e75d0>
2024-08-20 11:27:53,050 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,051 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e5ad0>
2024-08-20 11:27:53,052 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,053 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163245c50>
2024-08-20 11:27:53,055 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,068 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b0590>
2024-08-20 11:27:53,073 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16311d050>
2024-08-20 11:27:53,074 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311e610>
2024-08-20 11:27:53,075 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e5350>
2024-08-20 11:27:53,077 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5310>
2024-08-20 11:27:53,077 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,078 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4610>
2024-08-20 11:27:53,081 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,082 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163246950>
2024-08-20 11:27:53,082 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,083 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1632440d0>
2024-08-20 11:27:53,086 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,107 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16315ff90>
2024-08-20 11:27:53,111 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b2c10>
2024-08-20 11:27:53,112 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b11d0>
2024-08-20 11:27:53,112 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631aa810>
2024-08-20 11:27:53,113 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bb890>
2024-08-20 11:27:53,113 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,115 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8750>
2024-08-20 11:27:53,117 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,118 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163221190>
2024-08-20 11:27:53,118 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,119 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163221790>
2024-08-20 11:27:53,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,127 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311df90>
2024-08-20 11:27:53,132 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163222690>
2024-08-20 11:27:53,133 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163221490>
2024-08-20 11:27:53,133 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163171f50>
2024-08-20 11:27:53,134 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b8750>
2024-08-20 11:27:53,134 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,135 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631ba010>
2024-08-20 11:27:53,137 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,138 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b3510>
2024-08-20 11:27:53,138 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,139 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b3350>
2024-08-20 11:27:53,142 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,148 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b0350>
2024-08-20 11:27:53,153 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163244b10>
2024-08-20 11:27:53,154 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631e4610>
2024-08-20 11:27:53,155 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e7e90>
2024-08-20 11:27:53,155 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5dd0>
2024-08-20 11:27:53,156 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,156 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311e690>
2024-08-20 11:27:53,158 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,159 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1630b6650>
2024-08-20 11:27:53,159 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,160 - INFO - Created relationship from nan to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16315efd0>
2024-08-20 11:27:53,163 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,207 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16311ee50>
2024-08-20 11:27:53,210 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163244890>
2024-08-20 11:27:53,211 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1632464d0>
2024-08-20 11:27:53,212 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b1c10>
2024-08-20 11:27:53,215 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3510>
2024-08-20 11:27:53,215 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,216 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5150>
2024-08-20 11:27:53,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,220 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e4e50>
2024-08-20 11:27:53,220 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,221 - INFO - Created relationship from nan to 设备管理系统-可忽略能耗，追溯码 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631e6010>
2024-08-20 11:27:53,226 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '设备管理系统-可忽略能耗，追溯码'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,231 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb350>
2024-08-20 11:27:53,235 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163220d10>
2024-08-20 11:27:53,236 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163222b10>
2024-08-20 11:27:53,237 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312c210>
2024-08-20 11:27:53,242 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312fa90>
2024-08-20 11:27:53,242 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,243 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b8d90>
2024-08-20 11:27:53,245 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,246 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631ba550>
2024-08-20 11:27:53,247 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,248 - INFO - Created relationship from nan to 大箱喷码机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631ba950>
2024-08-20 11:27:53,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '大箱喷码机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,253 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163223e50>
2024-08-20 11:27:53,258 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b1c10>
2024-08-20 11:27:53,259 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b2350>
2024-08-20 11:27:53,260 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x163247c10>
2024-08-20 11:27:53,263 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e5050>
2024-08-20 11:27:53,263 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,264 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e5b10>
2024-08-20 11:27:53,267 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,268 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e5c10>
2024-08-20 11:27:53,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,270 - INFO - Created relationship from nan to 转箭过程待机，无其他能源消耗 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311e810>
2024-08-20 11:27:53,274 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '转箭过程待机，无其他能源消耗'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,279 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x16315dad0>
2024-08-20 11:27:53,284 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312d710>
2024-08-20 11:27:53,285 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x163166150>
2024-08-20 11:27:53,286 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16312f990>
2024-08-20 11:27:53,287 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312c810>
2024-08-20 11:27:53,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,288 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16315f3d0>
2024-08-20 11:27:53,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,290 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311d9d0>
2024-08-20 11:27:53,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,291 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311dc90>
2024-08-20 11:27:53,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,299 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163245910>
2024-08-20 11:27:53,305 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b1d10>
2024-08-20 11:27:53,306 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b0c50>
2024-08-20 11:27:53,307 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631e6510>
2024-08-20 11:27:53,307 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e48d0>
2024-08-20 11:27:53,308 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,309 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e6750>
2024-08-20 11:27:53,312 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,313 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163222750>
2024-08-20 11:27:53,314 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,315 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631bb1d0>
2024-08-20 11:27:53,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,325 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bb390>
2024-08-20 11:27:53,330 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bb0d0>
2024-08-20 11:27:53,331 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b92d0>
2024-08-20 11:27:53,332 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631bb3d0>
2024-08-20 11:27:53,333 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631e7d50>
2024-08-20 11:27:53,333 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,334 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631e4f10>
2024-08-20 11:27:53,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,338 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631e71d0>
2024-08-20 11:27:53,338 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,339 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b2710>
2024-08-20 11:27:53,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,346 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631b2e50>
2024-08-20 11:27:53,352 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x163244050>
2024-08-20 11:27:53,353 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16311f650>
2024-08-20 11:27:53,354 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315f610>
2024-08-20 11:27:53,355 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x16312e390>
2024-08-20 11:27:53,355 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,356 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x163167150>
2024-08-20 11:27:53,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,361 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x163165dd0>
2024-08-20 11:27:53,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,362 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x163167a50>
2024-08-20 11:27:53,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,371 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x163169d90>
2024-08-20 11:27:53,377 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x16312d850>
2024-08-20 11:27:53,378 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x16312fa90>
2024-08-20 11:27:53,379 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x16315c510>
2024-08-20 11:27:53,380 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x12fa24110>
2024-08-20 11:27:53,380 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,381 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x16311efd0>
2024-08-20 11:27:53,384 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,385 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x16311ebd0>
2024-08-20 11:27:53,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,386 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x16311ccd0>
2024-08-20 11:27:53,390 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,396 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x1631bbcd0>
2024-08-20 11:27:53,402 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x1631b3b50>
2024-08-20 11:27:53,403 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x1631b3fd0>
2024-08-20 11:27:53,404 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x1631b3b90>
2024-08-20 11:27:53,405 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x1631bc950>
2024-08-20 11:27:53,405 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 11:27:53,406 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x1631b1190>
2024-08-20 11:27:53,409 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 11:27:53,410 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x1631b30d0>
2024-08-20 11:27:53,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 11:27:53,411 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x1631b38d0>
2024-08-20 11:27:53,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 11:27:53,419 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b86d0>
2024-08-20 11:27:53,424 - INFO - Created relationship from Extruder to 挤压机螺杆转速 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631bbb90>
2024-08-20 11:27:53,426 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机螺杆转速'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,430 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311e250>
2024-08-20 11:27:53,434 - INFO - Created relationship from Extruder to 挤压机料位高低 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311cad0>
2024-08-20 11:27:53,436 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机料位高低'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,440 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x162e76e50>
2024-08-20 11:27:53,443 - INFO - Created relationship from Extruder to 挤压机出口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312ec10>
2024-08-20 11:27:53,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机出口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,450 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312ed90>
2024-08-20 11:27:53,455 - INFO - Created relationship from Extruder to 挤压机夹套温度上 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163167810>
2024-08-20 11:27:53,458 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,463 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631be690>
2024-08-20 11:27:53,468 - INFO - Created relationship from Extruder to 挤压机夹套温度下 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e5dd0>
2024-08-20 11:27:53,470 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,475 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7810>
2024-08-20 11:27:53,481 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163169e50>
2024-08-20 11:27:53,484 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,489 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312f450>
2024-08-20 11:27:53,492 - INFO - Created relationship from Extruder to 挤压机压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312e0d0>
2024-08-20 11:27:53,495 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,501 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163164f10>
2024-08-20 11:27:53,506 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度1 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16315fa90>
2024-08-20 11:27:53,510 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度1'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,515 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311e410>
2024-08-20 11:27:53,518 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度2 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311dfd0>
2024-08-20 11:27:53,521 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度2'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,527 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311ccd0>
2024-08-20 11:27:53,533 - INFO - Created relationship from Extruder to 挤压机夹套温度上（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b86d0>
2024-08-20 11:27:53,535 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,541 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b2690>
2024-08-20 11:27:53,546 - INFO - Created relationship from Extruder to 挤压机夹套温度下（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b0e10>
2024-08-20 11:27:53,549 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,555 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e5c90>
2024-08-20 11:27:53,559 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e4390>
2024-08-20 11:27:53,563 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,572 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163223ed0>
2024-08-20 11:27:53,578 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b9490>
2024-08-20 11:27:53,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,589 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7fd0>
2024-08-20 11:27:53,593 - INFO - Created relationship from Extruder to 挤压机入口温度_Max with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e4a50>
2024-08-20 11:27:53,595 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Max'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,603 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7490>
2024-08-20 11:27:53,608 - INFO - Created relationship from Extruder to 挤压机入口温度_Min with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b1d10>
2024-08-20 11:27:53,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Min'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,619 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:53,623 - INFO - Created relationship from Extruder to 挤压机入口温度_Avg with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311d010>
2024-08-20 11:27:53,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Avg'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,634 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311e190>
2024-08-20 11:27:53,638 - INFO - Created relationship from Rolling Powder to 表面粉下表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16315c510>
2024-08-20 11:27:53,640 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,648 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163167390>
2024-08-20 11:27:53,653 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312ce50>
2024-08-20 11:27:53,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,664 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312ff10>
2024-08-20 11:27:53,669 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163221750>
2024-08-20 11:27:53,671 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,678 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163223190>
2024-08-20 11:27:53,682 - INFO - Created relationship from Rolling Powder to 表面粉上表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163166890>
2024-08-20 11:27:53,686 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,693 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315d790>
2024-08-20 11:27:53,698 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311eb10>
2024-08-20 11:27:53,701 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,708 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311c9d0>
2024-08-20 11:27:53,713 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312e690>
2024-08-20 11:27:53,717 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,724 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d6d0>
2024-08-20 11:27:53,729 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e4810>
2024-08-20 11:27:53,733 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,741 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e5190>
2024-08-20 11:27:53,746 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e5790>
2024-08-20 11:27:53,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,759 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b2690>
2024-08-20 11:27:53,764 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b9910>
2024-08-20 11:27:53,768 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,776 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163220ed0>
2024-08-20 11:27:53,781 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1632229d0>
2024-08-20 11:27:53,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,794 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163222790>
2024-08-20 11:27:53,799 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163220b10>
2024-08-20 11:27:53,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,811 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163221090>
2024-08-20 11:27:53,816 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮带（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b2610>
2024-08-20 11:27:53,820 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮带（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,827 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b2e90>
2024-08-20 11:27:53,830 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e7090>
2024-08-20 11:27:53,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,840 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e4310>
2024-08-20 11:27:53,845 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b8450>
2024-08-20 11:27:53,849 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,856 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d250>
2024-08-20 11:27:53,864 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312da50>
2024-08-20 11:27:53,869 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,878 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311fb10>
2024-08-20 11:27:53,882 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311c690>
2024-08-20 11:27:53,885 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,894 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315d350>
2024-08-20 11:27:53,899 - INFO - Created relationship from Bull Roller to 大辊速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631a99d0>
2024-08-20 11:27:53,903 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,912 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312f450>
2024-08-20 11:27:53,916 - INFO - Created relationship from Bull Roller to 大辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312fc90>
2024-08-20 11:27:53,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,928 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d790>
2024-08-20 11:27:53,931 - INFO - Created relationship from Bull Roller to 大辊速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311d950>
2024-08-20 11:27:53,934 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,940 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311f750>
2024-08-20 11:27:53,944 - INFO - Created relationship from Bull Roller to 大辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311db10>
2024-08-20 11:27:53,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,953 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7010>
2024-08-20 11:27:53,955 - INFO - Created relationship from 1st Roller to 1号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e7bd0>
2024-08-20 11:27:53,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,964 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b1010>
2024-08-20 11:27:53,969 - INFO - Created relationship from 1st Roller to 1号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b94d0>
2024-08-20 11:27:53,972 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,978 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631bab90>
2024-08-20 11:27:53,983 - INFO - Created relationship from 1st Roller to 1号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163221ed0>
2024-08-20 11:27:53,986 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:53,993 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163220090>
2024-08-20 11:27:53,998 - INFO - Created relationship from 1st Roller to 1号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631aa250>
2024-08-20 11:27:54,001 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,008 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b8d90>
2024-08-20 11:27:54,014 - INFO - Created relationship from 2nd Roller to 2号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631aa450>
2024-08-20 11:27:54,017 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,019 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b3fd0>
2024-08-20 11:27:54,024 - INFO - Created relationship from 2nd Roller to 2号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163220c10>
2024-08-20 11:27:54,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,029 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163223a10>
2024-08-20 11:27:54,035 - INFO - Created relationship from 2nd Roller to 2号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163221d90>
2024-08-20 11:27:54,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,040 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e5f50>
2024-08-20 11:27:54,046 - INFO - Created relationship from 2nd Roller to 2号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e5590>
2024-08-20 11:27:54,050 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,051 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315ff90>
2024-08-20 11:27:54,055 - INFO - Created relationship from 3rd Roller to 3号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311e450>
2024-08-20 11:27:54,057 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,059 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311cb50>
2024-08-20 11:27:54,066 - INFO - Created relationship from 3rd Roller to 3号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312fb50>
2024-08-20 11:27:54,070 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,072 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d390>
2024-08-20 11:27:54,080 - INFO - Created relationship from 3rd Roller to 3号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163244a10>
2024-08-20 11:27:54,084 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,086 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311e9d0>
2024-08-20 11:27:54,092 - INFO - Created relationship from 3rd Roller to 3号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311f610>
2024-08-20 11:27:54,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,099 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315dd10>
2024-08-20 11:27:54,105 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e7d90>
2024-08-20 11:27:54,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,113 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7ad0>
2024-08-20 11:27:54,120 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312f310>
2024-08-20 11:27:54,125 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,129 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d6d0>
2024-08-20 11:27:54,137 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:54,139 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,141 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b0ed0>
2024-08-20 11:27:54,148 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163223610>
2024-08-20 11:27:54,152 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,154 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163223550>
2024-08-20 11:27:54,162 - INFO - Created relationship from Cooling Roller1 to 入口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631aa490>
2024-08-20 11:27:54,164 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '入口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,167 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b8d10>
2024-08-20 11:27:54,175 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631ab190>
2024-08-20 11:27:54,179 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,181 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163223ad0>
2024-08-20 11:27:54,189 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1632233d0>
2024-08-20 11:27:54,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,196 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1632239d0>
2024-08-20 11:27:54,203 - INFO - Created relationship from Cooling Roller1 to Cooling Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b9e10>
2024-08-20 11:27:54,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: 'Cooling Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,209 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312fb10>
2024-08-20 11:27:54,216 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312c390>
2024-08-20 11:27:54,220 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,222 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7650>
2024-08-20 11:27:54,229 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e6cd0>
2024-08-20 11:27:54,234 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,236 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315f610>
2024-08-20 11:27:54,241 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b1650>
2024-08-20 11:27:54,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,246 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311d1d0>
2024-08-20 11:27:54,252 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311f750>
2024-08-20 11:27:54,254 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,257 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163246e50>
2024-08-20 11:27:54,262 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311d6d0>
2024-08-20 11:27:54,264 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,266 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311ef90>
2024-08-20 11:27:54,273 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b2b10>
2024-08-20 11:27:54,277 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,280 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631b0290>
2024-08-20 11:27:54,287 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e6310>
2024-08-20 11:27:54,292 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,295 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7a50>
2024-08-20 11:27:54,308 - INFO - Created relationship from Cooling Roller1 to 1号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312e090>
2024-08-20 11:27:54,313 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,315 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d250>
2024-08-20 11:27:54,321 - INFO - Created relationship from Cooling Roller1 to 冷辊温度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16315cdd0>
2024-08-20 11:27:54,326 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊温度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,328 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163220e90>
2024-08-20 11:27:54,335 - INFO - Created relationship from Cooling Roller1 to 冷辊露点 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163223c90>
2024-08-20 11:27:54,339 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊露点'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,341 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631a9d10>
2024-08-20 11:27:54,348 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163245690>
2024-08-20 11:27:54,353 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,356 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x162e43d10>
2024-08-20 11:27:54,362 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163246a90>
2024-08-20 11:27:54,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,367 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315fa90>
2024-08-20 11:27:54,374 - INFO - Created relationship from Cooling Roller2 to 出口胶温度L with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163220050>
2024-08-20 11:27:54,378 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度L'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,379 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163220b10>
2024-08-20 11:27:54,386 - INFO - Created relationship from Cooling Roller2 to 出口胶温度R with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163220d50>
2024-08-20 11:27:54,390 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度R'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,392 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312d710>
2024-08-20 11:27:54,399 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312fe50>
2024-08-20 11:27:54,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,403 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631abfd0>
2024-08-20 11:27:54,410 - INFO - Created relationship from Cooling Roller2 to 2号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631e5890>
2024-08-20 11:27:54,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,416 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e6dd0>
2024-08-20 11:27:54,423 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631b1190>
2024-08-20 11:27:54,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,429 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311c850>
2024-08-20 11:27:54,435 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x162e42bd0>
2024-08-20 11:27:54,439 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,441 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163113490>
2024-08-20 11:27:54,447 - INFO - Created relationship from Sheeting Machine to 切片产线速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x162d66150>
2024-08-20 11:27:54,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片产线速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,451 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163246e90>
2024-08-20 11:27:54,457 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163245e90>
2024-08-20 11:27:54,460 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,462 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315f090>
2024-08-20 11:27:54,469 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631a9f10>
2024-08-20 11:27:54,473 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,476 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311ce90>
2024-08-20 11:27:54,482 - INFO - Created relationship from SPC Weighter to 口香糖重量 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311e190>
2024-08-20 11:27:54,486 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖重量'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,488 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311eb10>
2024-08-20 11:27:54,494 - INFO - Created relationship from SPC Weighter to 口香糖单片长度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631ba110>
2024-08-20 11:27:54,496 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片长度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,498 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631bbb10>
2024-08-20 11:27:54,503 - INFO - Created relationship from SPC Weighter to 口香糖单片宽度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163221bd0>
2024-08-20 11:27:54,507 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片宽度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,509 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163221e50>
2024-08-20 11:27:54,516 - INFO - Created relationship from SPC Weighter to 口香糖单片深度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312ed90>
2024-08-20 11:27:54,520 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片深度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,523 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312f5d0>
2024-08-20 11:27:54,528 - INFO - Created relationship from SPC Weighter to 口香糖单片厚度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x1631bb910>
2024-08-20 11:27:54,532 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片厚度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,534 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631bb0d0>
2024-08-20 11:27:54,540 - INFO - Created relationship from SPC Weighter to 口香糖生产班次 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163221310>
2024-08-20 11:27:54,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖生产班次'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,545 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x163223310>
2024-08-20 11:27:54,552 - INFO - Created relationship from SPC Weighter to 口香糖香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163220110>
2024-08-20 11:27:54,555 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,557 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631aa690>
2024-08-20 11:27:54,562 - INFO - Created relationship from Sheeting Machine to 系统速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311c510>
2024-08-20 11:27:54,566 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '系统速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,569 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311db90>
2024-08-20 11:27:54,575 - INFO - Created relationship from Mixer1 to Mixer1_配方名称 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311df50>
2024-08-20 11:27:54,579 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方名称'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,582 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16315f610>
2024-08-20 11:27:54,589 - INFO - Created relationship from Mixer1 to Mixer1_配方代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x163246110>
2024-08-20 11:27:54,593 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,595 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x162e43890>
2024-08-20 11:27:54,601 - INFO - Created relationship from Sheeting Machine to 切片机运行状态 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312f0d0>
2024-08-20 11:27:54,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机运行状态'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,607 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x1631e7bd0>
2024-08-20 11:27:54,615 - INFO - Created relationship from Sheeting Machine to 停机时间 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311eb90>
2024-08-20 11:27:54,619 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '停机时间'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,621 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16311e650>
2024-08-20 11:27:54,629 - INFO - Created relationship from Sheeting Machine to 切片机状态代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16311e490>
2024-08-20 11:27:54,633 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机状态代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 11:27:54,646 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x16312c810>
2024-08-20 11:27:54,653 - INFO - Created relationship from Sheeting Machine to SKU香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x16312d210>
2024-08-20 11:27:54,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: 'SKU香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:45,746 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6d970>
2024-08-20 14:42:45,762 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9a06910>
2024-08-20 14:42:45,778 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:45,786 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f790>
2024-08-20 14:42:45,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,792 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36280>
2024-08-20 14:42:45,795 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,796 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9baa5b0>
2024-08-20 14:42:45,797 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e9a06550>
2024-08-20 14:42:45,798 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52af0>
2024-08-20 14:42:45,799 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,800 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52460>
2024-08-20 14:42:45,800 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,801 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e99d7c70>
2024-08-20 14:42:45,802 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5b0>
2024-08-20 14:42:45,803 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:45,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,804 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7eb0>
2024-08-20 14:42:45,804 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,805 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8ca7400>
2024-08-20 14:42:45,805 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f880>
2024-08-20 14:42:45,807 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f130>
2024-08-20 14:42:45,808 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,809 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca72b0>
2024-08-20 14:42:45,809 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,809 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a90>
2024-08-20 14:42:45,810 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e996e9a0>
2024-08-20 14:42:45,811 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c8c790>
2024-08-20 14:42:45,812 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,812 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7b80>
2024-08-20 14:42:45,813 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,814 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c52400>
2024-08-20 14:42:45,815 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52be0>
2024-08-20 14:42:45,816 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77e9a06a00>
2024-08-20 14:42:45,816 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,817 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9baa0a0>
2024-08-20 14:42:45,817 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,818 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:45,818 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f850>
2024-08-20 14:42:45,819 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f460>
2024-08-20 14:42:45,819 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,821 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff70>
2024-08-20 14:42:45,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,821 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:45,822 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52d30>
2024-08-20 14:42:45,823 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c528e0>
2024-08-20 14:42:45,823 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,825 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7e50>
2024-08-20 14:42:45,825 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,825 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c8c790>
2024-08-20 14:42:45,826 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e996e670>
2024-08-20 14:42:45,827 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ee0>
2024-08-20 14:42:45,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,828 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7640>
2024-08-20 14:42:45,828 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,830 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9b366d0>
2024-08-20 14:42:45,834 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca7700>
2024-08-20 14:42:45,835 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca77c0>
2024-08-20 14:42:45,838 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,839 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996ea30>
2024-08-20 14:42:45,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,844 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c8c430>
2024-08-20 14:42:45,850 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e99d7d30>
2024-08-20 14:42:45,852 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52c70>
2024-08-20 14:42:45,854 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,855 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:45,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,860 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9baa520>
2024-08-20 14:42:45,861 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffd0>
2024-08-20 14:42:45,862 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f0a0>
2024-08-20 14:42:45,862 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,863 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36a00>
2024-08-20 14:42:45,863 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,864 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff70>
2024-08-20 14:42:45,865 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e9a060d0>
2024-08-20 14:42:45,867 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:45,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,868 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52880>
2024-08-20 14:42:45,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,869 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c522b0>
2024-08-20 14:42:45,870 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e99d7c40>
2024-08-20 14:42:45,871 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c8cac0>
2024-08-20 14:42:45,871 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,872 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e2e0>
2024-08-20 14:42:45,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,873 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:45,874 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca71c0>
2024-08-20 14:42:45,875 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77e9b36040>
2024-08-20 14:42:45,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,876 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:45,876 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,877 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c86fa0>
2024-08-20 14:42:45,878 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca7910>
2024-08-20 14:42:45,878 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:45,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,879 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e970>
2024-08-20 14:42:45,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,880 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:45,881 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52ca0>
2024-08-20 14:42:45,882 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52d30>
2024-08-20 14:42:45,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,882 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c526a0>
2024-08-20 14:42:45,883 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,883 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9a06a00>
2024-08-20 14:42:45,884 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:45,889 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6d0>
2024-08-20 14:42:45,892 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,893 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6fee0>
2024-08-20 14:42:45,893 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,894 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77e9a06a00>
2024-08-20 14:42:45,894 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:45,895 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c52d00>
2024-08-20 14:42:45,895 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,896 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c529d0>
2024-08-20 14:42:45,896 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,897 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:45,897 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e996e970>
2024-08-20 14:42:45,898 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f10>
2024-08-20 14:42:45,898 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,899 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca76d0>
2024-08-20 14:42:45,899 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,900 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8ca75e0>
2024-08-20 14:42:45,901 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e9b36bb0>
2024-08-20 14:42:45,901 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77e9b36130>
2024-08-20 14:42:45,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:45,902 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca74c0>
2024-08-20 14:42:45,902 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:45,908 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d00>
2024-08-20 14:42:45,958 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7f77e996e5b0>
2024-08-20 14:42:46,021 - INFO - Created relationship from nan to nan with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7f77d8c8c8b0>
2024-08-20 14:42:46,025 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'nan'}), (b:Target {name: 'nan'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:42:46,041 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52040>
2024-08-20 14:42:46,042 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:46,046 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52130>
2024-08-20 14:42:46,050 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52550>
2024-08-20 14:42:46,054 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06a00>
2024-08-20 14:42:46,078 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:46,083 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,106 - INFO - Created relationship from Extruder to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f4f0>
2024-08-20 14:42:46,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,123 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:46,129 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a06b50>
2024-08-20 14:42:46,138 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52550>
2024-08-20 14:42:46,155 - INFO - Created relationship from Sheeting Operator#1 to Rolling Powder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52850>
2024-08-20 14:42:46,159 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Rolling Powder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,183 - INFO - Created relationship from Rolling Powder to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52730>
2024-08-20 14:42:46,188 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,191 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8cbb0>
2024-08-20 14:42:46,195 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e7f0>
2024-08-20 14:42:46,196 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d00>
2024-08-20 14:42:46,203 - INFO - Created relationship from Sheeting Operator#1 to Bull Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7580>
2024-08-20 14:42:46,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Bull Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,221 - INFO - Created relationship from Bull Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36fd0>
2024-08-20 14:42:46,226 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,228 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8b0>
2024-08-20 14:42:46,230 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c86f10>
2024-08-20 14:42:46,231 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e50>
2024-08-20 14:42:46,236 - INFO - Created relationship from Sheeting Operator#1 to 1st Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca77c0>
2024-08-20 14:42:46,239 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '1st Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,241 - INFO - Created relationship from 1st Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996e250>
2024-08-20 14:42:46,246 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,248 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:46,249 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52e50>
2024-08-20 14:42:46,250 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52610>
2024-08-20 14:42:46,253 - INFO - Created relationship from Sheeting Operator#1 to 2nd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52a00>
2024-08-20 14:42:46,256 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '2nd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,257 - INFO - Created relationship from 2nd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06880>
2024-08-20 14:42:46,260 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,262 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffa0>
2024-08-20 14:42:46,263 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4fca0>
2024-08-20 14:42:46,265 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbb0>
2024-08-20 14:42:46,268 - INFO - Created relationship from Sheeting Operator#1 to 3rd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:46,271 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '3rd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,272 - INFO - Created relationship from 3rd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d910>
2024-08-20 14:42:46,275 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,277 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:46,281 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52700>
2024-08-20 14:42:46,283 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:46,290 - INFO - Created relationship from Sheeting Operator#1 to Forming Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c670>
2024-08-20 14:42:46,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Forming Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,296 - INFO - Created relationship from Forming Roller to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996e7f0>
2024-08-20 14:42:46,299 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,301 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7bb0>
2024-08-20 14:42:46,304 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:46,306 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53100>
2024-08-20 14:42:46,311 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca75b0>
2024-08-20 14:42:46,315 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,316 - INFO - Created relationship from Cooling Roller1 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ee0>
2024-08-20 14:42:46,321 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,322 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e80>
2024-08-20 14:42:46,324 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:46,325 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7fd0>
2024-08-20 14:42:46,329 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:46,332 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,334 - INFO - Created relationship from Cooling Roller2 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:46,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,339 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6daf0>
2024-08-20 14:42:46,342 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a06c10>
2024-08-20 14:42:46,344 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:46,351 - INFO - Created relationship from Sheeting Operator#1 to Scoring Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a534f0>
2024-08-20 14:42:46,355 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Scoring Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,357 - INFO - Created relationship from Scoring Roller to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:46,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,363 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7d60>
2024-08-20 14:42:46,368 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e2e0>
2024-08-20 14:42:46,372 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52d30>
2024-08-20 14:42:46,378 - INFO - Created relationship from Sheeting Operator#2 to SPC Weighter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c529d0>
2024-08-20 14:42:46,382 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'SPC Weighter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,384 - INFO - Created relationship from SPC Weighter to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52ca0>
2024-08-20 14:42:46,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,390 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe20>
2024-08-20 14:42:46,394 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:46,396 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f130>
2024-08-20 14:42:46,401 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:46,404 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,407 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36760>
2024-08-20 14:42:46,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,412 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:46,420 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b36f10>
2024-08-20 14:42:46,428 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:46,431 - INFO - Created relationship from Pre-Process Operator to Xylitol Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa90>
2024-08-20 14:42:46,434 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Xylitol Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,435 - INFO - Created relationship from Xylitol Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52730>
2024-08-20 14:42:46,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Xylitol Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,440 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52220>
2024-08-20 14:42:46,441 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c523d0>
2024-08-20 14:42:46,443 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:46,449 - INFO - Created relationship from Pre-Process Operator to Sugar Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:46,452 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Sugar Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,454 - INFO - Created relationship from Sugar Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa5b0>
2024-08-20 14:42:46,458 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,461 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7820>
2024-08-20 14:42:46,463 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a065e0>
2024-08-20 14:42:46,465 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:46,470 - INFO - Created relationship from Pre-Process Operator to Dissolving Tank with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8cb50>
2024-08-20 14:42:46,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Dissolving Tank'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,477 - INFO - Created relationship from Dissolving Tank to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e96b8160>
2024-08-20 14:42:46,481 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dissolving Tank'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,483 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52d60>
2024-08-20 14:42:46,486 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52280>
2024-08-20 14:42:46,492 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd60>
2024-08-20 14:42:46,497 - INFO - Created relationship from Mixing Operator to Flowmeter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f460>
2024-08-20 14:42:46,499 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Flowmeter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,501 - INFO - Created relationship from Flowmeter to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:46,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Flowmeter'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,505 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36c70>
2024-08-20 14:42:46,507 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7310>
2024-08-20 14:42:46,508 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36160>
2024-08-20 14:42:46,512 - INFO - Created relationship from Mixing Operator to Jacket Warer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c86fa0>
2024-08-20 14:42:46,515 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Jacket Warer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,517 - INFO - Created relationship from Jacket Warer to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0a0>
2024-08-20 14:42:46,521 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Jacket Warer'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,522 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:46,523 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52970>
2024-08-20 14:42:46,523 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52130>
2024-08-20 14:42:46,527 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52be0>
2024-08-20 14:42:46,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,532 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a992b0>
2024-08-20 14:42:46,535 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,536 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:46,536 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6d850>
2024-08-20 14:42:46,537 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:46,542 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9baa5b0>
2024-08-20 14:42:46,545 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,546 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:46,550 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,551 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e310>
2024-08-20 14:42:46,551 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52a00>
2024-08-20 14:42:46,552 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52640>
2024-08-20 14:42:46,557 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52490>
2024-08-20 14:42:46,559 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,561 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc10>
2024-08-20 14:42:46,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,565 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1f0>
2024-08-20 14:42:46,565 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b36730>
2024-08-20 14:42:46,566 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36c70>
2024-08-20 14:42:46,571 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca71c0>
2024-08-20 14:42:46,573 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,575 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a90>
2024-08-20 14:42:46,579 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,580 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36f40>
2024-08-20 14:42:46,585 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f130>
2024-08-20 14:42:46,588 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f910>
2024-08-20 14:42:46,594 - INFO - Created relationship from Management personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f370>
2024-08-20 14:42:46,597 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Management personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,599 - INFO - Created relationship from nan to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52580>
2024-08-20 14:42:46,602 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,603 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52f40>
2024-08-20 14:42:46,608 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e520>
2024-08-20 14:42:46,612 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c880>
2024-08-20 14:42:46,613 - INFO - Created relationship from Production personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7f40>
2024-08-20 14:42:46,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Production personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,619 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:46,622 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,623 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa910>
2024-08-20 14:42:46,624 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c8c370>
2024-08-20 14:42:46,627 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:46,628 - INFO - Created relationship from Quality control personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52790>
2024-08-20 14:42:46,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Quality control personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,633 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52760>
2024-08-20 14:42:46,633 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,634 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e96b8160>
2024-08-20 14:42:46,635 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:46,638 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fdf0>
2024-08-20 14:42:46,640 - INFO - Created relationship from Research and development personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36b50>
2024-08-20 14:42:46,644 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Research and development personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,645 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36cd0>
2024-08-20 14:42:46,645 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,646 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:46,647 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b361c0>
2024-08-20 14:42:46,652 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b368b0>
2024-08-20 14:42:46,654 - INFO - Created relationship from Logistics personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f190>
2024-08-20 14:42:46,658 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Logistics personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,660 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:46,660 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,661 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c523a0>
2024-08-20 14:42:46,665 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52610>
2024-08-20 14:42:46,675 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52a00>
2024-08-20 14:42:46,683 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e2b0>
2024-08-20 14:42:46,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,694 - INFO - Created relationship from Sieve Shaker to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c430>
2024-08-20 14:42:46,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,698 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06c70>
2024-08-20 14:42:46,700 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:46,703 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d850>
2024-08-20 14:42:46,714 - INFO - Created relationship from Raw Material Operator to Elevator with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c370>
2024-08-20 14:42:46,716 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Elevator'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,722 - INFO - Created relationship from Elevator to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:46,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Elevator'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,726 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c521f0>
2024-08-20 14:42:46,731 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52e80>
2024-08-20 14:42:46,735 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fdc0>
2024-08-20 14:42:46,747 - INFO - Created relationship from Raw Material Operator to 1#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:46,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '1#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,758 - INFO - Created relationship from 1#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f340>
2024-08-20 14:42:46,761 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,764 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36d00>
2024-08-20 14:42:46,765 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca78b0>
2024-08-20 14:42:46,771 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6a0>
2024-08-20 14:42:46,788 - INFO - Created relationship from Raw Material Operator to 2#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7340>
2024-08-20 14:42:46,791 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '2#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,803 - INFO - Created relationship from 2#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:46,807 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,810 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f3d0>
2024-08-20 14:42:46,812 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f700>
2024-08-20 14:42:46,816 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:46,828 - INFO - Created relationship from Raw Material Operator to 3#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:46,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '3#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,840 - INFO - Created relationship from 3#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52520>
2024-08-20 14:42:46,844 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,847 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:46,848 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c8c760>
2024-08-20 14:42:46,854 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7c70>
2024-08-20 14:42:46,868 - INFO - Created relationship from Raw Material Operator to Sugar Grinder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:46,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grinder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,879 - INFO - Created relationship from Sugar Grinder to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:46,884 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinder'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,887 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:46,888 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e520>
2024-08-20 14:42:46,892 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52040>
2024-08-20 14:42:46,902 - INFO - Created relationship from Raw Material Operator to Sugar Grind Blower with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52790>
2024-08-20 14:42:46,906 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grind Blower'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,912 - INFO - Created relationship from Sugar Grind Blower to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fdc0>
2024-08-20 14:42:46,916 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grind Blower'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,918 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:46,920 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:46,923 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36130>
2024-08-20 14:42:46,931 - INFO - Created relationship from Raw Material Operator to Sugar Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a60>
2024-08-20 14:42:46,935 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,940 - INFO - Created relationship from Sugar Sieve Shaker to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53760>
2024-08-20 14:42:46,944 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Sieve Shaker'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,946 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca78b0>
2024-08-20 14:42:46,947 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b36e80>
2024-08-20 14:42:46,949 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd90>
2024-08-20 14:42:46,956 - INFO - Created relationship from Raw Material Operator to Sugar Unloader with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f910>
2024-08-20 14:42:46,959 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Unloader'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,963 - INFO - Created relationship from Sugar Unloader to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:46,966 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Unloader'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,968 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c529a0>
2024-08-20 14:42:46,971 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:46,972 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:46,973 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:46,974 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,975 - INFO - Created relationship from Sieve Shaker to 胶基 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:46,978 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '胶基'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,980 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53310>
2024-08-20 14:42:46,984 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c8caf0>
2024-08-20 14:42:46,986 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e310>
2024-08-20 14:42:46,987 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7c0>
2024-08-20 14:42:46,987 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:46,989 - INFO - Created relationship from Sieve Shaker to 山梨醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8b0>
2024-08-20 14:42:46,992 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '山梨醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:46,994 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53d90>
2024-08-20 14:42:46,996 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53280>
2024-08-20 14:42:46,998 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd30>
2024-08-20 14:42:46,999 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:47,000 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,001 - INFO - Created relationship from Sieve Shaker to 木糖醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f490>
2024-08-20 14:42:47,004 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '木糖醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,007 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06490>
2024-08-20 14:42:47,018 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7eb0>
2024-08-20 14:42:47,023 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7f70>
2024-08-20 14:42:47,025 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f250>
2024-08-20 14:42:47,025 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,027 - INFO - Created relationship from Sieve Shaker to 表面粉 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f700>
2024-08-20 14:42:47,030 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '表面粉'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,031 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53130>
2024-08-20 14:42:47,036 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53d00>
2024-08-20 14:42:47,037 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f160>
2024-08-20 14:42:47,038 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:47,038 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,040 - INFO - Created relationship from Sieve Shaker to 香精 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f790>
2024-08-20 14:42:47,043 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '香精'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,045 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e850>
2024-08-20 14:42:47,046 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c8cbb0>
2024-08-20 14:42:47,048 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7280>
2024-08-20 14:42:47,049 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:47,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,050 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:47,051 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,052 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1f0>
2024-08-20 14:42:47,053 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6a0>
2024-08-20 14:42:47,055 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53cd0>
2024-08-20 14:42:47,056 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a531f0>
2024-08-20 14:42:47,056 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,058 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd00>
2024-08-20 14:42:47,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,059 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:47,060 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e99d7ee0>
2024-08-20 14:42:47,061 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7970>
2024-08-20 14:42:47,062 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7520>
2024-08-20 14:42:47,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,064 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d30>
2024-08-20 14:42:47,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,065 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:47,065 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:47,066 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f250>
2024-08-20 14:42:47,067 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fb50>
2024-08-20 14:42:47,067 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,068 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa520>
2024-08-20 14:42:47,068 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,069 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53ca0>
2024-08-20 14:42:47,070 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f610>
2024-08-20 14:42:47,071 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd30>
2024-08-20 14:42:47,077 - INFO - Created relationship from Mixing Operator to Mixer Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f820>
2024-08-20 14:42:47,079 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,080 - INFO - Created relationship from Mixer Dusting Machine to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996e370>
2024-08-20 14:42:47,084 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer Dusting Machine'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,085 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52a90>
2024-08-20 14:42:47,086 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c86fa0>
2024-08-20 14:42:47,087 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e98613a0>
2024-08-20 14:42:47,092 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5e0>
2024-08-20 14:42:47,095 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,097 - INFO - Created relationship from Model Temperature Controller 1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6d0>
2024-08-20 14:42:47,100 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,102 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53970>
2024-08-20 14:42:47,103 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53b80>
2024-08-20 14:42:47,104 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fdc0>
2024-08-20 14:42:47,110 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f520>
2024-08-20 14:42:47,113 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,116 - INFO - Created relationship from Model Temperature Controller 2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7c70>
2024-08-20 14:42:47,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,121 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7220>
2024-08-20 14:42:47,123 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca74f0>
2024-08-20 14:42:47,125 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:47,130 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7f40>
2024-08-20 14:42:47,133 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,136 - INFO - Created relationship from Model Temperature Controller 3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f3d0>
2024-08-20 14:42:47,139 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,141 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:47,143 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f790>
2024-08-20 14:42:47,148 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a537f0>
2024-08-20 14:42:47,154 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:47,159 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,161 - INFO - Created relationship from Model Temperature Controller 4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5e0>
2024-08-20 14:42:47,164 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,166 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f3a0>
2024-08-20 14:42:47,168 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996ed00>
2024-08-20 14:42:47,170 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:47,173 - INFO - Created relationship from Sheeting Operator#1 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e970>
2024-08-20 14:42:47,176 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,178 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f250>
2024-08-20 14:42:47,179 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,181 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fac0>
2024-08-20 14:42:47,182 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f610>
2024-08-20 14:42:47,184 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53970>
2024-08-20 14:42:47,186 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:47,187 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,191 - INFO - Created relationship from Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fdc0>
2024-08-20 14:42:47,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,197 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:47,199 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e99d7e80>
2024-08-20 14:42:47,201 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:47,209 - INFO - Created relationship from Sheeting Operator#1 to Triam Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:47,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Triam Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,224 - INFO - Created relationship from Triam Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7220>
2024-08-20 14:42:47,228 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Triam Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,230 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7be0>
2024-08-20 14:42:47,232 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f4c0>
2024-08-20 14:42:47,234 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:47,241 - INFO - Created relationship from Sheeting Operator#2 to Dehumidifer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53b20>
2024-08-20 14:42:47,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Dehumidifer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,248 - INFO - Created relationship from Dehumidifer to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53ca0>
2024-08-20 14:42:47,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dehumidifer'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,255 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa00>
2024-08-20 14:42:47,268 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:47,276 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f520>
2024-08-20 14:42:47,282 - INFO - Created relationship from Sheeting Operator#2 to Refrigerating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:47,284 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Refrigerating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,287 - INFO - Created relationship from Refrigerating Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52700>
2024-08-20 14:42:47,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Refrigerating Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,293 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:47,295 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e2e0>
2024-08-20 14:42:47,298 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f820>
2024-08-20 14:42:47,305 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:47,307 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,311 - INFO - Created relationship from Sheeting Dusting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53c10>
2024-08-20 14:42:47,315 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Dusting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,317 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53b20>
2024-08-20 14:42:47,319 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f730>
2024-08-20 14:42:47,321 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:47,330 - INFO - Created relationship from Sheeting Operator#1 to First Floor Air Conditioner with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:47,333 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'First Floor Air Conditioner'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,339 - INFO - Created relationship from First Floor Air Conditioner to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d60>
2024-08-20 14:42:47,343 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'First Floor Air Conditioner'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,348 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6dac0>
2024-08-20 14:42:47,354 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d60>
2024-08-20 14:42:47,360 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7df0>
2024-08-20 14:42:47,367 - INFO - Created relationship from 小包装操作员 to Wax Pool with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f250>
2024-08-20 14:42:47,371 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Wax Pool'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,377 - INFO - Created relationship from Wax Pool to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:47,381 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Wax Pool'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,386 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53970>
2024-08-20 14:42:47,388 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a531c0>
2024-08-20 14:42:47,391 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6a0>
2024-08-20 14:42:47,399 - INFO - Created relationship from 小包装操作员 to Hot Melt Adhesive with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f250>
2024-08-20 14:42:47,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Hot Melt Adhesive'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,408 - INFO - Created relationship from Hot Melt Adhesive to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd30>
2024-08-20 14:42:47,413 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Hot Melt Adhesive'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,418 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:47,421 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b36af0>
2024-08-20 14:42:47,423 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8cac0>
2024-08-20 14:42:47,443 - INFO - Created relationship from 小包装操作员 to 1#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e760>
2024-08-20 14:42:47,447 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,452 - INFO - Created relationship from 1#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fcd0>
2024-08-20 14:42:47,457 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,461 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:47,464 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53280>
2024-08-20 14:42:47,465 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a532b0>
2024-08-20 14:42:47,471 - INFO - Created relationship from 小包装操作员 to 2#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f190>
2024-08-20 14:42:47,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,479 - INFO - Created relationship from 2#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff70>
2024-08-20 14:42:47,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,486 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7f10>
2024-08-20 14:42:47,488 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7af0>
2024-08-20 14:42:47,490 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36be0>
2024-08-20 14:42:47,495 - INFO - Created relationship from 小包装操作员 to 3#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7940>
2024-08-20 14:42:47,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,512 - INFO - Created relationship from 3#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:47,516 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,519 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc10>
2024-08-20 14:42:47,521 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f880>
2024-08-20 14:42:47,529 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a533a0>
2024-08-20 14:42:47,543 - INFO - Created relationship from 小包装操作员 to 4#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53ca0>
2024-08-20 14:42:47,547 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,557 - INFO - Created relationship from 4#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa00>
2024-08-20 14:42:47,562 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,565 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0a0>
2024-08-20 14:42:47,566 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:47,570 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:47,582 - INFO - Created relationship from 小包装操作员 to 5#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36bb0>
2024-08-20 14:42:47,586 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,593 - INFO - Created relationship from 5#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0a0>
2024-08-20 14:42:47,597 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,600 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f670>
2024-08-20 14:42:47,601 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f4f0>
2024-08-20 14:42:47,606 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fee0>
2024-08-20 14:42:47,616 - INFO - Created relationship from 小包装操作员 to 6#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:47,619 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,626 - INFO - Created relationship from 6#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36dc0>
2024-08-20 14:42:47,629 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,632 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36f10>
2024-08-20 14:42:47,633 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53370>
2024-08-20 14:42:47,634 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a538b0>
2024-08-20 14:42:47,644 - INFO - Created relationship from 小包装操作员 to 7#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:47,647 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,653 - INFO - Created relationship from 7#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52fa0>
2024-08-20 14:42:47,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,660 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996eac0>
2024-08-20 14:42:47,661 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:47,666 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53ac0>
2024-08-20 14:42:47,675 - INFO - Created relationship from 小包装操作员 to 8#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b361c0>
2024-08-20 14:42:47,679 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,687 - INFO - Created relationship from 8#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:47,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,693 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f520>
2024-08-20 14:42:47,695 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe50>
2024-08-20 14:42:47,697 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:47,708 - INFO - Created relationship from 小包装操作员 to 9#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f190>
2024-08-20 14:42:47,711 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,715 - INFO - Created relationship from 9#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f250>
2024-08-20 14:42:47,719 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,720 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52790>
2024-08-20 14:42:47,721 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4fac0>
2024-08-20 14:42:47,724 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fb80>
2024-08-20 14:42:47,727 - INFO - Created relationship from 小包装操作员 to 10#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f880>
2024-08-20 14:42:47,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,731 - INFO - Created relationship from 10#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f250>
2024-08-20 14:42:47,736 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,737 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7f70>
2024-08-20 14:42:47,738 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:47,740 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d700>
2024-08-20 14:42:47,743 - INFO - Created relationship from 小包装操作员 to 11#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53b50>
2024-08-20 14:42:47,746 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '11#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,748 - INFO - Created relationship from 11#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a531f0>
2024-08-20 14:42:47,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '11#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,752 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e4f0>
2024-08-20 14:42:47,754 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52160>
2024-08-20 14:42:47,755 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b20>
2024-08-20 14:42:47,760 - INFO - Created relationship from 小包装操作员 to 12#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:47,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '12#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,766 - INFO - Created relationship from 12#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53a90>
2024-08-20 14:42:47,769 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '12#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,771 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d880>
2024-08-20 14:42:47,772 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b366a0>
2024-08-20 14:42:47,774 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:47,776 - INFO - Created relationship from 小包装操作员 to 1#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe20>
2024-08-20 14:42:47,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,784 - INFO - Created relationship from 1#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffa0>
2024-08-20 14:42:47,788 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,789 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1c0>
2024-08-20 14:42:47,791 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1f0>
2024-08-20 14:42:47,792 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f4f0>
2024-08-20 14:42:47,795 - INFO - Created relationship from 小包装操作员 to 2#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6a0>
2024-08-20 14:42:47,798 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,800 - INFO - Created relationship from 2#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5b0>
2024-08-20 14:42:47,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,805 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffa0>
2024-08-20 14:42:47,807 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:47,808 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7d60>
2024-08-20 14:42:47,813 - INFO - Created relationship from 小包装操作员 to 3#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36e20>
2024-08-20 14:42:47,815 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,816 - INFO - Created relationship from 3#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6dbe0>
2024-08-20 14:42:47,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,823 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53130>
2024-08-20 14:42:47,824 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:47,825 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:47,828 - INFO - Created relationship from 小包装操作员 to 4#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:47,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,834 - INFO - Created relationship from 4#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52b20>
2024-08-20 14:42:47,839 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,841 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:47,842 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:47,843 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6dd30>
2024-08-20 14:42:47,846 - INFO - Created relationship from 小包装操作员 to 5#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b360d0>
2024-08-20 14:42:47,849 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,852 - INFO - Created relationship from 5#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:47,855 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,857 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f0a0>
2024-08-20 14:42:47,858 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6fa30>
2024-08-20 14:42:47,860 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f670>
2024-08-20 14:42:47,865 - INFO - Created relationship from 小包装操作员 to 6#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f370>
2024-08-20 14:42:47,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,871 - INFO - Created relationship from 6#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7940>
2024-08-20 14:42:47,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,878 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0a0>
2024-08-20 14:42:47,879 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc70>
2024-08-20 14:42:47,881 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:47,885 - INFO - Created relationship from 小包装操作员 to 7#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f940>
2024-08-20 14:42:47,888 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,891 - INFO - Created relationship from 7#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:47,896 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,899 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:47,900 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6dd30>
2024-08-20 14:42:47,902 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53b80>
2024-08-20 14:42:47,916 - INFO - Created relationship from 小包装操作员 to 8#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e310>
2024-08-20 14:42:47,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,924 - INFO - Created relationship from 8#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52cd0>
2024-08-20 14:42:47,928 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,931 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca79d0>
2024-08-20 14:42:47,933 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:47,935 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e850>
2024-08-20 14:42:47,939 - INFO - Created relationship from 小包装操作员 to 9#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53af0>
2024-08-20 14:42:47,944 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,948 - INFO - Created relationship from 9#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6daf0>
2024-08-20 14:42:47,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,956 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b369d0>
2024-08-20 14:42:47,958 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e99d7c70>
2024-08-20 14:42:47,960 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:47,964 - INFO - Created relationship from 小包装操作员 to 10#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:47,969 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,972 - INFO - Created relationship from 10#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:47,976 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:47,978 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:47,981 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:47,984 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1c0>
2024-08-20 14:42:47,990 - INFO - Created relationship from 小包装操作员 to PKG Dusting  Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:47,994 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'PKG Dusting  Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:47,998 - INFO - Created relationship from PKG Dusting  Machine to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f490>
2024-08-20 14:42:48,002 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'PKG Dusting  Machine'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,006 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fdf0>
2024-08-20 14:42:48,012 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9b368e0>
2024-08-20 14:42:48,017 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36f10>
2024-08-20 14:42:48,024 - INFO - Created relationship from 大包装操作员 to 1#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:48,029 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,034 - INFO - Created relationship from 1#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53400>
2024-08-20 14:42:48,038 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,042 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996ea90>
2024-08-20 14:42:48,044 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:48,046 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:48,070 - INFO - Created relationship from 大包装操作员 to 2#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca75e0>
2024-08-20 14:42:48,074 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,076 - INFO - Created relationship from 2#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:48,081 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,083 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53cd0>
2024-08-20 14:42:48,085 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53220>
2024-08-20 14:42:48,087 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36f70>
2024-08-20 14:42:48,093 - INFO - Created relationship from 大包装操作员 to 3#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36700>
2024-08-20 14:42:48,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,101 - INFO - Created relationship from 3#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:48,106 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,110 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1f0>
2024-08-20 14:42:48,113 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f790>
2024-08-20 14:42:48,115 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:48,121 - INFO - Created relationship from 大包装操作员 to 4#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06100>
2024-08-20 14:42:48,125 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,131 - INFO - Created relationship from 4#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1f0>
2024-08-20 14:42:48,135 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,138 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbb0>
2024-08-20 14:42:48,140 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:48,145 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:48,152 - INFO - Created relationship from 大包装操作员 to 3705Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36c70>
2024-08-20 14:42:48,154 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3705Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,159 - INFO - Created relationship from 3705Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:48,163 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3705Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,167 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:48,170 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53d60>
2024-08-20 14:42:48,174 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:48,181 - INFO - Created relationship from 大包装操作员 to 3701Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52640>
2024-08-20 14:42:48,185 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3701Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,189 - INFO - Created relationship from 3701Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c280>
2024-08-20 14:42:48,193 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3701Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,195 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52340>
2024-08-20 14:42:48,197 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:48,199 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53c40>
2024-08-20 14:42:48,204 - INFO - Created relationship from 大包装操作员 to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:48,209 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,213 - INFO - Created relationship from CP28 to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36f70>
2024-08-20 14:42:48,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'CP28'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,220 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36d30>
2024-08-20 14:42:48,223 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f430>
2024-08-20 14:42:48,226 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:48,232 - INFO - Created relationship from 大包装操作员 to 1# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06250>
2024-08-20 14:42:48,237 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,242 - INFO - Created relationship from 1# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:48,246 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,252 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c220>
2024-08-20 14:42:48,255 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:48,258 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc10>
2024-08-20 14:42:48,265 - INFO - Created relationship from 大包装操作员 to 2# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:48,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,273 - INFO - Created relationship from 2# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53760>
2024-08-20 14:42:48,277 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,279 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a531f0>
2024-08-20 14:42:48,281 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca76a0>
2024-08-20 14:42:48,284 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a90>
2024-08-20 14:42:48,291 - INFO - Created relationship from 大包装操作员 to 3# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d60>
2024-08-20 14:42:48,296 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,301 - INFO - Created relationship from 3# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9baaf70>
2024-08-20 14:42:48,305 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,309 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1c0>
2024-08-20 14:42:48,313 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f760>
2024-08-20 14:42:48,318 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f520>
2024-08-20 14:42:48,326 - INFO - Created relationship from 大包装操作员 to 4# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc40>
2024-08-20 14:42:48,331 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,336 - INFO - Created relationship from 4# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c430>
2024-08-20 14:42:48,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,345 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:48,347 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca73d0>
2024-08-20 14:42:48,350 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a069a0>
2024-08-20 14:42:48,357 - INFO - Created relationship from 大包装操作员 to 5# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53c40>
2024-08-20 14:42:48,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,364 - INFO - Created relationship from 5# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d700>
2024-08-20 14:42:48,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,372 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7d30>
2024-08-20 14:42:48,375 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6a0>
2024-08-20 14:42:48,379 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:48,383 - INFO - Created relationship from 大包装操作员 to 1#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:48,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,392 - INFO - Created relationship from 1#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd60>
2024-08-20 14:42:48,395 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,398 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d910>
2024-08-20 14:42:48,400 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a53370>
2024-08-20 14:42:48,401 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06ca0>
2024-08-20 14:42:48,408 - INFO - Created relationship from 大包装操作员 to 2#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca75e0>
2024-08-20 14:42:48,412 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,417 - INFO - Created relationship from 2#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7550>
2024-08-20 14:42:48,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,426 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa0a0>
2024-08-20 14:42:48,429 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:48,432 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:48,440 - INFO - Created relationship from 大包装操作员 to 3#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b369d0>
2024-08-20 14:42:48,443 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,447 - INFO - Created relationship from 3#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f670>
2024-08-20 14:42:48,452 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,455 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c760>
2024-08-20 14:42:48,457 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7370>
2024-08-20 14:42:48,460 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7df0>
2024-08-20 14:42:48,467 - INFO - Created relationship from 大包装操作员 to 4#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca75b0>
2024-08-20 14:42:48,471 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,476 - INFO - Created relationship from 4#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06a00>
2024-08-20 14:42:48,481 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,485 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53b50>
2024-08-20 14:42:48,488 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6daf0>
2024-08-20 14:42:48,491 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:48,495 - INFO - Created relationship from 大包装操作员 to 5#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe50>
2024-08-20 14:42:48,500 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,505 - INFO - Created relationship from 5#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36970>
2024-08-20 14:42:48,510 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,514 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f910>
2024-08-20 14:42:48,516 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5b0>
2024-08-20 14:42:48,518 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6dd30>
2024-08-20 14:42:48,523 - INFO - Created relationship from 大包装操作员 to 6#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:48,527 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '6#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,532 - INFO - Created relationship from 6#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53b80>
2024-08-20 14:42:48,536 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,540 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:48,543 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8ca7580>
2024-08-20 14:42:48,544 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7550>
2024-08-20 14:42:48,549 - INFO - Created relationship from 大包装操作员 to 7#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c6d0>
2024-08-20 14:42:48,554 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '7#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,569 - INFO - Created relationship from 7#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:48,573 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,578 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c520a0>
2024-08-20 14:42:48,580 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:48,582 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8cac0>
2024-08-20 14:42:48,589 - INFO - Created relationship from 大包装操作员 to 8#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca72e0>
2024-08-20 14:42:48,594 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '8#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,600 - INFO - Created relationship from 8#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7580>
2024-08-20 14:42:48,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,608 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca79a0>
2024-08-20 14:42:48,611 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c86f10>
2024-08-20 14:42:48,614 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:48,620 - INFO - Created relationship from 大包装操作员 to 9#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d220>
2024-08-20 14:42:48,625 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '9#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,629 - INFO - Created relationship from 9#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:48,633 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,636 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:48,639 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:48,641 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:48,649 - INFO - Created relationship from 大包装操作员 to 10#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36d90>
2024-08-20 14:42:48,653 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '10#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:48,659 - INFO - Created relationship from 10#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6daf0>
2024-08-20 14:42:48,663 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,668 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:48,677 - INFO - Created relationship from Room Temperature to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06910>
2024-08-20 14:42:48,681 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,684 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca72b0>
2024-08-20 14:42:48,688 - INFO - Created relationship from Room Temperature to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7dc0>
2024-08-20 14:42:48,693 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,695 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9baa730>
2024-08-20 14:42:48,698 - INFO - Created relationship from Room Temperature to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:48,700 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,703 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:48,706 - INFO - Created relationship from Room Temperature to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52c40>
2024-08-20 14:42:48,711 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,714 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a4f220>
2024-08-20 14:42:48,717 - INFO - Created relationship from Room Temperature to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c400>
2024-08-20 14:42:48,722 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,725 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca7af0>
2024-08-20 14:42:48,728 - INFO - Created relationship from Room Temperature to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:48,732 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,735 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca7fa0>
2024-08-20 14:42:48,737 - INFO - Created relationship from Room Temperature to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53a30>
2024-08-20 14:42:48,740 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,743 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a53af0>
2024-08-20 14:42:48,747 - INFO - Created relationship from Room Temperature to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7f10>
2024-08-20 14:42:48,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,754 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:48,757 - INFO - Created relationship from Room Temperature to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f160>
2024-08-20 14:42:48,759 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,762 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8c52700>
2024-08-20 14:42:48,768 - INFO - Created relationship from Humidity to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:48,772 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,773 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8c6f460>
2024-08-20 14:42:48,776 - INFO - Created relationship from Humidity to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7e80>
2024-08-20 14:42:48,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,782 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:48,785 - INFO - Created relationship from Humidity to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53a30>
2024-08-20 14:42:48,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,791 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca79d0>
2024-08-20 14:42:48,793 - INFO - Created relationship from Humidity to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:48,796 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,798 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca7eb0>
2024-08-20 14:42:48,800 - INFO - Created relationship from Humidity to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c6d0>
2024-08-20 14:42:48,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,805 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd60>
2024-08-20 14:42:48,807 - INFO - Created relationship from Humidity to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e996ea90>
2024-08-20 14:42:48,811 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,813 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:48,815 - INFO - Created relationship from Humidity to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c550>
2024-08-20 14:42:48,820 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,823 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:48,825 - INFO - Created relationship from Humidity to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7040>
2024-08-20 14:42:48,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,829 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8ca70a0>
2024-08-20 14:42:48,831 - INFO - Created relationship from Humidity to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06550>
2024-08-20 14:42:48,836 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,837 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77e9a531c0>
2024-08-20 14:42:48,843 - INFO - Created relationship from Logistics Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d850>
2024-08-20 14:42:48,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Logistics Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,850 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc40>
2024-08-20 14:42:48,857 - INFO - Created relationship from Warehouse Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fee0>
2024-08-20 14:42:48,861 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Warehouse Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,866 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a4c0a0>
2024-08-20 14:42:48,876 - INFO - Created relationship from Xylitol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc70>
2024-08-20 14:42:48,886 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,891 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:48,897 - INFO - Created relationship from Sugar Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7e50>
2024-08-20 14:42:48,901 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sugar Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,903 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a538e0>
2024-08-20 14:42:48,910 - INFO - Created relationship from Acid Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53bb0>
2024-08-20 14:42:48,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Acid Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,917 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8ca7460>
2024-08-20 14:42:48,924 - INFO - Created relationship from Cooling Agent to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ca0>
2024-08-20 14:42:48,928 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Cooling Agent'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,930 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:48,937 - INFO - Created relationship from Menthol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:48,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Menthol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,944 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a4f370>
2024-08-20 14:42:48,951 - INFO - Created relationship from Pigment to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c310>
2024-08-20 14:42:48,956 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Pigment'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,961 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a4f4c0>
2024-08-20 14:42:48,969 - INFO - Created relationship from Glucose to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa400>
2024-08-20 14:42:48,974 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glucose'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,978 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d00>
2024-08-20 14:42:48,986 - INFO - Created relationship from Glycerinum to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7070>
2024-08-20 14:42:48,990 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glycerinum'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:48,993 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8ca7400>
2024-08-20 14:42:49,001 - INFO - Created relationship from Essence to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53d90>
2024-08-20 14:42:49,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Essence'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,009 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a53af0>
2024-08-20 14:42:49,017 - INFO - Created relationship from Sorbitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:49,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sorbitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,025 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:49,028 - INFO - Created relationship from Xylitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fca0>
2024-08-20 14:42:49,033 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,037 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a4cb80>
2024-08-20 14:42:49,042 - INFO - Created relationship from Granulated Sugar to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06430>
2024-08-20 14:42:49,046 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Granulated Sugar'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,048 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8ca76a0>
2024-08-20 14:42:49,054 - INFO - Created relationship from Gum Base to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca72e0>
2024-08-20 14:42:49,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Base'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,060 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9b9b940>
2024-08-20 14:42:49,065 - INFO - Created relationship from Gum Micelle to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa520>
2024-08-20 14:42:49,069 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,070 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e996e940>
2024-08-20 14:42:49,076 - INFO - Created relationship from Corn Starch to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52d30>
2024-08-20 14:42:49,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Corn Starch'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,081 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8c52c40>
2024-08-20 14:42:49,083 - INFO - Created relationship from Gum Micelle to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c529a0>
2024-08-20 14:42:49,087 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,089 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a538b0>
2024-08-20 14:42:49,092 - INFO - Created relationship from Gum Micelle to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9b361c0>
2024-08-20 14:42:49,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,096 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:49,098 - INFO - Created relationship from Gum Micelle to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52af0>
2024-08-20 14:42:49,102 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,104 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77d8c52a60>
2024-08-20 14:42:49,106 - INFO - Created relationship from Gum Micelle to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77d8c520d0>
2024-08-20 14:42:49,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,112 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7f77e996e370>
2024-08-20 14:42:49,114 - INFO - Created relationship from Gum Micelle to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7f77e9baaa00>
2024-08-20 14:42:49,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:42:49,119 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca70d0>
2024-08-20 14:42:49,122 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:49,172 - INFO - Created relationship from FVSS to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:49,174 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVSS'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,178 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:49,180 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e9b36d00>
2024-08-20 14:42:49,187 - INFO - Created relationship from FVBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:49,189 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,191 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c70>
2024-08-20 14:42:49,192 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:49,197 - INFO - Created relationship from EXCW to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:49,202 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXCW'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,204 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8cbb0>
2024-08-20 14:42:49,206 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:49,210 - INFO - Created relationship from EBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e4f0>
2024-08-20 14:42:49,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,214 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52430>
2024-08-20 14:42:49,216 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8c52640>
2024-08-20 14:42:49,224 - INFO - Created relationship from FVWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53a60>
2024-08-20 14:42:49,228 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,231 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:49,233 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e9a53340>
2024-08-20 14:42:49,240 - INFO - Created relationship from EXPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52340>
2024-08-20 14:42:49,242 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,244 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:49,245 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8c523a0>
2024-08-20 14:42:49,252 - INFO - Created relationship from EXTP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:49,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXTP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,258 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7cd0>
2024-08-20 14:42:49,259 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8ca7820>
2024-08-20 14:42:49,267 - INFO - Created relationship from EXSM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca71f0>
2024-08-20 14:42:49,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXSM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,272 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7460>
2024-08-20 14:42:49,273 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e9b36e20>
2024-08-20 14:42:49,282 - INFO - Created relationship from FVPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f430>
2024-08-20 14:42:49,286 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,289 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36880>
2024-08-20 14:42:49,290 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8ca7790>
2024-08-20 14:42:49,299 - INFO - Created relationship from DMLM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7eb0>
2024-08-20 14:42:49,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMLM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,305 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca70d0>
2024-08-20 14:42:49,307 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e99d7e80>
2024-08-20 14:42:49,316 - INFO - Created relationship from DMRR to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996ea90>
2024-08-20 14:42:49,319 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRR'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,323 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52820>
2024-08-20 14:42:49,329 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8c52c10>
2024-08-20 14:42:49,346 - INFO - Created relationship from DMRM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52a90>
2024-08-20 14:42:49,350 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,353 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53760>
2024-08-20 14:42:49,355 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8c6f970>
2024-08-20 14:42:49,363 - INFO - Created relationship from DMRJ to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:49,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRJ'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,368 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52eb0>
2024-08-20 14:42:49,370 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8c52e80>
2024-08-20 14:42:49,375 - INFO - Created relationship from DMRC to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:49,379 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRC'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,381 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:49,382 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e99d7be0>
2024-08-20 14:42:49,390 - INFO - Created relationship from DMPE to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:49,394 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPE'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,398 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7cd0>
2024-08-20 14:42:49,400 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8ca7580>
2024-08-20 14:42:49,407 - INFO - Created relationship from WSP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a065e0>
2024-08-20 14:42:49,411 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'WSP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,413 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f910>
2024-08-20 14:42:49,415 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77e9b36e20>
2024-08-20 14:42:49,424 - INFO - Created relationship from DMPY to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca74f0>
2024-08-20 14:42:49,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPY'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,430 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca72b0>
2024-08-20 14:42:49,432 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8ca7130>
2024-08-20 14:42:49,441 - INFO - Created relationship from RPWP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7d60>
2024-08-20 14:42:49,445 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'RPWP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,448 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7f77e996e850>
2024-08-20 14:42:49,449 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7f77d8c52610>
2024-08-20 14:42:49,456 - INFO - Created relationship from AUWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c527c0>
2024-08-20 14:42:49,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'AUWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,581 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52c70>
2024-08-20 14:42:49,592 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:49,597 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fdc0>
2024-08-20 14:42:49,598 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:49,602 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c524c0>
2024-08-20 14:42:49,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,605 - INFO - Created relationship from Sheeting to 环境控制 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52730>
2024-08-20 14:42:49,608 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '环境控制'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,610 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:49,613 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,615 - INFO - Created relationship from 环境控制 to 区域空调 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e4f0>
2024-08-20 14:42:49,619 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '环境控制'}), (b:Machine {name: '区域空调'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,661 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7fd0>
2024-08-20 14:42:49,666 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7dc0>
2024-08-20 14:42:49,667 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7fd0>
2024-08-20 14:42:49,669 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:49,674 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36df0>
2024-08-20 14:42:49,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,676 - INFO - Created relationship from Sheeting to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc40>
2024-08-20 14:42:49,679 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,680 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:49,681 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,682 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b20>
2024-08-20 14:42:49,683 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,710 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:49,717 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:49,719 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7f10>
2024-08-20 14:42:49,720 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e310>
2024-08-20 14:42:49,725 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52610>
2024-08-20 14:42:49,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,726 - INFO - Created relationship from Sheeting to 挤压、切片系统生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52d90>
2024-08-20 14:42:49,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,730 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:49,730 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,731 - INFO - Created relationship from 挤压、切片系统生产前调试 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53d60>
2024-08-20 14:42:49,733 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统生产前调试'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,761 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:49,767 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:49,768 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a538e0>
2024-08-20 14:42:49,769 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:49,774 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52430>
2024-08-20 14:42:49,775 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,776 - INFO - Created relationship from Sheeting to 除湿机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:49,780 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,781 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:49,781 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,783 - INFO - Created relationship from 除湿机生产前调试 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c8e0>
2024-08-20 14:42:49,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前调试'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,810 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca70a0>
2024-08-20 14:42:49,817 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7790>
2024-08-20 14:42:49,818 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a065e0>
2024-08-20 14:42:49,820 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c550>
2024-08-20 14:42:49,821 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:49,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,822 - INFO - Created relationship from Sheeting to 除湿机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7940>
2024-08-20 14:42:49,825 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,826 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f10>
2024-08-20 14:42:49,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,828 - INFO - Created relationship from 除湿机生产前空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c5e0>
2024-08-20 14:42:49,831 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,854 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7ee0>
2024-08-20 14:42:49,860 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e520>
2024-08-20 14:42:49,861 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52760>
2024-08-20 14:42:49,863 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52520>
2024-08-20 14:42:49,867 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a538e0>
2024-08-20 14:42:49,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,869 - INFO - Created relationship from Sheeting to 冷冻机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc40>
2024-08-20 14:42:49,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,874 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca30>
2024-08-20 14:42:49,874 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,875 - INFO - Created relationship from 冷冻机生产前调试 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f190>
2024-08-20 14:42:49,878 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前调试'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,902 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:49,907 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52d00>
2024-08-20 14:42:49,910 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52a90>
2024-08-20 14:42:49,911 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52f70>
2024-08-20 14:42:49,912 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e9a0>
2024-08-20 14:42:49,913 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,914 - INFO - Created relationship from Sheeting to 冷冻机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:49,916 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,916 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:49,917 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,918 - INFO - Created relationship from 冷冻机生产前空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:49,921 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,944 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:49,950 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29100>
2024-08-20 14:42:49,952 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c370>
2024-08-20 14:42:49,953 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e9a0>
2024-08-20 14:42:49,958 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06430>
2024-08-20 14:42:49,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,959 - INFO - Created relationship from Sheeting to 切片机除尘系统生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c6d0>
2024-08-20 14:42:49,963 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,964 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4cdf0>
2024-08-20 14:42:49,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,966 - INFO - Created relationship from 切片机除尘系统生产前空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:49,968 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产前空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:49,974 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:49,980 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:49,981 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7820>
2024-08-20 14:42:49,982 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff70>
2024-08-20 14:42:49,983 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:49,984 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:49,985 - INFO - Created relationship from Sheeting to 挤压、切片系统运行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f970>
2024-08-20 14:42:49,988 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统运行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:49,989 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:49,990 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:49,990 - INFO - Created relationship from 挤压、切片系统运行 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca75e0>
2024-08-20 14:42:49,994 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统运行'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,018 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7970>
2024-08-20 14:42:50,024 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f640>
2024-08-20 14:42:50,025 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f190>
2024-08-20 14:42:50,026 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c3d0>
2024-08-20 14:42:50,028 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca00>
2024-08-20 14:42:50,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,029 - INFO - Created relationship from Sheeting to 挤压、切片系统停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:50,032 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,033 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7d30>
2024-08-20 14:42:50,034 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,035 - INFO - Created relationship from 挤压、切片系统停止生产 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8cac0>
2024-08-20 14:42:50,038 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统停止生产'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,063 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:50,068 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e940>
2024-08-20 14:42:50,069 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:50,071 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c5b0>
2024-08-20 14:42:50,072 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:50,072 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,073 - INFO - Created relationship from Sheeting to 冷冻机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f2e0>
2024-08-20 14:42:50,075 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,076 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa00>
2024-08-20 14:42:50,077 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,077 - INFO - Created relationship from 冷冻机生产中空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:50,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产中空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,111 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:50,116 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fa30>
2024-08-20 14:42:50,118 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52160>
2024-08-20 14:42:50,119 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fa30>
2024-08-20 14:42:50,120 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d00>
2024-08-20 14:42:50,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,121 - INFO - Created relationship from Sheeting to 除湿机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:50,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,125 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa00>
2024-08-20 14:42:50,126 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,127 - INFO - Created relationship from 除湿机生产中空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0a0>
2024-08-20 14:42:50,131 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产中空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,162 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b9b940>
2024-08-20 14:42:50,169 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c370>
2024-08-20 14:42:50,170 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:50,171 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e850>
2024-08-20 14:42:50,173 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:50,173 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,174 - INFO - Created relationship from Sheeting to 切片机除尘系统生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52af0>
2024-08-20 14:42:50,176 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,177 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7f40>
2024-08-20 14:42:50,178 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,179 - INFO - Created relationship from 切片机除尘系统生产中空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:50,182 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产中空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,214 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b9b940>
2024-08-20 14:42:50,220 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4cee0>
2024-08-20 14:42:50,221 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:50,223 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f460>
2024-08-20 14:42:50,227 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a00>
2024-08-20 14:42:50,228 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,229 - INFO - Created relationship from Sheeting to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:50,233 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,234 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca70a0>
2024-08-20 14:42:50,234 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,235 - INFO - Created relationship from 异常处理 to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7c0>
2024-08-20 14:42:50,238 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,245 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:50,249 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52c70>
2024-08-20 14:42:50,250 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:50,254 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7af0>
2024-08-20 14:42:50,255 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca78b0>
2024-08-20 14:42:50,256 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,257 - INFO - Created relationship from Mixer to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f370>
2024-08-20 14:42:50,260 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,262 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f250>
2024-08-20 14:42:50,264 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,266 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca90>
2024-08-20 14:42:50,269 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,300 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c3a0>
2024-08-20 14:42:50,306 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a069a0>
2024-08-20 14:42:50,307 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:50,309 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:50,313 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:50,314 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,315 - INFO - Created relationship from Mixer to 生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996ed00>
2024-08-20 14:42:50,319 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,320 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c670>
2024-08-20 14:42:50,320 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,321 - INFO - Created relationship from 生产前调试 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c340>
2024-08-20 14:42:50,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '生产前调试'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,330 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:50,334 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f3d0>
2024-08-20 14:42:50,336 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca74f0>
2024-08-20 14:42:50,337 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:50,341 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7be0>
2024-08-20 14:42:50,342 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,342 - INFO - Created relationship from Mixer to 启动夹套水加热器 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f580>
2024-08-20 14:42:50,345 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '启动夹套水加热器'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,346 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36f70>
2024-08-20 14:42:50,347 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,348 - INFO - Created relationship from 启动夹套水加热器 to 夹套水系统（设备清单中名称为热水）-用到热水、模温机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:50,350 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '启动夹套水加热器'}), (b:Machine {name: '夹套水系统（设备清单中名称为热水）-用到热水、模温机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,356 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:50,362 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ee0>
2024-08-20 14:42:50,363 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:50,365 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f610>
2024-08-20 14:42:50,369 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0a0>
2024-08-20 14:42:50,370 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,371 - INFO - Created relationship from Mixer to NCS系统降温 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c340>
2024-08-20 14:42:50,373 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: 'NCS系统降温'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,374 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4cee0>
2024-08-20 14:42:50,375 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,376 - INFO - Created relationship from NCS系统降温 to 停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:50,377 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'NCS系统降温'}), (b:Machine {name: '停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,383 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:50,389 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36be0>
2024-08-20 14:42:50,390 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b50>
2024-08-20 14:42:50,392 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:50,396 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b9b940>
2024-08-20 14:42:50,397 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,397 - INFO - Created relationship from Mixer to 除尘系统启动 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c9d0>
2024-08-20 14:42:50,401 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '除尘系统启动'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,401 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4fcd0>
2024-08-20 14:42:50,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,403 - INFO - Created relationship from 除尘系统启动 to 混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff70>
2024-08-20 14:42:50,405 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除尘系统启动'}), (b:Machine {name: '混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,439 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a00>
2024-08-20 14:42:50,445 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7490>
2024-08-20 14:42:50,447 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7700>
2024-08-20 14:42:50,449 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fcd0>
2024-08-20 14:42:50,454 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53d30>
2024-08-20 14:42:50,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,456 - INFO - Created relationship from Mixer to 1#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:50,458 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '1#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,459 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:50,459 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,460 - INFO - Created relationship from 1#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7490>
2024-08-20 14:42:50,463 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '1#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,469 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7370>
2024-08-20 14:42:50,475 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f850>
2024-08-20 14:42:50,476 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe50>
2024-08-20 14:42:50,477 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c970>
2024-08-20 14:42:50,478 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a992b0>
2024-08-20 14:42:50,479 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,480 - INFO - Created relationship from Mixer to 2#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7df0>
2024-08-20 14:42:50,482 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '2#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,482 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e790>
2024-08-20 14:42:50,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,484 - INFO - Created relationship from 2#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53d90>
2024-08-20 14:42:50,488 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '2#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,494 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e996e970>
2024-08-20 14:42:50,499 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e99d7f40>
2024-08-20 14:42:50,500 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ce20>
2024-08-20 14:42:50,501 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c1f0>
2024-08-20 14:42:50,503 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f4f0>
2024-08-20 14:42:50,503 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,504 - INFO - Created relationship from Mixer to 3#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:50,506 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '3#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,507 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca74c0>
2024-08-20 14:42:50,507 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,508 - INFO - Created relationship from 3#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:50,511 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '3#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,517 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca79d0>
2024-08-20 14:42:50,522 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f190>
2024-08-20 14:42:50,524 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53d00>
2024-08-20 14:42:50,525 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:50,526 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d00>
2024-08-20 14:42:50,527 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,528 - INFO - Created relationship from Mixer to 4#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:50,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '4#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,530 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca74c0>
2024-08-20 14:42:50,531 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,532 - INFO - Created relationship from 4#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f220>
2024-08-20 14:42:50,535 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '4#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,571 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fcd0>
2024-08-20 14:42:50,577 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4ce80>
2024-08-20 14:42:50,579 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c160>
2024-08-20 14:42:50,580 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7ee0>
2024-08-20 14:42:50,581 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:50,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,583 - INFO - Created relationship from Mixer to 停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29550>
2024-08-20 14:42:50,585 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,586 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4cee0>
2024-08-20 14:42:50,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,588 - INFO - Created relationship from 停止生产 to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c490>
2024-08-20 14:42:50,591 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '停止生产'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,597 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f040>
2024-08-20 14:42:50,603 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:50,604 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:50,606 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7970>
2024-08-20 14:42:50,610 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53220>
2024-08-20 14:42:50,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,612 - INFO - Created relationship from Mixer to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a537c0>
2024-08-20 14:42:50,616 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,617 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:50,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,618 - INFO - Created relationship from 异常处理 to 一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6dd30>
2024-08-20 14:42:50,621 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,627 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e996e2e0>
2024-08-20 14:42:50,632 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996eac0>
2024-08-20 14:42:50,635 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:50,636 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53a00>
2024-08-20 14:42:50,638 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a531f0>
2024-08-20 14:42:50,640 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,641 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:50,644 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,645 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:50,648 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,650 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5b0>
2024-08-20 14:42:50,653 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,686 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:50,692 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f190>
2024-08-20 14:42:50,693 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca60>
2024-08-20 14:42:50,695 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06430>
2024-08-20 14:42:50,699 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca90>
2024-08-20 14:42:50,700 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,701 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c490>
2024-08-20 14:42:50,704 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,706 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f640>
2024-08-20 14:42:50,710 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,711 - INFO - Created relationship from nan to 振筛机\配料提升机升降正常\电子称打印机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5b0>
2024-08-20 14:42:50,713 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机\\配料提升机升降正常\\电子称打印机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,745 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:50,750 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b50>
2024-08-20 14:42:50,751 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53910>
2024-08-20 14:42:50,752 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53cd0>
2024-08-20 14:42:50,755 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36fa0>
2024-08-20 14:42:50,756 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,756 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6d700>
2024-08-20 14:42:50,759 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,761 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52700>
2024-08-20 14:42:50,761 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,762 - INFO - Created relationship from nan to 振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d880>
2024-08-20 14:42:50,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,794 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:50,799 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53cd0>
2024-08-20 14:42:50,800 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53c10>
2024-08-20 14:42:50,801 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b50>
2024-08-20 14:42:50,802 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:50,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,804 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:50,807 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,808 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f520>
2024-08-20 14:42:50,809 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,810 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7c0>
2024-08-20 14:42:50,818 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,824 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4cee0>
2024-08-20 14:42:50,829 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52790>
2024-08-20 14:42:50,830 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ceb0>
2024-08-20 14:42:50,832 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f820>
2024-08-20 14:42:50,836 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f040>
2024-08-20 14:42:50,837 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,837 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f970>
2024-08-20 14:42:50,840 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,841 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b20>
2024-08-20 14:42:50,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,843 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7df0>
2024-08-20 14:42:50,844 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,850 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53a90>
2024-08-20 14:42:50,856 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53460>
2024-08-20 14:42:50,858 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36f70>
2024-08-20 14:42:50,859 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d790>
2024-08-20 14:42:50,860 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c529a0>
2024-08-20 14:42:50,861 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,862 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6dac0>
2024-08-20 14:42:50,865 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,866 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36e80>
2024-08-20 14:42:50,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,868 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53340>
2024-08-20 14:42:50,869 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,875 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53220>
2024-08-20 14:42:50,881 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c70>
2024-08-20 14:42:50,882 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca72e0>
2024-08-20 14:42:50,884 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:50,888 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc40>
2024-08-20 14:42:50,889 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,889 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa7c0>
2024-08-20 14:42:50,892 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,893 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4cee0>
2024-08-20 14:42:50,894 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,895 - INFO - Created relationship from nan to 吸包机、振筛机（密封气囊） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52ac0>
2024-08-20 14:42:50,897 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吸包机、振筛机（密封气囊）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,938 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c4c0>
2024-08-20 14:42:50,944 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c040>
2024-08-20 14:42:50,945 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc40>
2024-08-20 14:42:50,946 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8b0>
2024-08-20 14:42:50,951 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7400>
2024-08-20 14:42:50,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,953 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca70a0>
2024-08-20 14:42:50,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,958 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7cd0>
2024-08-20 14:42:50,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,959 - INFO - Created relationship from nan to 振筛机（震动开关、抽风开关、密封气囊）、电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:50,962 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机（震动开关、抽风开关、密封气囊）、电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,968 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b360a0>
2024-08-20 14:42:50,973 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:50,974 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c6a0>
2024-08-20 14:42:50,975 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:50,979 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36a60>
2024-08-20 14:42:50,980 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:50,980 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53970>
2024-08-20 14:42:50,983 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:50,984 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53a00>
2024-08-20 14:42:50,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:50,986 - INFO - Created relationship from nan to 气动泵 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca72b0>
2024-08-20 14:42:50,988 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:50,994 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e50>
2024-08-20 14:42:50,999 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:51,000 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f2b0>
2024-08-20 14:42:51,001 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c640>
2024-08-20 14:42:51,005 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c520>
2024-08-20 14:42:51,006 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,007 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:51,010 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,011 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c528e0>
2024-08-20 14:42:51,012 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,013 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c130>
2024-08-20 14:42:51,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,022 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f9a0>
2024-08-20 14:42:51,026 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f2e0>
2024-08-20 14:42:51,028 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca76a0>
2024-08-20 14:42:51,029 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7790>
2024-08-20 14:42:51,033 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53c10>
2024-08-20 14:42:51,034 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,034 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53b80>
2024-08-20 14:42:51,037 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,038 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36be0>
2024-08-20 14:42:51,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,040 - INFO - Created relationship from nan to 电子秤（预热60min） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996ea90>
2024-08-20 14:42:51,042 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤（预热60min）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,049 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:51,052 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:51,054 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36970>
2024-08-20 14:42:51,055 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53130>
2024-08-20 14:42:51,059 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53520>
2024-08-20 14:42:51,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,060 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:51,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,064 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7730>
2024-08-20 14:42:51,065 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,065 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f1f0>
2024-08-20 14:42:51,068 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,075 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:51,079 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c9d0>
2024-08-20 14:42:51,080 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52880>
2024-08-20 14:42:51,082 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:51,087 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6a0>
2024-08-20 14:42:51,087 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,088 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c310>
2024-08-20 14:42:51,091 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,092 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa30>
2024-08-20 14:42:51,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,096 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机\抽风系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:51,099 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机\\抽风系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,106 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca74c0>
2024-08-20 14:42:51,111 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c70>
2024-08-20 14:42:51,112 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7bb0>
2024-08-20 14:42:51,113 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:51,116 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36880>
2024-08-20 14:42:51,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,117 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36850>
2024-08-20 14:42:51,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,121 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b298b0>
2024-08-20 14:42:51,122 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,122 - INFO - Created relationship from nan to 地磅 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36850>
2024-08-20 14:42:51,125 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '地磅'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,132 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b368e0>
2024-08-20 14:42:51,138 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53130>
2024-08-20 14:42:51,139 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:51,140 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7130>
2024-08-20 14:42:51,144 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:51,145 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,145 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:51,147 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,148 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99a80a0>
2024-08-20 14:42:51,149 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,150 - INFO - Created relationship from nan to 升降梯 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4cbb0>
2024-08-20 14:42:51,153 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '升降梯'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,165 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:51,172 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29820>
2024-08-20 14:42:51,174 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7160>
2024-08-20 14:42:51,175 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca79a0>
2024-08-20 14:42:51,176 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53fd0>
2024-08-20 14:42:51,176 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,177 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53460>
2024-08-20 14:42:51,179 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,180 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc70>
2024-08-20 14:42:51,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,181 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7c0>
2024-08-20 14:42:51,184 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,191 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36a00>
2024-08-20 14:42:51,197 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:51,198 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c520d0>
2024-08-20 14:42:51,199 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52760>
2024-08-20 14:42:51,200 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52640>
2024-08-20 14:42:51,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,201 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52460>
2024-08-20 14:42:51,203 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,204 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52280>
2024-08-20 14:42:51,204 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,205 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c880>
2024-08-20 14:42:51,208 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,215 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b366a0>
2024-08-20 14:42:51,237 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e99d7fd0>
2024-08-20 14:42:51,239 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:51,241 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53a60>
2024-08-20 14:42:51,246 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53ca0>
2024-08-20 14:42:51,246 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,248 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca71f0>
2024-08-20 14:42:51,250 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,250 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f70>
2024-08-20 14:42:51,251 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,252 - INFO - Created relationship from nan to 电子称、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9baa400>
2024-08-20 14:42:51,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,261 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f70>
2024-08-20 14:42:51,268 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca73d0>
2024-08-20 14:42:51,269 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:51,271 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53820>
2024-08-20 14:42:51,276 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe20>
2024-08-20 14:42:51,276 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,277 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f580>
2024-08-20 14:42:51,279 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,281 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36520>
2024-08-20 14:42:51,281 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,282 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:51,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,317 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52820>
2024-08-20 14:42:51,322 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:51,324 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c340>
2024-08-20 14:42:51,325 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52460>
2024-08-20 14:42:51,329 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52580>
2024-08-20 14:42:51,330 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,331 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:51,335 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,336 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36d60>
2024-08-20 14:42:51,336 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,338 - INFO - Created relationship from nan to 电子称（Depend on PPlan）、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f850>
2024-08-20 14:42:51,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称（Depend on PPlan）、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,348 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc10>
2024-08-20 14:42:51,353 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:51,354 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a530a0>
2024-08-20 14:42:51,355 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:51,357 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:51,357 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,358 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c910>
2024-08-20 14:42:51,360 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,361 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:51,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,362 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7970>
2024-08-20 14:42:51,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,371 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a537f0>
2024-08-20 14:42:51,377 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53b80>
2024-08-20 14:42:51,378 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f640>
2024-08-20 14:42:51,380 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fdc0>
2024-08-20 14:42:51,381 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b368e0>
2024-08-20 14:42:51,381 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,382 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b361c0>
2024-08-20 14:42:51,384 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,385 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52340>
2024-08-20 14:42:51,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,386 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52ac0>
2024-08-20 14:42:51,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,395 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a060d0>
2024-08-20 14:42:51,402 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52ac0>
2024-08-20 14:42:51,403 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52f70>
2024-08-20 14:42:51,404 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8caf0>
2024-08-20 14:42:51,405 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b366a0>
2024-08-20 14:42:51,406 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,407 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7c40>
2024-08-20 14:42:51,409 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,409 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5b0>
2024-08-20 14:42:51,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,411 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53b50>
2024-08-20 14:42:51,415 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,426 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53a90>
2024-08-20 14:42:51,431 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7040>
2024-08-20 14:42:51,432 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7610>
2024-08-20 14:42:51,434 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e970>
2024-08-20 14:42:51,437 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a992b0>
2024-08-20 14:42:51,437 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,438 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c10>
2024-08-20 14:42:51,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,442 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7520>
2024-08-20 14:42:51,443 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,444 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53d90>
2024-08-20 14:42:51,447 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,454 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f490>
2024-08-20 14:42:51,457 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:51,458 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:51,459 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:51,460 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:51,460 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,461 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52820>
2024-08-20 14:42:51,464 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,465 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52bb0>
2024-08-20 14:42:51,465 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,466 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52820>
2024-08-20 14:42:51,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,475 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a06100>
2024-08-20 14:42:51,481 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36b50>
2024-08-20 14:42:51,482 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:51,483 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fb50>
2024-08-20 14:42:51,484 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f490>
2024-08-20 14:42:51,484 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,485 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a539d0>
2024-08-20 14:42:51,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,488 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53970>
2024-08-20 14:42:51,491 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,492 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca74c0>
2024-08-20 14:42:51,495 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,501 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:51,506 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:51,507 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7670>
2024-08-20 14:42:51,507 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:51,510 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a539a0>
2024-08-20 14:42:51,510 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,511 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53b20>
2024-08-20 14:42:51,514 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,515 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:51,515 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,515 - INFO - Created relationship from nan to Kanban with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:51,519 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'Kanban'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,526 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b360d0>
2024-08-20 14:42:51,531 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:51,531 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:51,532 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c521f0>
2024-08-20 14:42:51,535 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:51,535 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,535 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52160>
2024-08-20 14:42:51,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,540 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:51,540 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,540 - INFO - Created relationship from nan to 叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36d60>
2024-08-20 14:42:51,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,551 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7df0>
2024-08-20 14:42:51,556 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fb50>
2024-08-20 14:42:51,557 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fcd0>
2024-08-20 14:42:51,558 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53ca0>
2024-08-20 14:42:51,562 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:51,562 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,562 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:51,566 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,567 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:51,567 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,568 - INFO - Created relationship from nan to 砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:51,571 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,578 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:51,583 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7cd0>
2024-08-20 14:42:51,583 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:51,584 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53880>
2024-08-20 14:42:51,586 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f940>
2024-08-20 14:42:51,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,587 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff10>
2024-08-20 14:42:51,590 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,591 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:51,591 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,591 - INFO - Created relationship from nan to 1#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36e80>
2024-08-20 14:42:51,595 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,602 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c400>
2024-08-20 14:42:51,607 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52c70>
2024-08-20 14:42:51,608 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b29a90>
2024-08-20 14:42:51,609 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52340>
2024-08-20 14:42:51,613 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52610>
2024-08-20 14:42:51,613 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,613 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36f40>
2024-08-20 14:42:51,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,618 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36850>
2024-08-20 14:42:51,618 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,619 - INFO - Created relationship from nan to 砂糖系统、糖粉接收罐和循环系统罐、磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:51,622 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、糖粉接收罐和循环系统罐、磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,630 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f490>
2024-08-20 14:42:51,635 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53b50>
2024-08-20 14:42:51,636 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53ac0>
2024-08-20 14:42:51,636 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7550>
2024-08-20 14:42:51,639 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7670>
2024-08-20 14:42:51,639 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,640 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fac0>
2024-08-20 14:42:51,643 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,644 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53910>
2024-08-20 14:42:51,644 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,645 - INFO - Created relationship from nan to 2#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:51,648 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '2#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,656 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff10>
2024-08-20 14:42:51,661 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e99d7df0>
2024-08-20 14:42:51,662 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36a00>
2024-08-20 14:42:51,663 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c760>
2024-08-20 14:42:51,665 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29bb0>
2024-08-20 14:42:51,665 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,666 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc70>
2024-08-20 14:42:51,669 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,670 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f550>
2024-08-20 14:42:51,670 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,671 - INFO - Created relationship from nan to 3#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:51,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '3#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,683 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c3d0>
2024-08-20 14:42:51,687 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:51,688 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa30>
2024-08-20 14:42:51,689 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe20>
2024-08-20 14:42:51,693 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29e50>
2024-08-20 14:42:51,693 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,694 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c6d0>
2024-08-20 14:42:51,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,698 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36700>
2024-08-20 14:42:51,699 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,700 - INFO - Created relationship from nan to 电动叉车、电葫芦、砂糖系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7df0>
2024-08-20 14:42:51,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车、电葫芦、砂糖系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,712 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:51,717 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffa0>
2024-08-20 14:42:51,718 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53910>
2024-08-20 14:42:51,719 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c6d0>
2024-08-20 14:42:51,723 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53790>
2024-08-20 14:42:51,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,724 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53ca0>
2024-08-20 14:42:51,727 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,728 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:51,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,730 - INFO - Created relationship from nan to 电葫芦、ZMT21 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f3a0>
2024-08-20 14:42:51,734 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电葫芦、ZMT21'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,745 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36d30>
2024-08-20 14:42:51,749 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36100>
2024-08-20 14:42:51,751 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b29bb0>
2024-08-20 14:42:51,752 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:51,756 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6d0>
2024-08-20 14:42:51,757 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,758 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:51,762 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,763 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9baa0d0>
2024-08-20 14:42:51,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,765 - INFO - Created relationship from nan to 下糖斗RV阀、磨糖机、磨糖风机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996ea90>
2024-08-20 14:42:51,768 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '下糖斗RV阀、磨糖机、磨糖风机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,779 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f250>
2024-08-20 14:42:51,787 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe20>
2024-08-20 14:42:51,788 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b29f70>
2024-08-20 14:42:51,790 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c400>
2024-08-20 14:42:51,793 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36eb0>
2024-08-20 14:42:51,793 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,794 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:51,798 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,799 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f9a0>
2024-08-20 14:42:51,799 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,801 - INFO - Created relationship from nan to 卸糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:51,805 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '卸糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,817 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53c70>
2024-08-20 14:42:51,824 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7670>
2024-08-20 14:42:51,826 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53a90>
2024-08-20 14:42:51,827 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53d60>
2024-08-20 14:42:51,831 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc70>
2024-08-20 14:42:51,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,833 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7d00>
2024-08-20 14:42:51,837 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,838 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36880>
2024-08-20 14:42:51,838 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,840 - INFO - Created relationship from nan to 1#风机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c8c400>
2024-08-20 14:42:51,843 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#风机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,855 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29be0>
2024-08-20 14:42:51,862 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:51,863 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6a0>
2024-08-20 14:42:51,864 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:51,868 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7250>
2024-08-20 14:42:51,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,870 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:51,873 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,875 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4fb20>
2024-08-20 14:42:51,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,877 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd90>
2024-08-20 14:42:51,881 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,894 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29460>
2024-08-20 14:42:51,898 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36790>
2024-08-20 14:42:51,901 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b366a0>
2024-08-20 14:42:51,903 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f4c0>
2024-08-20 14:42:51,904 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f9a0>
2024-08-20 14:42:51,905 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,906 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:51,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,911 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53880>
2024-08-20 14:42:51,912 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,914 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a60>
2024-08-20 14:42:51,916 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,928 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca76a0>
2024-08-20 14:42:51,936 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53a30>
2024-08-20 14:42:51,938 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff70>
2024-08-20 14:42:51,939 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd00>
2024-08-20 14:42:51,940 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e99d7d30>
2024-08-20 14:42:51,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,942 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:51,946 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,947 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8c550>
2024-08-20 14:42:51,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,948 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29e50>
2024-08-20 14:42:51,951 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,963 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f070>
2024-08-20 14:42:51,970 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:51,972 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996ea60>
2024-08-20 14:42:51,974 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e520>
2024-08-20 14:42:51,975 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5b0>
2024-08-20 14:42:51,975 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:51,976 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f2e0>
2024-08-20 14:42:51,979 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:51,980 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29970>
2024-08-20 14:42:51,980 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:51,981 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36e20>
2024-08-20 14:42:51,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:51,997 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36160>
2024-08-20 14:42:52,002 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f850>
2024-08-20 14:42:52,004 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:52,005 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53280>
2024-08-20 14:42:52,006 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4cfd0>
2024-08-20 14:42:52,007 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,008 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52040>
2024-08-20 14:42:52,011 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,012 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7970>
2024-08-20 14:42:52,013 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,014 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53280>
2024-08-20 14:42:52,017 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,029 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:52,037 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f430>
2024-08-20 14:42:52,039 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b365e0>
2024-08-20 14:42:52,041 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36790>
2024-08-20 14:42:52,046 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b299a0>
2024-08-20 14:42:52,046 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,048 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29eb0>
2024-08-20 14:42:52,050 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,051 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f640>
2024-08-20 14:42:52,052 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,054 - INFO - Created relationship from nan to 搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:52,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,073 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52a60>
2024-08-20 14:42:52,081 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7c0>
2024-08-20 14:42:52,082 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe20>
2024-08-20 14:42:52,084 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b298e0>
2024-08-20 14:42:52,089 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29fd0>
2024-08-20 14:42:52,090 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,091 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b367c0>
2024-08-20 14:42:52,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,096 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36cd0>
2024-08-20 14:42:52,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,097 - INFO - Created relationship from nan to 搅拌罐、吸尘器 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:52,100 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐、吸尘器'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,113 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f730>
2024-08-20 14:42:52,121 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a539d0>
2024-08-20 14:42:52,122 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7970>
2024-08-20 14:42:52,124 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52a90>
2024-08-20 14:42:52,125 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c040>
2024-08-20 14:42:52,126 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,127 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53460>
2024-08-20 14:42:52,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,130 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff70>
2024-08-20 14:42:52,131 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,132 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f910>
2024-08-20 14:42:52,135 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,196 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36100>
2024-08-20 14:42:52,204 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36790>
2024-08-20 14:42:52,206 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b297c0>
2024-08-20 14:42:52,208 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbb0>
2024-08-20 14:42:52,209 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f4f0>
2024-08-20 14:42:52,209 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,210 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e8e0>
2024-08-20 14:42:52,214 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,215 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52520>
2024-08-20 14:42:52,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,217 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e7f0>
2024-08-20 14:42:52,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,236 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:52,244 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fca0>
2024-08-20 14:42:52,245 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b29f10>
2024-08-20 14:42:52,246 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36970>
2024-08-20 14:42:52,247 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36dc0>
2024-08-20 14:42:52,248 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,249 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a06c70>
2024-08-20 14:42:52,253 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,254 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:52,254 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,255 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53a00>
2024-08-20 14:42:52,259 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,266 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53220>
2024-08-20 14:42:52,271 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b202e0>
2024-08-20 14:42:52,273 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36730>
2024-08-20 14:42:52,274 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36d90>
2024-08-20 14:42:52,275 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29f40>
2024-08-20 14:42:52,275 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,276 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29f70>
2024-08-20 14:42:52,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,279 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c521f0>
2024-08-20 14:42:52,280 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,280 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:52,283 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,290 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f610>
2024-08-20 14:42:52,296 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa60>
2024-08-20 14:42:52,297 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b20>
2024-08-20 14:42:52,298 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:52,303 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:52,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,304 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca71c0>
2024-08-20 14:42:52,306 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,307 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7880>
2024-08-20 14:42:52,307 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,308 - INFO - Created relationship from nan to 振动筛 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:52,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振动筛'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,318 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fca0>
2024-08-20 14:42:52,326 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52dc0>
2024-08-20 14:42:52,327 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52940>
2024-08-20 14:42:52,328 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:52,329 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29f10>
2024-08-20 14:42:52,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,330 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36e80>
2024-08-20 14:42:52,332 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,333 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:52,334 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,335 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e940>
2024-08-20 14:42:52,338 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,345 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7e50>
2024-08-20 14:42:52,347 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36be0>
2024-08-20 14:42:52,348 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c820>
2024-08-20 14:42:52,349 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29e80>
2024-08-20 14:42:52,350 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52df0>
2024-08-20 14:42:52,351 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,352 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:52,354 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,355 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:52,355 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,356 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f760>
2024-08-20 14:42:52,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,366 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9baaa00>
2024-08-20 14:42:52,372 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7640>
2024-08-20 14:42:52,373 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:52,374 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:52,378 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca75b0>
2024-08-20 14:42:52,379 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,380 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fb20>
2024-08-20 14:42:52,382 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,382 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4faf0>
2024-08-20 14:42:52,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,387 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:52,390 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,398 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52b20>
2024-08-20 14:42:52,405 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29ac0>
2024-08-20 14:42:52,406 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c370>
2024-08-20 14:42:52,408 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36eb0>
2024-08-20 14:42:52,412 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:52,413 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,414 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53d60>
2024-08-20 14:42:52,418 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,420 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e99d7f70>
2024-08-20 14:42:52,421 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,423 - INFO - Created relationship from nan to 是否为胶基系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36a60>
2024-08-20 14:42:52,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为胶基系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,436 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29e50>
2024-08-20 14:42:52,442 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29370>
2024-08-20 14:42:52,444 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52cd0>
2024-08-20 14:42:52,445 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:52,446 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:52,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,447 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:52,450 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,451 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca75b0>
2024-08-20 14:42:52,452 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,453 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca70d0>
2024-08-20 14:42:52,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,463 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a533a0>
2024-08-20 14:42:52,469 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:52,470 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b50>
2024-08-20 14:42:52,472 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f760>
2024-08-20 14:42:52,476 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f670>
2024-08-20 14:42:52,477 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,478 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c526a0>
2024-08-20 14:42:52,481 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,482 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52220>
2024-08-20 14:42:52,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,484 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d880>
2024-08-20 14:42:52,486 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,496 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29400>
2024-08-20 14:42:52,503 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b360d0>
2024-08-20 14:42:52,504 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36fd0>
2024-08-20 14:42:52,506 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06430>
2024-08-20 14:42:52,510 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:52,511 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,512 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36ee0>
2024-08-20 14:42:52,515 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,516 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b293a0>
2024-08-20 14:42:52,517 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,518 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6ddc0>
2024-08-20 14:42:52,522 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,533 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52790>
2024-08-20 14:42:52,540 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c526a0>
2024-08-20 14:42:52,541 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4faf0>
2024-08-20 14:42:52,542 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbb0>
2024-08-20 14:42:52,543 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e80>
2024-08-20 14:42:52,544 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,545 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b20>
2024-08-20 14:42:52,548 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,550 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c940>
2024-08-20 14:42:52,550 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,551 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca79a0>
2024-08-20 14:42:52,554 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,567 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c40>
2024-08-20 14:42:52,574 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:52,575 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:52,576 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:52,577 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52e50>
2024-08-20 14:42:52,578 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,579 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6d700>
2024-08-20 14:42:52,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,583 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29970>
2024-08-20 14:42:52,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,585 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:52,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,599 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:52,607 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c6a0>
2024-08-20 14:42:52,609 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:52,610 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36d00>
2024-08-20 14:42:52,615 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c760>
2024-08-20 14:42:52,616 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,617 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29ac0>
2024-08-20 14:42:52,620 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,621 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:52,622 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,624 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52af0>
2024-08-20 14:42:52,628 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,640 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd60>
2024-08-20 14:42:52,647 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fcd0>
2024-08-20 14:42:52,648 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:52,650 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ee0>
2024-08-20 14:42:52,655 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:52,656 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,657 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ee0>
2024-08-20 14:42:52,661 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,662 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f10>
2024-08-20 14:42:52,663 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,664 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fca0>
2024-08-20 14:42:52,667 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,681 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99a80a0>
2024-08-20 14:42:52,689 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:52,691 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c528b0>
2024-08-20 14:42:52,692 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29a00>
2024-08-20 14:42:52,693 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c760>
2024-08-20 14:42:52,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,695 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36d00>
2024-08-20 14:42:52,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,698 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:52,699 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,700 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fca0>
2024-08-20 14:42:52,705 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,718 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:52,725 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:52,726 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:52,727 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29460>
2024-08-20 14:42:52,728 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52160>
2024-08-20 14:42:52,729 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,730 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52730>
2024-08-20 14:42:52,734 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,735 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:52,736 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,737 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd60>
2024-08-20 14:42:52,740 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,752 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:52,756 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca75b0>
2024-08-20 14:42:52,758 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a60>
2024-08-20 14:42:52,759 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e50>
2024-08-20 14:42:52,760 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6dca0>
2024-08-20 14:42:52,760 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,762 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fcd0>
2024-08-20 14:42:52,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,765 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52370>
2024-08-20 14:42:52,766 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,767 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:52,770 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,783 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52dc0>
2024-08-20 14:42:52,789 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29940>
2024-08-20 14:42:52,791 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b360d0>
2024-08-20 14:42:52,792 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36520>
2024-08-20 14:42:52,793 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f160>
2024-08-20 14:42:52,794 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,796 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b202b0>
2024-08-20 14:42:52,798 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,799 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29400>
2024-08-20 14:42:52,802 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,804 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52820>
2024-08-20 14:42:52,808 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,822 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:52,828 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52370>
2024-08-20 14:42:52,829 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6d0>
2024-08-20 14:42:52,831 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5e0>
2024-08-20 14:42:52,836 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:52,837 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,838 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:52,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,843 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c3d0>
2024-08-20 14:42:52,844 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,845 - INFO - Created relationship from nan to 是否为山梨醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:52,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为山梨醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,862 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:52,871 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06eb0>
2024-08-20 14:42:52,873 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4cfd0>
2024-08-20 14:42:52,874 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d850>
2024-08-20 14:42:52,876 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1f0>
2024-08-20 14:42:52,876 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,877 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:52,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,881 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f760>
2024-08-20 14:42:52,881 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,882 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c522e0>
2024-08-20 14:42:52,886 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,899 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c528e0>
2024-08-20 14:42:52,906 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52460>
2024-08-20 14:42:52,907 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b29a00>
2024-08-20 14:42:52,909 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a531f0>
2024-08-20 14:42:52,911 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:52,911 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,912 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29970>
2024-08-20 14:42:52,917 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,918 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c520d0>
2024-08-20 14:42:52,919 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,920 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52df0>
2024-08-20 14:42:52,923 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,936 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:52,944 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd90>
2024-08-20 14:42:52,945 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fca0>
2024-08-20 14:42:52,947 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fee0>
2024-08-20 14:42:52,951 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c5e0>
2024-08-20 14:42:52,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,953 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c580>
2024-08-20 14:42:52,956 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,958 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:52,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,960 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:52,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:52,979 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c610>
2024-08-20 14:42:52,987 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:52,988 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6fca0>
2024-08-20 14:42:52,989 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f3d0>
2024-08-20 14:42:52,990 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:52,991 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:52,992 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52760>
2024-08-20 14:42:52,996 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:52,997 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c520d0>
2024-08-20 14:42:52,997 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:52,998 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29e20>
2024-08-20 14:42:53,000 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,014 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c550>
2024-08-20 14:42:53,022 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e850>
2024-08-20 14:42:53,024 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c8b0>
2024-08-20 14:42:53,025 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29460>
2024-08-20 14:42:53,026 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c520d0>
2024-08-20 14:42:53,026 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,028 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52760>
2024-08-20 14:42:53,030 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,031 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f250>
2024-08-20 14:42:53,031 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,032 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f820>
2024-08-20 14:42:53,035 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,048 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:53,056 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1f0>
2024-08-20 14:42:53,057 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c550>
2024-08-20 14:42:53,058 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c130>
2024-08-20 14:42:53,059 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:53,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,061 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c640>
2024-08-20 14:42:53,066 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,067 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c970>
2024-08-20 14:42:53,067 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,069 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:53,073 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,087 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:53,093 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f550>
2024-08-20 14:42:53,094 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:53,096 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c525b0>
2024-08-20 14:42:53,097 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:53,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,099 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29370>
2024-08-20 14:42:53,103 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,104 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8c8b0>
2024-08-20 14:42:53,104 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,106 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36580>
2024-08-20 14:42:53,108 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,121 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b368b0>
2024-08-20 14:42:53,129 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29130>
2024-08-20 14:42:53,131 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52700>
2024-08-20 14:42:53,132 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52e50>
2024-08-20 14:42:53,133 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52310>
2024-08-20 14:42:53,134 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,135 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f460>
2024-08-20 14:42:53,137 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,138 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:53,138 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,139 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:53,143 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,154 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:53,157 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c490>
2024-08-20 14:42:53,159 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9baa0d0>
2024-08-20 14:42:53,160 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c5e0>
2024-08-20 14:42:53,161 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c1f0>
2024-08-20 14:42:53,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,163 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:53,165 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,166 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6d880>
2024-08-20 14:42:53,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,168 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f460>
2024-08-20 14:42:53,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,183 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f790>
2024-08-20 14:42:53,190 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c526a0>
2024-08-20 14:42:53,191 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c527c0>
2024-08-20 14:42:53,192 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29be0>
2024-08-20 14:42:53,194 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29af0>
2024-08-20 14:42:53,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,196 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d60>
2024-08-20 14:42:53,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,201 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36f40>
2024-08-20 14:42:53,204 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,206 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29fd0>
2024-08-20 14:42:53,208 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,221 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52280>
2024-08-20 14:42:53,230 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52040>
2024-08-20 14:42:53,231 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:53,233 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f580>
2024-08-20 14:42:53,239 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6d850>
2024-08-20 14:42:53,239 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,241 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:53,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,246 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c370>
2024-08-20 14:42:53,247 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,249 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c9a0>
2024-08-20 14:42:53,253 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,268 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f40>
2024-08-20 14:42:53,274 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c550>
2024-08-20 14:42:53,275 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5b0>
2024-08-20 14:42:53,277 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:53,278 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6ddc0>
2024-08-20 14:42:53,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,279 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f3d0>
2024-08-20 14:42:53,283 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,285 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f790>
2024-08-20 14:42:53,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,286 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b20>
2024-08-20 14:42:53,288 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,302 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c527c0>
2024-08-20 14:42:53,310 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b299a0>
2024-08-20 14:42:53,312 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b368e0>
2024-08-20 14:42:53,313 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca71c0>
2024-08-20 14:42:53,315 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:53,315 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,316 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29f70>
2024-08-20 14:42:53,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,319 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8cbb0>
2024-08-20 14:42:53,320 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,321 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c522b0>
2024-08-20 14:42:53,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,338 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52310>
2024-08-20 14:42:53,344 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4faf0>
2024-08-20 14:42:53,345 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:53,347 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f640>
2024-08-20 14:42:53,352 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1f0>
2024-08-20 14:42:53,352 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,354 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c3a0>
2024-08-20 14:42:53,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,359 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c610>
2024-08-20 14:42:53,360 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,362 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c940>
2024-08-20 14:42:53,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,379 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff10>
2024-08-20 14:42:53,387 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:53,388 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc70>
2024-08-20 14:42:53,390 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4faf0>
2024-08-20 14:42:53,393 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:53,393 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,395 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c522b0>
2024-08-20 14:42:53,399 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,400 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52cd0>
2024-08-20 14:42:53,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,403 - INFO - Created relationship from nan to 木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29520>
2024-08-20 14:42:53,407 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,423 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29eb0>
2024-08-20 14:42:53,431 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20790>
2024-08-20 14:42:53,433 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd60>
2024-08-20 14:42:53,434 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd90>
2024-08-20 14:42:53,435 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f910>
2024-08-20 14:42:53,436 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,437 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff10>
2024-08-20 14:42:53,439 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,440 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b20b20>
2024-08-20 14:42:53,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,442 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52580>
2024-08-20 14:42:53,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,460 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c522e0>
2024-08-20 14:42:53,469 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7cd0>
2024-08-20 14:42:53,470 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c10>
2024-08-20 14:42:53,471 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9baa910>
2024-08-20 14:42:53,473 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36dc0>
2024-08-20 14:42:53,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,475 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:53,477 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,478 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca78b0>
2024-08-20 14:42:53,479 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,480 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52130>
2024-08-20 14:42:53,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,497 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52430>
2024-08-20 14:42:53,504 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52730>
2024-08-20 14:42:53,505 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b20d00>
2024-08-20 14:42:53,506 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe20>
2024-08-20 14:42:53,508 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6ddc0>
2024-08-20 14:42:53,508 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,509 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f910>
2024-08-20 14:42:53,514 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,515 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f670>
2024-08-20 14:42:53,516 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,517 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36a00>
2024-08-20 14:42:53,520 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,533 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36160>
2024-08-20 14:42:53,541 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa30>
2024-08-20 14:42:53,542 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe50>
2024-08-20 14:42:53,544 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:53,545 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:53,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,547 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:53,549 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,550 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52580>
2024-08-20 14:42:53,551 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,552 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c525b0>
2024-08-20 14:42:53,555 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,569 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7910>
2024-08-20 14:42:53,576 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7370>
2024-08-20 14:42:53,578 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996ed00>
2024-08-20 14:42:53,579 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:53,580 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:53,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,582 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:53,585 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,586 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52040>
2024-08-20 14:42:53,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,588 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52d00>
2024-08-20 14:42:53,593 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,604 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fdf0>
2024-08-20 14:42:53,607 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbe0>
2024-08-20 14:42:53,608 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d700>
2024-08-20 14:42:53,610 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:53,611 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36100>
2024-08-20 14:42:53,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,613 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:53,616 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,617 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36fa0>
2024-08-20 14:42:53,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,618 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:53,621 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,636 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f100>
2024-08-20 14:42:53,643 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f580>
2024-08-20 14:42:53,644 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f670>
2024-08-20 14:42:53,646 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b203d0>
2024-08-20 14:42:53,647 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52550>
2024-08-20 14:42:53,648 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,649 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c528b0>
2024-08-20 14:42:53,652 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,653 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7070>
2024-08-20 14:42:53,656 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,658 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:53,662 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,675 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c130>
2024-08-20 14:42:53,682 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7670>
2024-08-20 14:42:53,683 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:53,684 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52940>
2024-08-20 14:42:53,686 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52b20>
2024-08-20 14:42:53,686 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,687 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52d00>
2024-08-20 14:42:53,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,692 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f190>
2024-08-20 14:42:53,693 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,694 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:53,698 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,710 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:53,716 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f820>
2024-08-20 14:42:53,717 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36850>
2024-08-20 14:42:53,719 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c340>
2024-08-20 14:42:53,720 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b360a0>
2024-08-20 14:42:53,720 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,722 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f580>
2024-08-20 14:42:53,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,725 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5b0>
2024-08-20 14:42:53,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,726 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:53,730 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,744 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:53,754 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20f70>
2024-08-20 14:42:53,755 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52d90>
2024-08-20 14:42:53,757 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:53,758 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f10>
2024-08-20 14:42:53,758 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,760 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e80>
2024-08-20 14:42:53,762 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,764 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29b80>
2024-08-20 14:42:53,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,766 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7220>
2024-08-20 14:42:53,770 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,783 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:53,790 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52940>
2024-08-20 14:42:53,792 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52730>
2024-08-20 14:42:53,793 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52a30>
2024-08-20 14:42:53,794 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20eb0>
2024-08-20 14:42:53,795 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,796 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe80>
2024-08-20 14:42:53,800 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,801 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:53,802 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,803 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc70>
2024-08-20 14:42:53,805 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,819 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff40>
2024-08-20 14:42:53,827 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c4c0>
2024-08-20 14:42:53,828 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36fa0>
2024-08-20 14:42:53,830 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:53,835 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6d850>
2024-08-20 14:42:53,836 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,837 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f700>
2024-08-20 14:42:53,841 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,842 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd00>
2024-08-20 14:42:53,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,844 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:53,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,862 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52cd0>
2024-08-20 14:42:53,870 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52670>
2024-08-20 14:42:53,871 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca73d0>
2024-08-20 14:42:53,873 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7fa0>
2024-08-20 14:42:53,874 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a532b0>
2024-08-20 14:42:53,875 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,876 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7880>
2024-08-20 14:42:53,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,880 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7910>
2024-08-20 14:42:53,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,881 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52880>
2024-08-20 14:42:53,886 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,899 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c523d0>
2024-08-20 14:42:53,908 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52190>
2024-08-20 14:42:53,909 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6d0>
2024-08-20 14:42:53,911 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd60>
2024-08-20 14:42:53,912 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6dca0>
2024-08-20 14:42:53,913 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,914 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4feb0>
2024-08-20 14:42:53,916 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,917 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f790>
2024-08-20 14:42:53,918 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,920 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53250>
2024-08-20 14:42:53,924 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,937 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:53,944 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f460>
2024-08-20 14:42:53,945 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:53,947 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffa0>
2024-08-20 14:42:53,948 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:53,949 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,950 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20fd0>
2024-08-20 14:42:53,954 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,955 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52700>
2024-08-20 14:42:53,956 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,957 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c525b0>
2024-08-20 14:42:53,960 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:53,973 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca71f0>
2024-08-20 14:42:53,982 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7310>
2024-08-20 14:42:53,984 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b29520>
2024-08-20 14:42:53,985 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7670>
2024-08-20 14:42:53,987 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:53,987 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:53,989 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52880>
2024-08-20 14:42:53,991 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:53,992 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52b20>
2024-08-20 14:42:53,993 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:53,994 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52910>
2024-08-20 14:42:53,998 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,011 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc10>
2024-08-20 14:42:54,018 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:54,019 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6d220>
2024-08-20 14:42:54,021 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f670>
2024-08-20 14:42:54,022 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:54,022 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,024 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b25070>
2024-08-20 14:42:54,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,029 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f460>
2024-08-20 14:42:54,030 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,031 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:54,035 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,048 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20d00>
2024-08-20 14:42:54,054 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52c40>
2024-08-20 14:42:54,055 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c525b0>
2024-08-20 14:42:54,057 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06bb0>
2024-08-20 14:42:54,058 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a538b0>
2024-08-20 14:42:54,059 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,060 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29520>
2024-08-20 14:42:54,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,065 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29be0>
2024-08-20 14:42:54,065 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,067 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c2b0>
2024-08-20 14:42:54,074 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,089 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e996e370>
2024-08-20 14:42:54,093 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c490>
2024-08-20 14:42:54,094 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c940>
2024-08-20 14:42:54,095 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29e80>
2024-08-20 14:42:54,097 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a537c0>
2024-08-20 14:42:54,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,099 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53d30>
2024-08-20 14:42:54,103 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,104 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c523d0>
2024-08-20 14:42:54,104 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,105 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c523a0>
2024-08-20 14:42:54,108 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,122 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c528e0>
2024-08-20 14:42:54,128 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6dd30>
2024-08-20 14:42:54,129 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f9a0>
2024-08-20 14:42:54,131 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e80>
2024-08-20 14:42:54,132 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe20>
2024-08-20 14:42:54,133 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,134 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6d0>
2024-08-20 14:42:54,139 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,140 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b20be0>
2024-08-20 14:42:54,143 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,145 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52f40>
2024-08-20 14:42:54,149 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,162 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52880>
2024-08-20 14:42:54,171 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53b50>
2024-08-20 14:42:54,172 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:54,173 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29e80>
2024-08-20 14:42:54,174 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c670>
2024-08-20 14:42:54,175 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,176 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c910>
2024-08-20 14:42:54,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,181 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca76d0>
2024-08-20 14:42:54,182 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,187 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca90>
2024-08-20 14:42:54,189 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,202 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c9d0>
2024-08-20 14:42:54,210 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29af0>
2024-08-20 14:42:54,211 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53d30>
2024-08-20 14:42:54,213 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a069a0>
2024-08-20 14:42:54,214 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52cd0>
2024-08-20 14:42:54,215 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,216 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52520>
2024-08-20 14:42:54,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,220 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b20af0>
2024-08-20 14:42:54,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,222 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:54,225 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,238 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:54,246 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca78b0>
2024-08-20 14:42:54,247 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:54,248 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6d880>
2024-08-20 14:42:54,252 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52340>
2024-08-20 14:42:54,253 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,254 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c528b0>
2024-08-20 14:42:54,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,258 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52c70>
2024-08-20 14:42:54,259 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,260 - INFO - Created relationship from nan to 气动泵（气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:54,265 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵（气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,277 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a538e0>
2024-08-20 14:42:54,283 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29e20>
2024-08-20 14:42:54,285 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c1c0>
2024-08-20 14:42:54,286 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c910>
2024-08-20 14:42:54,288 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7160>
2024-08-20 14:42:54,288 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,289 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7fa0>
2024-08-20 14:42:54,293 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,294 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4ceb0>
2024-08-20 14:42:54,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,295 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b299d0>
2024-08-20 14:42:54,298 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,309 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53a90>
2024-08-20 14:42:54,319 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:54,320 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52fa0>
2024-08-20 14:42:54,321 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c520a0>
2024-08-20 14:42:54,322 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52d90>
2024-08-20 14:42:54,323 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,324 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20c70>
2024-08-20 14:42:54,326 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,327 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:54,328 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,329 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:54,332 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,343 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe80>
2024-08-20 14:42:54,350 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20fd0>
2024-08-20 14:42:54,352 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52130>
2024-08-20 14:42:54,353 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52640>
2024-08-20 14:42:54,354 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:54,355 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,356 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7cd0>
2024-08-20 14:42:54,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,360 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53430>
2024-08-20 14:42:54,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,362 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b293a0>
2024-08-20 14:42:54,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,377 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c370>
2024-08-20 14:42:54,385 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:54,386 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f040>
2024-08-20 14:42:54,388 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e820>
2024-08-20 14:42:54,389 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c130>
2024-08-20 14:42:54,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,391 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29bb0>
2024-08-20 14:42:54,395 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,396 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:54,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,397 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7fa0>
2024-08-20 14:42:54,399 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,410 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52fa0>
2024-08-20 14:42:54,418 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c520a0>
2024-08-20 14:42:54,420 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c523a0>
2024-08-20 14:42:54,421 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99a80a0>
2024-08-20 14:42:54,422 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff10>
2024-08-20 14:42:54,423 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,424 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff40>
2024-08-20 14:42:54,426 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,427 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1f0>
2024-08-20 14:42:54,428 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,429 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd60>
2024-08-20 14:42:54,433 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,444 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52dc0>
2024-08-20 14:42:54,452 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52e50>
2024-08-20 14:42:54,454 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52880>
2024-08-20 14:42:54,455 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e99d7d90>
2024-08-20 14:42:54,456 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53c40>
2024-08-20 14:42:54,457 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,458 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29f70>
2024-08-20 14:42:54,460 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,461 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4c1c0>
2024-08-20 14:42:54,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,463 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c2e0>
2024-08-20 14:42:54,466 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,477 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:54,480 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c4c0>
2024-08-20 14:42:54,481 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca30>
2024-08-20 14:42:54,482 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29f40>
2024-08-20 14:42:54,483 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a539d0>
2024-08-20 14:42:54,484 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,485 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7fd0>
2024-08-20 14:42:54,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,488 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52640>
2024-08-20 14:42:54,489 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,490 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c525e0>
2024-08-20 14:42:54,494 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,505 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52d00>
2024-08-20 14:42:54,511 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f6d0>
2024-08-20 14:42:54,512 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f850>
2024-08-20 14:42:54,517 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:54,518 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36d00>
2024-08-20 14:42:54,519 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,520 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f610>
2024-08-20 14:42:54,525 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,526 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b20fd0>
2024-08-20 14:42:54,528 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,530 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52160>
2024-08-20 14:42:54,534 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,547 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52e20>
2024-08-20 14:42:54,556 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06d90>
2024-08-20 14:42:54,557 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a539a0>
2024-08-20 14:42:54,558 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29a00>
2024-08-20 14:42:54,560 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29bb0>
2024-08-20 14:42:54,560 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,561 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c100>
2024-08-20 14:42:54,563 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,565 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:54,565 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,566 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c5e0>
2024-08-20 14:42:54,569 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,581 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c1c0>
2024-08-20 14:42:54,588 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:54,590 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53d30>
2024-08-20 14:42:54,591 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06100>
2024-08-20 14:42:54,592 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52850>
2024-08-20 14:42:54,593 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,594 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52820>
2024-08-20 14:42:54,598 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,599 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6dca0>
2024-08-20 14:42:54,599 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,600 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5b0>
2024-08-20 14:42:54,603 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,614 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:54,623 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b253d0>
2024-08-20 14:42:54,624 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c525e0>
2024-08-20 14:42:54,625 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:54,627 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06880>
2024-08-20 14:42:54,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,628 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53c10>
2024-08-20 14:42:54,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,632 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a537c0>
2024-08-20 14:42:54,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,636 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29ee0>
2024-08-20 14:42:54,639 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,647 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20d00>
2024-08-20 14:42:54,655 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36fa0>
2024-08-20 14:42:54,656 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:54,657 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6d0>
2024-08-20 14:42:54,660 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c550>
2024-08-20 14:42:54,660 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,661 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:54,664 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,665 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:54,666 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,667 - INFO - Created relationship from nan to 边料拆包机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36100>
2024-08-20 14:42:54,670 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '边料拆包机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,677 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa910>
2024-08-20 14:42:54,684 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29fd0>
2024-08-20 14:42:54,686 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b299d0>
2024-08-20 14:42:54,687 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a539a0>
2024-08-20 14:42:54,688 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06910>
2024-08-20 14:42:54,688 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,689 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52280>
2024-08-20 14:42:54,692 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,693 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52790>
2024-08-20 14:42:54,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,695 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4cfd0>
2024-08-20 14:42:54,698 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,705 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52c10>
2024-08-20 14:42:54,710 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c526d0>
2024-08-20 14:42:54,711 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a06040>
2024-08-20 14:42:54,712 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a538e0>
2024-08-20 14:42:54,713 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29400>
2024-08-20 14:42:54,714 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,715 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20c40>
2024-08-20 14:42:54,718 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,719 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9baa0d0>
2024-08-20 14:42:54,720 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,721 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b360d0>
2024-08-20 14:42:54,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,732 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f370>
2024-08-20 14:42:54,736 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:54,738 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c6d0>
2024-08-20 14:42:54,739 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:54,740 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:54,741 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,742 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:54,746 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,747 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:54,748 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,750 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b20d30>
2024-08-20 14:42:54,754 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,772 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29a60>
2024-08-20 14:42:54,780 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a537f0>
2024-08-20 14:42:54,787 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7c40>
2024-08-20 14:42:54,792 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c522e0>
2024-08-20 14:42:54,800 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:54,801 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,802 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7220>
2024-08-20 14:42:54,804 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,806 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c52a30>
2024-08-20 14:42:54,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,808 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52fa0>
2024-08-20 14:42:54,812 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,818 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e99d7ee0>
2024-08-20 14:42:54,826 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:54,827 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b293d0>
2024-08-20 14:42:54,828 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b20b20>
2024-08-20 14:42:54,829 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c6d0>
2024-08-20 14:42:54,830 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,831 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:54,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,834 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe80>
2024-08-20 14:42:54,834 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,835 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa30>
2024-08-20 14:42:54,839 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,845 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7670>
2024-08-20 14:42:54,852 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc10>
2024-08-20 14:42:54,853 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd90>
2024-08-20 14:42:54,854 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:54,855 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9baa0d0>
2024-08-20 14:42:54,855 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,856 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20a90>
2024-08-20 14:42:54,858 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,859 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29fa0>
2024-08-20 14:42:54,860 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,861 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53a90>
2024-08-20 14:42:54,865 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,866 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a06eb0>
2024-08-20 14:42:54,868 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52a90>
2024-08-20 14:42:54,869 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52d00>
2024-08-20 14:42:54,870 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca77f0>
2024-08-20 14:42:54,872 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c10>
2024-08-20 14:42:54,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,874 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52b50>
2024-08-20 14:42:54,877 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,877 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:54,878 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,879 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53880>
2024-08-20 14:42:54,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,920 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:54,926 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29520>
2024-08-20 14:42:54,927 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b20af0>
2024-08-20 14:42:54,932 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:54,937 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36be0>
2024-08-20 14:42:54,938 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,939 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f040>
2024-08-20 14:42:54,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:54,943 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e2e0>
2024-08-20 14:42:54,947 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:54,948 - INFO - Created relationship from nan to 加热：蜡池加热、热熔胶池加热等 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd00>
2024-08-20 14:42:54,951 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热：蜡池加热、热熔胶池加热等'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:54,983 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b368e0>
2024-08-20 14:42:54,991 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36a90>
2024-08-20 14:42:54,992 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:54,994 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b298b0>
2024-08-20 14:42:54,995 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29ac0>
2024-08-20 14:42:54,995 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:54,996 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53430>
2024-08-20 14:42:54,999 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,000 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a06880>
2024-08-20 14:42:55,001 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,002 - INFO - Created relationship from nan to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52b50>
2024-08-20 14:42:55,006 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,036 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52e20>
2024-08-20 14:42:55,044 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e280>
2024-08-20 14:42:55,045 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7700>
2024-08-20 14:42:55,046 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c525e0>
2024-08-20 14:42:55,050 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06250>
2024-08-20 14:42:55,051 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,052 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53bb0>
2024-08-20 14:42:55,056 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,057 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53220>
2024-08-20 14:42:55,057 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,058 - INFO - Created relationship from nan to 需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29940>
2024-08-20 14:42:55,062 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,092 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20c40>
2024-08-20 14:42:55,097 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b361c0>
2024-08-20 14:42:55,099 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b360a0>
2024-08-20 14:42:55,100 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f850>
2024-08-20 14:42:55,105 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f9a0>
2024-08-20 14:42:55,105 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,106 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:55,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,111 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b360a0>
2024-08-20 14:42:55,112 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,113 - INFO - Created relationship from nan to 包装机（所有设备） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b365e0>
2024-08-20 14:42:55,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装机（所有设备）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,148 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20f10>
2024-08-20 14:42:55,154 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29970>
2024-08-20 14:42:55,156 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a538b0>
2024-08-20 14:42:55,158 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53a30>
2024-08-20 14:42:55,163 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06040>
2024-08-20 14:42:55,164 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,165 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c524c0>
2024-08-20 14:42:55,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,168 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:55,168 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,170 - INFO - Created relationship from nan to 小包装除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f460>
2024-08-20 14:42:55,174 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '小包装除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,180 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52e20>
2024-08-20 14:42:55,185 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52ee0>
2024-08-20 14:42:55,186 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7c40>
2024-08-20 14:42:55,188 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53b20>
2024-08-20 14:42:55,191 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a533a0>
2024-08-20 14:42:55,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,192 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29940>
2024-08-20 14:42:55,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,196 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8cbb0>
2024-08-20 14:42:55,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,198 - INFO - Created relationship from nan to 包装产线 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:55,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装产线'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,206 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36df0>
2024-08-20 14:42:55,212 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:55,214 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:55,215 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fca0>
2024-08-20 14:42:55,219 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5b0>
2024-08-20 14:42:55,220 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,221 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36790>
2024-08-20 14:42:55,224 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,225 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6d880>
2024-08-20 14:42:55,226 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,227 - INFO - Created relationship from nan to 手工操作，不停机，不影响正常生产 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29f40>
2024-08-20 14:42:55,231 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '手工操作，不停机，不影响正常生产'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,237 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b293a0>
2024-08-20 14:42:55,243 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53340>
2024-08-20 14:42:55,245 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99d7e50>
2024-08-20 14:42:55,246 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c525b0>
2024-08-20 14:42:55,250 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52d90>
2024-08-20 14:42:55,251 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,252 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b25430>
2024-08-20 14:42:55,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,256 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53d90>
2024-08-20 14:42:55,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,258 - INFO - Created relationship from nan to 加热设备：蜡池加热、热熔胶池加热等，约20分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a537f0>
2024-08-20 14:42:55,263 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热设备：蜡池加热、热熔胶池加热等，约20分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,269 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b29ac0>
2024-08-20 14:42:55,275 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6dca0>
2024-08-20 14:42:55,276 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36b80>
2024-08-20 14:42:55,277 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5b0>
2024-08-20 14:42:55,281 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f970>
2024-08-20 14:42:55,282 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,283 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e640>
2024-08-20 14:42:55,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,285 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a066d0>
2024-08-20 14:42:55,286 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,287 - INFO - Created relationship from nan to 造盒机、包装机、裂胶机、折胶台 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:55,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '造盒机、包装机、裂胶机、折胶台'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,297 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7940>
2024-08-20 14:42:55,301 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:55,303 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c10>
2024-08-20 14:42:55,304 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e790>
2024-08-20 14:42:55,305 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:55,306 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,307 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f850>
2024-08-20 14:42:55,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,312 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36a00>
2024-08-20 14:42:55,312 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,313 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9baa520>
2024-08-20 14:42:55,317 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,323 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b20f70>
2024-08-20 14:42:55,328 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29400>
2024-08-20 14:42:55,329 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:55,330 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52d90>
2024-08-20 14:42:55,331 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a532b0>
2024-08-20 14:42:55,332 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,333 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b293a0>
2024-08-20 14:42:55,336 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,337 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6dd30>
2024-08-20 14:42:55,338 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,339 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9baa5b0>
2024-08-20 14:42:55,343 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,349 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36be0>
2024-08-20 14:42:55,354 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f520>
2024-08-20 14:42:55,356 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffd0>
2024-08-20 14:42:55,357 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e790>
2024-08-20 14:42:55,358 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06910>
2024-08-20 14:42:55,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,359 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:55,363 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,364 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c522b0>
2024-08-20 14:42:55,364 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,365 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e50>
2024-08-20 14:42:55,368 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,376 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a06100>
2024-08-20 14:42:55,380 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e4c0>
2024-08-20 14:42:55,382 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f1c0>
2024-08-20 14:42:55,383 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:55,384 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36a60>
2024-08-20 14:42:55,385 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,386 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa1f0>
2024-08-20 14:42:55,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,390 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29fa0>
2024-08-20 14:42:55,391 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,392 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29a90>
2024-08-20 14:42:55,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,397 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53d00>
2024-08-20 14:42:55,399 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c52fd0>
2024-08-20 14:42:55,400 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a532b0>
2024-08-20 14:42:55,401 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29b50>
2024-08-20 14:42:55,402 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20f10>
2024-08-20 14:42:55,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,404 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa5b0>
2024-08-20 14:42:55,406 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,407 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36b50>
2024-08-20 14:42:55,407 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,408 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd00>
2024-08-20 14:42:55,411 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,419 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fee0>
2024-08-20 14:42:55,425 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996eb50>
2024-08-20 14:42:55,426 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d30>
2024-08-20 14:42:55,429 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca75b0>
2024-08-20 14:42:55,433 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c525e0>
2024-08-20 14:42:55,434 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,435 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca71c0>
2024-08-20 14:42:55,439 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,439 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7190>
2024-08-20 14:42:55,442 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,444 - INFO - Created relationship from nan to 系统自动加热：几个加热版——无数据采集 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e5b0>
2024-08-20 14:42:55,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '系统自动加热：几个加热版——无数据采集'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,457 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffd0>
2024-08-20 14:42:55,461 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f430>
2024-08-20 14:42:55,463 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36e80>
2024-08-20 14:42:55,464 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36a60>
2024-08-20 14:42:55,465 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20f10>
2024-08-20 14:42:55,465 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,467 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b297c0>
2024-08-20 14:42:55,471 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,471 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:55,472 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,473 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c490>
2024-08-20 14:42:55,475 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,484 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53370>
2024-08-20 14:42:55,491 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b293a0>
2024-08-20 14:42:55,492 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b20f70>
2024-08-20 14:42:55,494 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:55,495 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36cd0>
2024-08-20 14:42:55,495 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,497 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:55,501 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,502 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2e0>
2024-08-20 14:42:55,503 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,504 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996eb20>
2024-08-20 14:42:55,506 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,517 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca7d30>
2024-08-20 14:42:55,525 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f40>
2024-08-20 14:42:55,526 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4c550>
2024-08-20 14:42:55,528 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52160>
2024-08-20 14:42:55,532 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:55,533 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,534 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:55,537 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,538 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f070>
2024-08-20 14:42:55,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,541 - INFO - Created relationship from nan to 皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6fe20>
2024-08-20 14:42:55,545 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,556 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:55,565 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b360a0>
2024-08-20 14:42:55,566 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b20b20>
2024-08-20 14:42:55,567 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29fd0>
2024-08-20 14:42:55,572 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a531c0>
2024-08-20 14:42:55,572 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,574 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8c6a0>
2024-08-20 14:42:55,576 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,577 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a53370>
2024-08-20 14:42:55,578 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,579 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b29a90>
2024-08-20 14:42:55,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,598 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa370>
2024-08-20 14:42:55,607 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36a60>
2024-08-20 14:42:55,608 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b36c10>
2024-08-20 14:42:55,609 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:55,611 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f190>
2024-08-20 14:42:55,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,612 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e640>
2024-08-20 14:42:55,614 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,615 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca79a0>
2024-08-20 14:42:55,616 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,617 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7760>
2024-08-20 14:42:55,621 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,628 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe20>
2024-08-20 14:42:55,634 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a60>
2024-08-20 14:42:55,634 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8ca76d0>
2024-08-20 14:42:55,635 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e760>
2024-08-20 14:42:55,639 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f190>
2024-08-20 14:42:55,640 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,640 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fbb0>
2024-08-20 14:42:55,643 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,644 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:55,645 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,646 - INFO - Created relationship from nan to 20分钟左右 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b367c0>
2024-08-20 14:42:55,650 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '20分钟左右'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,663 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa910>
2024-08-20 14:42:55,669 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b29f70>
2024-08-20 14:42:55,670 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a53b50>
2024-08-20 14:42:55,671 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f280>
2024-08-20 14:42:55,672 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:55,673 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,674 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8cac0>
2024-08-20 14:42:55,677 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,678 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b29ee0>
2024-08-20 14:42:55,679 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,679 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b20cd0>
2024-08-20 14:42:55,682 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,689 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:55,694 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f3a0>
2024-08-20 14:42:55,695 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f670>
2024-08-20 14:42:55,696 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:55,698 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06a00>
2024-08-20 14:42:55,698 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,699 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8ca71c0>
2024-08-20 14:42:55,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,704 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b25c40>
2024-08-20 14:42:55,705 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,706 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8ca7f40>
2024-08-20 14:42:55,710 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,716 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:55,721 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e760>
2024-08-20 14:42:55,722 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f340>
2024-08-20 14:42:55,724 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f3a0>
2024-08-20 14:42:55,725 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36fa0>
2024-08-20 14:42:55,725 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,726 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9baaf70>
2024-08-20 14:42:55,730 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,730 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b20d30>
2024-08-20 14:42:55,731 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,732 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b298e0>
2024-08-20 14:42:55,734 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,740 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53070>
2024-08-20 14:42:55,746 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b25490>
2024-08-20 14:42:55,748 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b20c40>
2024-08-20 14:42:55,749 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36880>
2024-08-20 14:42:55,750 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36b50>
2024-08-20 14:42:55,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,752 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6ffd0>
2024-08-20 14:42:55,755 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,756 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:55,757 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,758 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a06430>
2024-08-20 14:42:55,760 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,766 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b25850>
2024-08-20 14:42:55,771 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc40>
2024-08-20 14:42:55,772 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:55,773 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c6d0>
2024-08-20 14:42:55,775 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e99d7f70>
2024-08-20 14:42:55,775 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,776 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c340>
2024-08-20 14:42:55,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,780 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c8cbb0>
2024-08-20 14:42:55,781 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,782 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4fc40>
2024-08-20 14:42:55,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,791 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9b25ca0>
2024-08-20 14:42:55,795 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a06430>
2024-08-20 14:42:55,797 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e996e2b0>
2024-08-20 14:42:55,798 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f730>
2024-08-20 14:42:55,799 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:55,799 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,800 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b36190>
2024-08-20 14:42:55,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,804 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6d220>
2024-08-20 14:42:55,805 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,806 - INFO - Created relationship from nan to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c52070>
2024-08-20 14:42:55,810 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,816 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6dca0>
2024-08-20 14:42:55,820 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b36700>
2024-08-20 14:42:55,821 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7f0>
2024-08-20 14:42:55,823 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6feb0>
2024-08-20 14:42:55,826 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996ea90>
2024-08-20 14:42:55,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,828 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a06550>
2024-08-20 14:42:55,831 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,832 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b25f40>
2024-08-20 14:42:55,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,834 - INFO - Created relationship from nan to 设备管理系统-可忽略能耗，追溯码 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:55,836 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '设备管理系统-可忽略能耗，追溯码'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,842 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c8cac0>
2024-08-20 14:42:55,846 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4cee0>
2024-08-20 14:42:55,848 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77d8c52e80>
2024-08-20 14:42:55,849 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c9d0>
2024-08-20 14:42:55,853 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c8c550>
2024-08-20 14:42:55,854 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,855 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe50>
2024-08-20 14:42:55,858 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,859 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b25700>
2024-08-20 14:42:55,860 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,861 - INFO - Created relationship from nan to 大箱喷码机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:55,863 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '大箱喷码机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,869 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd00>
2024-08-20 14:42:55,875 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:55,876 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9baaa30>
2024-08-20 14:42:55,877 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b368b0>
2024-08-20 14:42:55,881 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b20c40>
2024-08-20 14:42:55,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,883 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c52130>
2024-08-20 14:42:55,886 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,887 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b20d00>
2024-08-20 14:42:55,888 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,889 - INFO - Created relationship from nan to 转箭过程待机，无其他能源消耗 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:55,891 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '转箭过程待机，无其他能源消耗'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,898 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa910>
2024-08-20 14:42:55,904 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f310>
2024-08-20 14:42:55,905 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e99a8130>
2024-08-20 14:42:55,906 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996eac0>
2024-08-20 14:42:55,908 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b257c0>
2024-08-20 14:42:55,908 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,909 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4fb80>
2024-08-20 14:42:55,913 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,914 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:55,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,915 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca00>
2024-08-20 14:42:55,917 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,923 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a531f0>
2024-08-20 14:42:55,929 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4c9a0>
2024-08-20 14:42:55,930 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a4faf0>
2024-08-20 14:42:55,931 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f370>
2024-08-20 14:42:55,933 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b25be0>
2024-08-20 14:42:55,933 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,934 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:55,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,938 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6f430>
2024-08-20 14:42:55,939 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,940 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:55,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,947 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9baa400>
2024-08-20 14:42:55,953 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9b362b0>
2024-08-20 14:42:55,954 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b20b20>
2024-08-20 14:42:55,955 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a53c40>
2024-08-20 14:42:55,956 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a53c10>
2024-08-20 14:42:55,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,958 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9b360d0>
2024-08-20 14:42:55,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,962 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9b365e0>
2024-08-20 14:42:55,963 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,964 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:55,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,974 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fdc0>
2024-08-20 14:42:55,977 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:55,979 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b257f0>
2024-08-20 14:42:55,980 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4f520>
2024-08-20 14:42:55,981 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f820>
2024-08-20 14:42:55,981 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:55,982 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4c490>
2024-08-20 14:42:55,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:55,986 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8ca7bb0>
2024-08-20 14:42:55,987 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:55,988 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9a4c430>
2024-08-20 14:42:55,991 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:55,998 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a4f550>
2024-08-20 14:42:56,002 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9a4f790>
2024-08-20 14:42:56,003 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9b25790>
2024-08-20 14:42:56,004 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:56,005 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77e9baa910>
2024-08-20 14:42:56,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:56,006 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6f250>
2024-08-20 14:42:56,009 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:56,010 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77d8c6d220>
2024-08-20 14:42:56,010 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:56,011 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36a60>
2024-08-20 14:42:56,014 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:56,020 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7f77e9a53400>
2024-08-20 14:42:56,024 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e50>
2024-08-20 14:42:56,025 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7f77e9a530d0>
2024-08-20 14:42:56,026 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7f77e9b36e80>
2024-08-20 14:42:56,027 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:56,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:42:56,028 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7f77d8c6fb50>
2024-08-20 14:42:56,032 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:42:56,033 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:56,033 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:42:56,034 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7f77e996e370>
2024-08-20 14:42:56,037 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:42:56,042 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25f70>
2024-08-20 14:42:56,045 - INFO - Created relationship from Extruder to 挤压机螺杆转速 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f400>
2024-08-20 14:42:56,048 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机螺杆转速'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,053 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:56,057 - INFO - Created relationship from Extruder to 挤压机料位高低 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca90>
2024-08-20 14:42:56,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机料位高低'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,063 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca78e0>
2024-08-20 14:42:56,068 - INFO - Created relationship from Extruder to 挤压机出口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4c430>
2024-08-20 14:42:56,072 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机出口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,087 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:56,091 - INFO - Created relationship from Extruder to 挤压机夹套温度上 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f430>
2024-08-20 14:42:56,095 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,101 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25af0>
2024-08-20 14:42:56,106 - INFO - Created relationship from Extruder to 挤压机夹套温度下 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996ea30>
2024-08-20 14:42:56,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,124 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:56,129 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f9a0>
2024-08-20 14:42:56,133 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,138 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b20c40>
2024-08-20 14:42:56,142 - INFO - Created relationship from Extruder to 挤压机压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36d00>
2024-08-20 14:42:56,144 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,148 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53b20>
2024-08-20 14:42:56,153 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度1 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7220>
2024-08-20 14:42:56,157 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度1'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,161 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c52a30>
2024-08-20 14:42:56,167 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度2 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36f40>
2024-08-20 14:42:56,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度2'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,186 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b20f10>
2024-08-20 14:42:56,192 - INFO - Created relationship from Extruder to 挤压机夹套温度上（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:56,196 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,207 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:56,212 - INFO - Created relationship from Extruder to 挤压机夹套温度下（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:56,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,221 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a06910>
2024-08-20 14:42:56,227 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f6a0>
2024-08-20 14:42:56,229 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,233 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:56,238 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4c1c0>
2024-08-20 14:42:56,242 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,246 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29940>
2024-08-20 14:42:56,253 - INFO - Created relationship from Extruder to 挤压机入口温度_Max with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4cbb0>
2024-08-20 14:42:56,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Max'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,260 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f310>
2024-08-20 14:42:56,266 - INFO - Created relationship from Extruder to 挤压机入口温度_Min with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f3a0>
2024-08-20 14:42:56,270 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Min'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,275 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25850>
2024-08-20 14:42:56,281 - INFO - Created relationship from Extruder to 挤压机入口温度_Avg with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e5b0>
2024-08-20 14:42:56,283 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Avg'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,287 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baa0d0>
2024-08-20 14:42:56,293 - INFO - Created relationship from Rolling Powder to 表面粉下表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd60>
2024-08-20 14:42:56,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,302 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f2b0>
2024-08-20 14:42:56,306 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36970>
2024-08-20 14:42:56,309 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,314 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53430>
2024-08-20 14:42:56,321 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a80100>
2024-08-20 14:42:56,325 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,330 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f670>
2024-08-20 14:42:56,333 - INFO - Created relationship from Rolling Powder to 表面粉上表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f580>
2024-08-20 14:42:56,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,342 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e970>
2024-08-20 14:42:56,348 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a060d0>
2024-08-20 14:42:56,352 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,359 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f790>
2024-08-20 14:42:56,363 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fbe0>
2024-08-20 14:42:56,367 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,375 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29130>
2024-08-20 14:42:56,381 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca77f0>
2024-08-20 14:42:56,384 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,390 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ee0>
2024-08-20 14:42:56,396 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c8c610>
2024-08-20 14:42:56,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,408 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36850>
2024-08-20 14:42:56,412 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7b80>
2024-08-20 14:42:56,417 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,425 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca76a0>
2024-08-20 14:42:56,431 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29af0>
2024-08-20 14:42:56,434 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,441 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f940>
2024-08-20 14:42:56,447 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ffd0>
2024-08-20 14:42:56,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,459 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25f10>
2024-08-20 14:42:56,464 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮带（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e730>
2024-08-20 14:42:56,468 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮带（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,475 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baafa0>
2024-08-20 14:42:56,481 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd00>
2024-08-20 14:42:56,485 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,493 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:56,498 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36fa0>
2024-08-20 14:42:56,502 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,509 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36f40>
2024-08-20 14:42:56,514 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f940>
2024-08-20 14:42:56,518 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,528 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baa0d0>
2024-08-20 14:42:56,535 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996eb50>
2024-08-20 14:42:56,537 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,547 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25f40>
2024-08-20 14:42:56,555 - INFO - Created relationship from Bull Roller to 大辊速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff40>
2024-08-20 14:42:56,559 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,569 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:56,575 - INFO - Created relationship from Bull Roller to 大辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29970>
2024-08-20 14:42:56,579 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,587 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7850>
2024-08-20 14:42:56,592 - INFO - Created relationship from Bull Roller to 大辊速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7100>
2024-08-20 14:42:56,596 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,605 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53880>
2024-08-20 14:42:56,610 - INFO - Created relationship from Bull Roller to 大辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7c70>
2024-08-20 14:42:56,615 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,624 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca76a0>
2024-08-20 14:42:56,630 - INFO - Created relationship from 1st Roller to 1号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29520>
2024-08-20 14:42:56,634 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,646 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa00>
2024-08-20 14:42:56,653 - INFO - Created relationship from 1st Roller to 1号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fd60>
2024-08-20 14:42:56,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,667 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b257c0>
2024-08-20 14:42:56,672 - INFO - Created relationship from 1st Roller to 1号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996ea30>
2024-08-20 14:42:56,676 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,685 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baa5b0>
2024-08-20 14:42:56,692 - INFO - Created relationship from 1st Roller to 1号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f5e0>
2024-08-20 14:42:56,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,703 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36b20>
2024-08-20 14:42:56,710 - INFO - Created relationship from 2nd Roller to 2号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53370>
2024-08-20 14:42:56,714 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,717 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36df0>
2024-08-20 14:42:56,722 - INFO - Created relationship from 2nd Roller to 2号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f370>
2024-08-20 14:42:56,726 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,728 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f520>
2024-08-20 14:42:56,734 - INFO - Created relationship from 2nd Roller to 2号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:56,737 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,739 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25880>
2024-08-20 14:42:56,746 - INFO - Created relationship from 2nd Roller to 2号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f5e0>
2024-08-20 14:42:56,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,752 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa00>
2024-08-20 14:42:56,760 - INFO - Created relationship from 3rd Roller to 3号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29b50>
2024-08-20 14:42:56,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,767 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7160>
2024-08-20 14:42:56,776 - INFO - Created relationship from 3rd Roller to 3号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7730>
2024-08-20 14:42:56,780 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,784 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b20b80>
2024-08-20 14:42:56,791 - INFO - Created relationship from 3rd Roller to 3号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca79a0>
2024-08-20 14:42:56,795 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,797 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca73d0>
2024-08-20 14:42:56,802 - INFO - Created relationship from 3rd Roller to 3号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29bb0>
2024-08-20 14:42:56,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,809 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4feb0>
2024-08-20 14:42:56,815 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:56,819 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,822 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b258b0>
2024-08-20 14:42:56,827 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e760>
2024-08-20 14:42:56,831 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,835 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baa730>
2024-08-20 14:42:56,842 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6fd60>
2024-08-20 14:42:56,847 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,852 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53790>
2024-08-20 14:42:56,864 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c521f0>
2024-08-20 14:42:56,868 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,871 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53bb0>
2024-08-20 14:42:56,878 - INFO - Created relationship from Cooling Roller1 to 入口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:56,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '入口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,885 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baa1f0>
2024-08-20 14:42:56,892 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e370>
2024-08-20 14:42:56,896 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,899 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25f70>
2024-08-20 14:42:56,906 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:56,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,913 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f8e0>
2024-08-20 14:42:56,920 - INFO - Created relationship from Cooling Roller1 to Cooling Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29af0>
2024-08-20 14:42:56,924 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: 'Cooling Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,927 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7790>
2024-08-20 14:42:56,932 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7e50>
2024-08-20 14:42:56,936 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,951 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c52940>
2024-08-20 14:42:56,957 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7070>
2024-08-20 14:42:56,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,964 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7ac0>
2024-08-20 14:42:56,973 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29580>
2024-08-20 14:42:56,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,981 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fe20>
2024-08-20 14:42:56,988 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f040>
2024-08-20 14:42:56,992 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:56,995 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25f40>
2024-08-20 14:42:57,004 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e910>
2024-08-20 14:42:57,008 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,011 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f580>
2024-08-20 14:42:57,017 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6fc40>
2024-08-20 14:42:57,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,023 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36820>
2024-08-20 14:42:57,032 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c524f0>
2024-08-20 14:42:57,036 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,043 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b360a0>
2024-08-20 14:42:57,052 - INFO - Created relationship from Cooling Roller1 to 1号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f9a0>
2024-08-20 14:42:57,056 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,061 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6ff40>
2024-08-20 14:42:57,068 - INFO - Created relationship from Cooling Roller1 to 冷辊温度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996eac0>
2024-08-20 14:42:57,072 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊温度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,076 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a06c70>
2024-08-20 14:42:57,106 - INFO - Created relationship from Cooling Roller1 to 冷辊露点 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f7f0>
2024-08-20 14:42:57,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊露点'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,114 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f640>
2024-08-20 14:42:57,118 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29520>
2024-08-20 14:42:57,122 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,123 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca71f0>
2024-08-20 14:42:57,130 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7910>
2024-08-20 14:42:57,134 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,137 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e99d7c40>
2024-08-20 14:42:57,141 - INFO - Created relationship from Cooling Roller2 to 出口胶温度L with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca73a0>
2024-08-20 14:42:57,145 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度L'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,147 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca74c0>
2024-08-20 14:42:57,154 - INFO - Created relationship from Cooling Roller2 to 出口胶温度R with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29fd0>
2024-08-20 14:42:57,158 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度R'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,161 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff40>
2024-08-20 14:42:57,165 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff10>
2024-08-20 14:42:57,169 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,174 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b257c0>
2024-08-20 14:42:57,183 - INFO - Created relationship from Cooling Roller2 to 2号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e4f0>
2024-08-20 14:42:57,187 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,194 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f040>
2024-08-20 14:42:57,203 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f550>
2024-08-20 14:42:57,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,211 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b36880>
2024-08-20 14:42:57,217 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ca60>
2024-08-20 14:42:57,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,234 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b364f0>
2024-08-20 14:42:57,240 - INFO - Created relationship from Sheeting Machine to 切片产线速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f970>
2024-08-20 14:42:57,245 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片产线速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,248 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f580>
2024-08-20 14:42:57,255 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e700>
2024-08-20 14:42:57,259 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,262 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b25b20>
2024-08-20 14:42:57,271 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f880>
2024-08-20 14:42:57,275 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,328 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f640>
2024-08-20 14:42:57,336 - INFO - Created relationship from SPC Weighter to 口香糖重量 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29f10>
2024-08-20 14:42:57,340 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖重量'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,344 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7310>
2024-08-20 14:42:57,349 - INFO - Created relationship from SPC Weighter to 口香糖单片长度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7820>
2024-08-20 14:42:57,353 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片长度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,357 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4c040>
2024-08-20 14:42:57,362 - INFO - Created relationship from SPC Weighter to 口香糖单片宽度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7a00>
2024-08-20 14:42:57,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片宽度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,379 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8ca7070>
2024-08-20 14:42:57,384 - INFO - Created relationship from SPC Weighter to 口香糖单片深度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29040>
2024-08-20 14:42:57,387 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片深度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,390 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f0d0>
2024-08-20 14:42:57,395 - INFO - Created relationship from SPC Weighter to 口香糖单片厚度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4f760>
2024-08-20 14:42:57,398 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片厚度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,402 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a99c10>
2024-08-20 14:42:57,408 - INFO - Created relationship from SPC Weighter to 口香糖生产班次 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996ed00>
2024-08-20 14:42:57,412 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖生产班次'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,416 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9baa520>
2024-08-20 14:42:57,423 - INFO - Created relationship from SPC Weighter to 口香糖香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6f7c0>
2024-08-20 14:42:57,425 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,455 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c6dca0>
2024-08-20 14:42:57,460 - INFO - Created relationship from Sheeting Machine to 系统速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a80550>
2024-08-20 14:42:57,464 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '系统速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,469 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e996e3a0>
2024-08-20 14:42:57,475 - INFO - Created relationship from Mixer1 to Mixer1_配方名称 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a06ca0>
2024-08-20 14:42:57,477 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方名称'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,482 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4fa60>
2024-08-20 14:42:57,487 - INFO - Created relationship from Mixer1 to Mixer1_配方代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4ff40>
2024-08-20 14:42:57,490 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,514 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4c310>
2024-08-20 14:42:57,519 - INFO - Created relationship from Sheeting Machine to 切片机运行状态 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a4c610>
2024-08-20 14:42:57,522 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机运行状态'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,537 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b29a90>
2024-08-20 14:42:57,543 - INFO - Created relationship from Sheeting Machine to 停机时间 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c522e0>
2024-08-20 14:42:57,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '停机时间'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,551 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c52b80>
2024-08-20 14:42:57,555 - INFO - Created relationship from Sheeting Machine to 切片机状态代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9b20e80>
2024-08-20 14:42:57,558 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机状态代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:42:57,563 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7f77e9a53940>
2024-08-20 14:42:57,567 - INFO - Created relationship from Sheeting Machine to SKU香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7f77d8c528e0>
2024-08-20 14:42:57,571 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: 'SKU香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
