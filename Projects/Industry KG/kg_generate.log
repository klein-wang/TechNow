2024-08-20 14:47:07,076 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce6071de50>
2024-08-20 14:47:07,085 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a151460>
2024-08-20 14:47:07,088 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:07,095 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606b5d60>
2024-08-20 14:47:07,097 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,099 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dd280>
2024-08-20 14:47:07,103 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,105 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:07,113 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce79e20190>
2024-08-20 14:47:07,115 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606a1670>
2024-08-20 14:47:07,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,116 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1a60>
2024-08-20 14:47:07,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,117 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce606a11c0>
2024-08-20 14:47:07,117 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:07,118 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606b5220>
2024-08-20 14:47:07,118 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,119 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dfa0>
2024-08-20 14:47:07,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,120 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:07,120 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a1513d0>
2024-08-20 14:47:07,121 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a151160>
2024-08-20 14:47:07,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,122 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d3d0>
2024-08-20 14:47:07,122 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,122 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a14daf0>
2024-08-20 14:47:07,123 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606b5cd0>
2024-08-20 14:47:07,124 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:07,124 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,124 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a242940>
2024-08-20 14:47:07,125 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,125 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce606a1a60>
2024-08-20 14:47:07,126 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606a1dc0>
2024-08-20 14:47:07,126 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce6071dbe0>
2024-08-20 14:47:07,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,127 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:07,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,128 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a151e20>
2024-08-20 14:47:07,128 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:07,129 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a1514c0>
2024-08-20 14:47:07,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,130 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a3445e0>
2024-08-20 14:47:07,130 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,131 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a071550>
2024-08-20 14:47:07,131 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606a1eb0>
2024-08-20 14:47:07,132 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606a15e0>
2024-08-20 14:47:07,133 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,134 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a19d0>
2024-08-20 14:47:07,134 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,135 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:07,136 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606b5b20>
2024-08-20 14:47:07,137 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a14d580>
2024-08-20 14:47:07,137 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,138 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:07,138 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,139 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6d0>
2024-08-20 14:47:07,143 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a14d400>
2024-08-20 14:47:07,145 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a14da90>
2024-08-20 14:47:07,148 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,149 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5df0>
2024-08-20 14:47:07,153 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,154 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:07,157 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606a1310>
2024-08-20 14:47:07,159 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606a1100>
2024-08-20 14:47:07,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,163 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:07,167 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,168 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a071070>
2024-08-20 14:47:07,169 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a344760>
2024-08-20 14:47:07,171 - INFO - Created relationship from Gum Temperature to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a1512e0>
2024-08-20 14:47:07,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,172 - INFO - Created relationship from Gum Temperature to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dda00>
2024-08-20 14:47:07,172 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Temperature'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,173 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a151640>
2024-08-20 14:47:07,174 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a071520>
2024-08-20 14:47:07,175 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce6071d040>
2024-08-20 14:47:07,176 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,177 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1b20>
2024-08-20 14:47:07,177 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,178 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:07,179 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a156f40>
2024-08-20 14:47:07,180 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a157730>
2024-08-20 14:47:07,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,181 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:07,181 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,182 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a14d940>
2024-08-20 14:47:07,183 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a14d430>
2024-08-20 14:47:07,185 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a2dd040>
2024-08-20 14:47:07,185 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,186 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dd820>
2024-08-20 14:47:07,186 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,187 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a14d760>
2024-08-20 14:47:07,188 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:07,189 - INFO - Created relationship from Gum Weight to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a14d100>
2024-08-20 14:47:07,189 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,191 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157460>
2024-08-20 14:47:07,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,192 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f40>
2024-08-20 14:47:07,193 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606a12b0>
2024-08-20 14:47:07,194 - INFO - Created relationship from Gum Density to PCC - production conversion cost with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606a1e20>
2024-08-20 14:47:07,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Target {name: 'PCC - production conversion cost'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,195 - INFO - Created relationship from Gum Density to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:07,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Density'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,196 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a0716d0>
2024-08-20 14:47:07,198 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a151910>
2024-08-20 14:47:07,202 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a1511f0>
2024-08-20 14:47:07,206 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,207 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:07,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,208 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a0716d0>
2024-08-20 14:47:07,210 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce6071d2b0>
2024-08-20 14:47:07,211 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce606a1250>
2024-08-20 14:47:07,211 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,212 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:07,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,213 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d60>
2024-08-20 14:47:07,214 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a157b50>
2024-08-20 14:47:07,216 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a14db50>
2024-08-20 14:47:07,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,217 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dee0>
2024-08-20 14:47:07,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,219 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a14d040>
2024-08-20 14:47:07,220 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce7a2ddbb0>
2024-08-20 14:47:07,221 - INFO - Created relationship from Gum Weight to KQA - key quality attributes with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc40>
2024-08-20 14:47:07,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Target {name: 'KQA - key quality attributes'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,222 - INFO - Created relationship from Gum Weight to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:07,222 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'Gum Weight'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,234 - INFO - Created node with label Measure: <neo4j._sync.work.result.Result object at 0x7fce7a14d8e0>
2024-08-20 14:47:07,244 - INFO - Created node with label Target: <neo4j._sync.work.result.Result object at 0x7fce606b5b20>
2024-08-20 14:47:07,258 - INFO - Created relationship from nan to nan with type HAS_Target: <neo4j._sync.work.result.Result object at 0x7fce7a0b9fd0>
2024-08-20 14:47:07,262 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'nan'}), (b:Target {name: 'nan'}) MERGE (a)-[:HAS_Target]->(b)"
2024-08-20 14:47:07,269 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1220>
2024-08-20 14:47:07,272 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Measure {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:07,274 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1250>
2024-08-20 14:47:07,278 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a156f40>
2024-08-20 14:47:07,283 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:07,289 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151790>
2024-08-20 14:47:07,292 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,294 - INFO - Created relationship from Extruder to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bd60>
2024-08-20 14:47:07,299 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,300 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151130>
2024-08-20 14:47:07,306 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a0713a0>
2024-08-20 14:47:07,308 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a156f40>
2024-08-20 14:47:07,313 - INFO - Created relationship from Sheeting Operator#1 to Rolling Powder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1670>
2024-08-20 14:47:07,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Rolling Powder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,320 - INFO - Created relationship from Rolling Powder to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:07,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,326 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9ca0>
2024-08-20 14:47:07,342 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2fafa0>
2024-08-20 14:47:07,344 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d8e0>
2024-08-20 14:47:07,349 - INFO - Created relationship from Sheeting Operator#1 to Bull Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14da60>
2024-08-20 14:47:07,353 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Bull Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,355 - INFO - Created relationship from Bull Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ddbe0>
2024-08-20 14:47:07,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,361 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:07,362 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d250>
2024-08-20 14:47:07,364 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14deb0>
2024-08-20 14:47:07,368 - INFO - Created relationship from Sheeting Operator#1 to 1st Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14de50>
2024-08-20 14:47:07,371 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '1st Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,373 - INFO - Created relationship from 1st Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a157910>
2024-08-20 14:47:07,376 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,377 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d60>
2024-08-20 14:47:07,379 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a11f0>
2024-08-20 14:47:07,380 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1d90>
2024-08-20 14:47:07,386 - INFO - Created relationship from Sheeting Operator#1 to 2nd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:07,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '2nd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,391 - INFO - Created relationship from 2nd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:07,395 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,397 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151400>
2024-08-20 14:47:07,399 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b670>
2024-08-20 14:47:07,400 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b6a0>
2024-08-20 14:47:07,406 - INFO - Created relationship from Sheeting Operator#1 to 3rd Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071910>
2024-08-20 14:47:07,409 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: '3rd Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,411 - INFO - Created relationship from 3rd Roller to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce6071d040>
2024-08-20 14:47:07,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,416 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a17f0>
2024-08-20 14:47:07,422 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1970>
2024-08-20 14:47:07,424 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1940>
2024-08-20 14:47:07,431 - INFO - Created relationship from Sheeting Operator#1 to Forming Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:07,435 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Forming Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,436 - INFO - Created relationship from Forming Roller to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5070>
2024-08-20 14:47:07,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,443 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:07,448 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d430>
2024-08-20 14:47:07,451 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276100>
2024-08-20 14:47:07,457 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d760>
2024-08-20 14:47:07,461 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,463 - INFO - Created relationship from Cooling Roller1 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:07,467 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,469 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14ddf0>
2024-08-20 14:47:07,471 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a157790>
2024-08-20 14:47:07,473 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9fa0>
2024-08-20 14:47:07,479 - INFO - Created relationship from Sheeting Operator#1 to Cooling Roller2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1310>
2024-08-20 14:47:07,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Cooling Roller2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,485 - INFO - Created relationship from Cooling Roller2 to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1f70>
2024-08-20 14:47:07,489 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,492 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071d040>
2024-08-20 14:47:07,499 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a071160>
2024-08-20 14:47:07,503 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151790>
2024-08-20 14:47:07,510 - INFO - Created relationship from Sheeting Operator#1 to Scoring Roller with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2764f0>
2024-08-20 14:47:07,514 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Scoring Roller'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,516 - INFO - Created relationship from Scoring Roller to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a071550>
2024-08-20 14:47:07,521 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,523 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071d190>
2024-08-20 14:47:07,528 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a157760>
2024-08-20 14:47:07,536 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5d60>
2024-08-20 14:47:07,542 - INFO - Created relationship from Sheeting Operator#2 to SPC Weighter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:07,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'SPC Weighter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,548 - INFO - Created relationship from SPC Weighter to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:07,552 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,554 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1070>
2024-08-20 14:47:07,559 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:07,561 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1730>
2024-08-20 14:47:07,567 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd00>
2024-08-20 14:47:07,571 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,574 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd100>
2024-08-20 14:47:07,578 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,580 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd040>
2024-08-20 14:47:07,586 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:07,593 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:07,600 - INFO - Created relationship from Pre-Process Operator to Xylitol Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1820>
2024-08-20 14:47:07,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Xylitol Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,607 - INFO - Created relationship from Xylitol Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:07,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Xylitol Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,614 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b220>
2024-08-20 14:47:07,616 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5bb0>
2024-08-20 14:47:07,618 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157460>
2024-08-20 14:47:07,631 - INFO - Created relationship from Pre-Process Operator to Sugar Grinding Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d30>
2024-08-20 14:47:07,635 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Sugar Grinding Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,637 - INFO - Created relationship from Sugar Grinding Machine to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a071220>
2024-08-20 14:47:07,641 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinding Machine'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,643 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a03ba90>
2024-08-20 14:47:07,645 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a071160>
2024-08-20 14:47:07,647 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d190>
2024-08-20 14:47:07,652 - INFO - Created relationship from Pre-Process Operator to Dissolving Tank with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1574c0>
2024-08-20 14:47:07,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Pre-Process Operator'}), (b:Machine {name: 'Dissolving Tank'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,659 - INFO - Created relationship from Dissolving Tank to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5b20>
2024-08-20 14:47:07,663 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dissolving Tank'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,666 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bd30>
2024-08-20 14:47:07,672 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27bbe0>
2024-08-20 14:47:07,679 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:07,687 - INFO - Created relationship from Mixing Operator to Flowmeter with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1f70>
2024-08-20 14:47:07,692 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Flowmeter'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,695 - INFO - Created relationship from Flowmeter to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:07,700 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Flowmeter'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,703 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd9d0>
2024-08-20 14:47:07,706 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:07,708 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd60>
2024-08-20 14:47:07,715 - INFO - Created relationship from Mixing Operator to Jacket Warer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1730>
2024-08-20 14:47:07,719 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Jacket Warer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,721 - INFO - Created relationship from Jacket Warer to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1e20>
2024-08-20 14:47:07,726 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Jacket Warer'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,728 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1880>
2024-08-20 14:47:07,729 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27bbe0>
2024-08-20 14:47:07,731 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bd30>
2024-08-20 14:47:07,738 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5e50>
2024-08-20 14:47:07,753 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,755 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a1577c0>
2024-08-20 14:47:07,758 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,759 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071da30>
2024-08-20 14:47:07,760 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a0711c0>
2024-08-20 14:47:07,761 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d700>
2024-08-20 14:47:07,765 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071400>
2024-08-20 14:47:07,768 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,769 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce6071d190>
2024-08-20 14:47:07,772 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,773 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157460>
2024-08-20 14:47:07,774 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:07,775 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27beb0>
2024-08-20 14:47:07,779 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b2b0>
2024-08-20 14:47:07,781 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,782 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1a00>
2024-08-20 14:47:07,786 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,787 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:07,788 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a16a0>
2024-08-20 14:47:07,789 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd910>
2024-08-20 14:47:07,795 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14ddc0>
2024-08-20 14:47:07,798 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,800 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d1f0>
2024-08-20 14:47:07,803 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,804 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfd0>
2024-08-20 14:47:07,810 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1760>
2024-08-20 14:47:07,814 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1fa0>
2024-08-20 14:47:07,819 - INFO - Created relationship from Management personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b6a0>
2024-08-20 14:47:07,822 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Management personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,823 - INFO - Created relationship from nan to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b1f0>
2024-08-20 14:47:07,826 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,828 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bd90>
2024-08-20 14:47:07,833 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c10>
2024-08-20 14:47:07,837 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:07,839 - INFO - Created relationship from Production personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:07,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Production personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,844 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a344610>
2024-08-20 14:47:07,847 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,848 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a071370>
2024-08-20 14:47:07,849 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a1575e0>
2024-08-20 14:47:07,854 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d00>
2024-08-20 14:47:07,855 - INFO - Created relationship from Quality control personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:07,859 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Quality control personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,861 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b100>
2024-08-20 14:47:07,861 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,862 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27ba00>
2024-08-20 14:47:07,863 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:07,867 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:07,869 - INFO - Created relationship from Research and development personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddeb0>
2024-08-20 14:47:07,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Research and development personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,873 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd970>
2024-08-20 14:47:07,874 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,874 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151250>
2024-08-20 14:47:07,875 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb20>
2024-08-20 14:47:07,880 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfa0>
2024-08-20 14:47:07,882 - INFO - Created relationship from Logistics personnel to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1dc0>
2024-08-20 14:47:07,886 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Logistics personnel'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,894 - INFO - Created relationship from nan to nan with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1d90>
2024-08-20 14:47:07,894 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'nan'}), (b:Process {name: 'nan'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,896 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27ba00>
2024-08-20 14:47:07,902 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b490>
2024-08-20 14:47:07,906 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b970>
2024-08-20 14:47:07,910 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9df0>
2024-08-20 14:47:07,913 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,923 - INFO - Created relationship from Sieve Shaker to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a1578b0>
2024-08-20 14:47:07,927 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,929 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:07,930 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151280>
2024-08-20 14:47:07,937 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b6a0>
2024-08-20 14:47:07,953 - INFO - Created relationship from Raw Material Operator to Elevator with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1575e0>
2024-08-20 14:47:07,956 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Elevator'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,963 - INFO - Created relationship from Elevator to 小配料 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c10>
2024-08-20 14:47:07,966 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Elevator'}), (b:Process {name: '小配料'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,967 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:07,971 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27bdc0>
2024-08-20 14:47:07,976 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27baf0>
2024-08-20 14:47:07,986 - INFO - Created relationship from Raw Material Operator to 1#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1e20>
2024-08-20 14:47:07,989 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '1#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:07,995 - INFO - Created relationship from 1#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1eb0>
2024-08-20 14:47:07,998 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:07,999 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd30>
2024-08-20 14:47:08,000 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d220>
2024-08-20 14:47:08,004 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151730>
2024-08-20 14:47:08,014 - INFO - Created relationship from Raw Material Operator to 2#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:08,017 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '2#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,025 - INFO - Created relationship from 2#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd040>
2024-08-20 14:47:08,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,030 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a12e0>
2024-08-20 14:47:08,031 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:08,035 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:08,047 - INFO - Created relationship from Raw Material Operator to 3#Munters Dehumidifier with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27ba90>
2024-08-20 14:47:08,050 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: '3#Munters Dehumidifier'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,058 - INFO - Created relationship from 3#Munters Dehumidifier to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:08,061 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Munters Dehumidifier'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,063 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:08,064 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a157700>
2024-08-20 14:47:08,071 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071de50>
2024-08-20 14:47:08,089 - INFO - Created relationship from Raw Material Operator to Sugar Grinder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276940>
2024-08-20 14:47:08,092 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grinder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,098 - INFO - Created relationship from Sugar Grinder to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:08,102 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grinder'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,103 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157730>
2024-08-20 14:47:08,105 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5730>
2024-08-20 14:47:08,108 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bbe0>
2024-08-20 14:47:08,116 - INFO - Created relationship from Raw Material Operator to Sugar Grind Blower with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bf10>
2024-08-20 14:47:08,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Grind Blower'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,125 - INFO - Created relationship from Sugar Grind Blower to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:08,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Grind Blower'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,130 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1dc0>
2024-08-20 14:47:08,131 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1640>
2024-08-20 14:47:08,134 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd90>
2024-08-20 14:47:08,143 - INFO - Created relationship from Raw Material Operator to Sugar Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d5e0>
2024-08-20 14:47:08,147 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,152 - INFO - Created relationship from Sugar Sieve Shaker to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a276760>
2024-08-20 14:47:08,156 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Sieve Shaker'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,157 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d220>
2024-08-20 14:47:08,158 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2dd910>
2024-08-20 14:47:08,159 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1430>
2024-08-20 14:47:08,168 - INFO - Created relationship from Raw Material Operator to Sugar Unloader with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:08,172 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sugar Unloader'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,176 - INFO - Created relationship from Sugar Unloader to 砂糖系统 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27ba30>
2024-08-20 14:47:08,179 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sugar Unloader'}), (b:Process {name: '砂糖系统'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,181 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bfd0>
2024-08-20 14:47:08,185 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b4f0>
2024-08-20 14:47:08,186 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce79d321f0>
2024-08-20 14:47:08,187 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:08,187 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,188 - INFO - Created relationship from Sieve Shaker to 胶基 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a299d90>
2024-08-20 14:47:08,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '胶基'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,192 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276310>
2024-08-20 14:47:08,196 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a157be0>
2024-08-20 14:47:08,196 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:08,197 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a11f0>
2024-08-20 14:47:08,197 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,198 - INFO - Created relationship from Sieve Shaker to 山梨醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a13a0>
2024-08-20 14:47:08,201 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '山梨醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,202 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79ff7b80>
2024-08-20 14:47:08,206 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:08,206 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276520>
2024-08-20 14:47:08,208 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:08,208 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,209 - INFO - Created relationship from Sieve Shaker to 木糖醇 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151cd0>
2024-08-20 14:47:08,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '木糖醇'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,213 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79e20190>
2024-08-20 14:47:08,217 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:08,218 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:08,219 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151820>
2024-08-20 14:47:08,219 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,220 - INFO - Created relationship from Sieve Shaker to 表面粉 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:08,223 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '表面粉'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,224 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276880>
2024-08-20 14:47:08,228 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276c10>
2024-08-20 14:47:08,229 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1af0>
2024-08-20 14:47:08,230 - INFO - Created relationship from Raw Material Operator to Sieve Shaker with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a17c0>
2024-08-20 14:47:08,230 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Raw Material Operator'}), (b:Machine {name: 'Sieve Shaker'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,231 - INFO - Created relationship from Sieve Shaker to 香精 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:08,234 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sieve Shaker'}), (b:Process {name: '香精'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,235 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:08,236 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a157b80>
2024-08-20 14:47:08,237 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:08,238 - INFO - Created relationship from Mixing Operator to Mixer1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157730>
2024-08-20 14:47:08,238 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,239 - INFO - Created relationship from Mixer1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b59d0>
2024-08-20 14:47:08,240 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,241 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:08,242 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a13a0>
2024-08-20 14:47:08,243 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071dbb0>
2024-08-20 14:47:08,244 - INFO - Created relationship from Mixing Operator to Mixer2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2761f0>
2024-08-20 14:47:08,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,245 - INFO - Created relationship from Mixer2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a1519a0>
2024-08-20 14:47:08,245 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,246 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151d90>
2024-08-20 14:47:08,247 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a1515b0>
2024-08-20 14:47:08,248 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a3449a0>
2024-08-20 14:47:08,249 - INFO - Created relationship from Mixing Operator to Mixer3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d2b0>
2024-08-20 14:47:08,250 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,251 - INFO - Created relationship from Mixer3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a03b670>
2024-08-20 14:47:08,251 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,251 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:08,252 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a071910>
2024-08-20 14:47:08,253 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151790>
2024-08-20 14:47:08,255 - INFO - Created relationship from Mixing Operator to Mixer4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151490>
2024-08-20 14:47:08,255 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,256 - INFO - Created relationship from Mixer4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a276d00>
2024-08-20 14:47:08,256 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,257 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:08,258 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a14c0>
2024-08-20 14:47:08,259 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a19a0>
2024-08-20 14:47:08,264 - INFO - Created relationship from Mixing Operator to Mixer Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1ca0>
2024-08-20 14:47:08,267 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Mixer Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,268 - INFO - Created relationship from Mixer Dusting Machine to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5940>
2024-08-20 14:47:08,271 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer Dusting Machine'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,273 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157460>
2024-08-20 14:47:08,274 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:08,275 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1280>
2024-08-20 14:47:08,280 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 1 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a19a0>
2024-08-20 14:47:08,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 1'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,286 - INFO - Created relationship from Model Temperature Controller 1 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a13a0>
2024-08-20 14:47:08,289 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 1'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,290 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276c10>
2024-08-20 14:47:08,291 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276940>
2024-08-20 14:47:08,292 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151f70>
2024-08-20 14:47:08,296 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 2 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151d90>
2024-08-20 14:47:08,300 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 2'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,302 - INFO - Created relationship from Model Temperature Controller 2 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a0715b0>
2024-08-20 14:47:08,305 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 2'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,307 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:08,308 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a03b5b0>
2024-08-20 14:47:08,309 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d490>
2024-08-20 14:47:08,314 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 3 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d1c0>
2024-08-20 14:47:08,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 3'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,320 - INFO - Created relationship from Model Temperature Controller 3 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:08,325 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 3'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,326 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1513d0>
2024-08-20 14:47:08,327 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276400>
2024-08-20 14:47:08,332 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:08,337 - INFO - Created relationship from Mixing Operator to Model Temperature Controller 4 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:08,340 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Mixing Operator'}), (b:Machine {name: 'Model Temperature Controller 4'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,342 - INFO - Created relationship from Model Temperature Controller 4 to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1c70>
2024-08-20 14:47:08,356 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Model Temperature Controller 4'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,358 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1a30>
2024-08-20 14:47:08,360 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:08,362 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b610>
2024-08-20 14:47:08,363 - INFO - Created relationship from Sheeting Operator#1 to Sheeting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:08,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Sheeting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,367 - INFO - Created relationship from Sheeting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1a30>
2024-08-20 14:47:08,367 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,368 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a18b0>
2024-08-20 14:47:08,369 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:08,370 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276b80>
2024-08-20 14:47:08,371 - INFO - Created relationship from Sheeting Operator#1 to Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2763d0>
2024-08-20 14:47:08,372 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,372 - INFO - Created relationship from Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151970>
2024-08-20 14:47:08,376 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,377 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151d90>
2024-08-20 14:47:08,378 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a0715b0>
2024-08-20 14:47:08,379 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d7f0>
2024-08-20 14:47:08,384 - INFO - Created relationship from Sheeting Operator#1 to Triam Extruder with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b4c0>
2024-08-20 14:47:08,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'Triam Extruder'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,397 - INFO - Created relationship from Triam Extruder to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d910>
2024-08-20 14:47:08,401 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Triam Extruder'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,403 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a071fd0>
2024-08-20 14:47:08,404 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a1519d0>
2024-08-20 14:47:08,405 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151760>
2024-08-20 14:47:08,411 - INFO - Created relationship from Sheeting Operator#2 to Dehumidifer with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276760>
2024-08-20 14:47:08,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Dehumidifer'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,416 - INFO - Created relationship from Dehumidifer to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a276070>
2024-08-20 14:47:08,419 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Dehumidifer'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,421 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1940>
2024-08-20 14:47:08,422 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1e50>
2024-08-20 14:47:08,423 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1250>
2024-08-20 14:47:08,429 - INFO - Created relationship from Sheeting Operator#2 to Refrigerating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2fafa0>
2024-08-20 14:47:08,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Refrigerating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,434 - INFO - Created relationship from Refrigerating Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b3a0>
2024-08-20 14:47:08,437 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Refrigerating Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,439 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:08,440 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a10a0>
2024-08-20 14:47:08,441 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1130>
2024-08-20 14:47:08,447 - INFO - Created relationship from Sheeting Operator#2 to Sheeting Dusting Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce6071dbb0>
2024-08-20 14:47:08,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#2'}), (b:Machine {name: 'Sheeting Dusting Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,453 - INFO - Created relationship from Sheeting Dusting Machine to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:08,457 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Dusting Machine'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,458 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:08,459 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151fd0>
2024-08-20 14:47:08,461 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce79ff7b80>
2024-08-20 14:47:08,466 - INFO - Created relationship from Sheeting Operator#1 to First Floor Air Conditioner with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14db50>
2024-08-20 14:47:08,470 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: 'Sheeting Operator#1'}), (b:Machine {name: 'First Floor Air Conditioner'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,471 - INFO - Created relationship from First Floor Air Conditioner to Sheeting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dd90>
2024-08-20 14:47:08,474 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'First Floor Air Conditioner'}), (b:Process {name: 'Sheeting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,476 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b6d0>
2024-08-20 14:47:08,482 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a344760>
2024-08-20 14:47:08,488 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d820>
2024-08-20 14:47:08,494 - INFO - Created relationship from 小包装操作员 to Wax Pool with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071040>
2024-08-20 14:47:08,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Wax Pool'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,500 - INFO - Created relationship from Wax Pool to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151340>
2024-08-20 14:47:08,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Wax Pool'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,507 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151460>
2024-08-20 14:47:08,509 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:08,511 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d190>
2024-08-20 14:47:08,518 - INFO - Created relationship from 小包装操作员 to Hot Melt Adhesive with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:08,523 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'Hot Melt Adhesive'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,525 - INFO - Created relationship from Hot Melt Adhesive to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:08,529 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Hot Melt Adhesive'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,532 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5b50>
2024-08-20 14:47:08,534 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2dd910>
2024-08-20 14:47:08,535 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:08,553 - INFO - Created relationship from 小包装操作员 to 1#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1070>
2024-08-20 14:47:08,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,560 - INFO - Created relationship from 1#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:08,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,566 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:08,568 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276760>
2024-08-20 14:47:08,570 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1514f0>
2024-08-20 14:47:08,577 - INFO - Created relationship from 小包装操作员 to 2#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151fa0>
2024-08-20 14:47:08,581 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,583 - INFO - Created relationship from 2#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a071910>
2024-08-20 14:47:08,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,590 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d820>
2024-08-20 14:47:08,592 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d070>
2024-08-20 14:47:08,594 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd30>
2024-08-20 14:47:08,602 - INFO - Created relationship from 小包装操作员 to 3#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d910>
2024-08-20 14:47:08,606 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,618 - INFO - Created relationship from 3#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dc70>
2024-08-20 14:47:08,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,627 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79ff7b80>
2024-08-20 14:47:08,629 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151730>
2024-08-20 14:47:08,635 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151490>
2024-08-20 14:47:08,650 - INFO - Created relationship from 小包装操作员 to 4#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276c10>
2024-08-20 14:47:08,654 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,663 - INFO - Created relationship from 4#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce6071dbb0>
2024-08-20 14:47:08,667 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,668 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1b80>
2024-08-20 14:47:08,670 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a17c0>
2024-08-20 14:47:08,676 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5940>
2024-08-20 14:47:08,691 - INFO - Created relationship from 小包装操作员 to 5#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc40>
2024-08-20 14:47:08,695 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,703 - INFO - Created relationship from 5#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:08,708 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,710 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1e20>
2024-08-20 14:47:08,711 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce6071d160>
2024-08-20 14:47:08,733 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151f40>
2024-08-20 14:47:08,742 - INFO - Created relationship from 小包装操作员 to 6#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151970>
2024-08-20 14:47:08,746 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,750 - INFO - Created relationship from 6#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd7c0>
2024-08-20 14:47:08,754 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,755 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd790>
2024-08-20 14:47:08,757 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b430>
2024-08-20 14:47:08,758 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b760>
2024-08-20 14:47:08,771 - INFO - Created relationship from 小包装操作员 to 7#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b400>
2024-08-20 14:47:08,775 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,785 - INFO - Created relationship from 7#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9eb0>
2024-08-20 14:47:08,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,793 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b3d0>
2024-08-20 14:47:08,795 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b3a0>
2024-08-20 14:47:08,801 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bf10>
2024-08-20 14:47:08,815 - INFO - Created relationship from 小包装操作员 to 8#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5d30>
2024-08-20 14:47:08,820 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,828 - INFO - Created relationship from 8#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd7c0>
2024-08-20 14:47:08,832 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,834 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1517f0>
2024-08-20 14:47:08,836 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151be0>
2024-08-20 14:47:08,841 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:08,853 - INFO - Created relationship from 小包装操作员 to 9#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:08,857 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,866 - INFO - Created relationship from 9#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a10a0>
2024-08-20 14:47:08,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,874 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276bb0>
2024-08-20 14:47:08,876 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1340>
2024-08-20 14:47:08,882 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1700>
2024-08-20 14:47:08,888 - INFO - Created relationship from 小包装操作员 to 10#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:08,893 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,895 - INFO - Created relationship from 10#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151670>
2024-08-20 14:47:08,899 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,902 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1515e0>
2024-08-20 14:47:08,904 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb80>
2024-08-20 14:47:08,906 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b6d0>
2024-08-20 14:47:08,913 - INFO - Created relationship from 小包装操作员 to 11#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27ba30>
2024-08-20 14:47:08,918 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '11#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,920 - INFO - Created relationship from 11#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b160>
2024-08-20 14:47:08,924 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '11#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,928 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:08,930 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2760a0>
2024-08-20 14:47:08,932 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276250>
2024-08-20 14:47:08,938 - INFO - Created relationship from 小包装操作员 to 12#OTC PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b2b0>
2024-08-20 14:47:08,942 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '12#OTC PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,944 - INFO - Created relationship from 12#OTC PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b760>
2024-08-20 14:47:08,948 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '12#OTC PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,952 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5bb0>
2024-08-20 14:47:08,955 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2ddca0>
2024-08-20 14:47:08,956 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd90>
2024-08-20 14:47:08,963 - INFO - Created relationship from 小包装操作员 to 1#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:08,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '1#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:08,980 - INFO - Created relationship from 1#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:08,984 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:08,988 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1790>
2024-08-20 14:47:08,990 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1310>
2024-08-20 14:47:08,993 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:09,013 - INFO - Created relationship from 小包装操作员 to 2#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce6071da30>
2024-08-20 14:47:09,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '2#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,017 - INFO - Created relationship from 2#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1ca0>
2024-08-20 14:47:09,020 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,022 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:09,022 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:09,023 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151bb0>
2024-08-20 14:47:09,027 - INFO - Created relationship from 小包装操作员 to 3#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfa0>
2024-08-20 14:47:09,030 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '3#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,032 - INFO - Created relationship from 3#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce79e20190>
2024-08-20 14:47:09,036 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,038 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b910>
2024-08-20 14:47:09,040 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b370>
2024-08-20 14:47:09,042 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:09,048 - INFO - Created relationship from 小包装操作员 to 4#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a3449a0>
2024-08-20 14:47:09,052 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '4#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,055 - INFO - Created relationship from 4#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b550>
2024-08-20 14:47:09,059 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,061 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b9d0>
2024-08-20 14:47:09,063 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b220>
2024-08-20 14:47:09,065 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b9d0>
2024-08-20 14:47:09,071 - INFO - Created relationship from 小包装操作员 to 5#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd9a0>
2024-08-20 14:47:09,075 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '5#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,076 - INFO - Created relationship from 5#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151e20>
2024-08-20 14:47:09,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,082 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:09,084 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1820>
2024-08-20 14:47:09,086 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1940>
2024-08-20 14:47:09,092 - INFO - Created relationship from 小包装操作员 to 6#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1f70>
2024-08-20 14:47:09,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '6#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,098 - INFO - Created relationship from 6#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dbb0>
2024-08-20 14:47:09,103 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,104 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1a00>
2024-08-20 14:47:09,106 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1f40>
2024-08-20 14:47:09,108 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1700>
2024-08-20 14:47:09,113 - INFO - Created relationship from 小包装操作员 to 7#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151ca0>
2024-08-20 14:47:09,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '7#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,118 - INFO - Created relationship from 7#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151970>
2024-08-20 14:47:09,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,124 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8e0>
2024-08-20 14:47:09,125 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a03b790>
2024-08-20 14:47:09,127 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b9a0>
2024-08-20 14:47:09,139 - INFO - Created relationship from 小包装操作员 to 8#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b9d0>
2024-08-20 14:47:09,143 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '8#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,145 - INFO - Created relationship from 8#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:09,149 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,152 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d160>
2024-08-20 14:47:09,154 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:09,155 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b940>
2024-08-20 14:47:09,161 - INFO - Created relationship from 小包装操作员 to 9#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a344610>
2024-08-20 14:47:09,165 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '9#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,167 - INFO - Created relationship from 9#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a03b6a0>
2024-08-20 14:47:09,171 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,172 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd880>
2024-08-20 14:47:09,174 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151820>
2024-08-20 14:47:09,176 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1517c0>
2024-08-20 14:47:09,182 - INFO - Created relationship from 小包装操作员 to 10#SLP PKG with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1820>
2024-08-20 14:47:09,186 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: '10#SLP PKG'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,188 - INFO - Created relationship from 10#SLP PKG to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1070>
2024-08-20 14:47:09,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#SLP PKG'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,192 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:09,194 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d2e0>
2024-08-20 14:47:09,196 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:09,201 - INFO - Created relationship from 小包装操作员 to PKG Dusting  Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a11c0>
2024-08-20 14:47:09,204 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '小包装操作员'}), (b:Machine {name: 'PKG Dusting  Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,206 - INFO - Created relationship from PKG Dusting  Machine to 小包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151760>
2024-08-20 14:47:09,211 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'PKG Dusting  Machine'}), (b:Process {name: '小包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,213 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151160>
2024-08-20 14:47:09,218 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2dd850>
2024-08-20 14:47:09,223 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd550>
2024-08-20 14:47:09,229 - INFO - Created relationship from 大包装操作员 to 1#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:09,234 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,235 - INFO - Created relationship from 1#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bbb0>
2024-08-20 14:47:09,240 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,242 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b850>
2024-08-20 14:47:09,243 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a276220>
2024-08-20 14:47:09,245 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dd90>
2024-08-20 14:47:09,252 - INFO - Created relationship from 大包装操作员 to 2#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d1c0>
2024-08-20 14:47:09,256 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,258 - INFO - Created relationship from 2#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:09,262 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,264 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bd90>
2024-08-20 14:47:09,266 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5d30>
2024-08-20 14:47:09,268 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc10>
2024-08-20 14:47:09,274 - INFO - Created relationship from 大包装操作员 to 3#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd190>
2024-08-20 14:47:09,278 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,280 - INFO - Created relationship from 3#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a1514c0>
2024-08-20 14:47:09,284 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,286 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:09,288 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1af0>
2024-08-20 14:47:09,297 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:09,306 - INFO - Created relationship from 大包装操作员 to 4#Piler with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071fd0>
2024-08-20 14:47:09,310 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#Piler'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,313 - INFO - Created relationship from 4#Piler to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a10a0>
2024-08-20 14:47:09,317 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#Piler'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,320 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1dc0>
2024-08-20 14:47:09,322 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151b80>
2024-08-20 14:47:09,324 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:09,331 - INFO - Created relationship from 大包装操作员 to 3705Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2fafa0>
2024-08-20 14:47:09,335 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3705Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,338 - INFO - Created relationship from 3705Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:09,342 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3705Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,344 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5bb0>
2024-08-20 14:47:09,346 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27b490>
2024-08-20 14:47:09,349 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:09,356 - INFO - Created relationship from 大包装操作员 to 3701Coating Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bcd0>
2024-08-20 14:47:09,360 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3701Coating Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,364 - INFO - Created relationship from 3701Coating Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a286280>
2024-08-20 14:47:09,368 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3701Coating Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,370 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bcd0>
2024-08-20 14:47:09,374 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a27bb80>
2024-08-20 14:47:09,376 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b9a0>
2024-08-20 14:47:09,383 - INFO - Created relationship from 大包装操作员 to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a242940>
2024-08-20 14:47:09,387 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,389 - INFO - Created relationship from CP28 to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd2b0>
2024-08-20 14:47:09,394 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'CP28'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,398 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79e20190>
2024-08-20 14:47:09,400 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a1514f0>
2024-08-20 14:47:09,402 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151dc0>
2024-08-20 14:47:09,410 - INFO - Created relationship from 大包装操作员 to 1# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1d60>
2024-08-20 14:47:09,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,418 - INFO - Created relationship from 1# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a16a0>
2024-08-20 14:47:09,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,426 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286220>
2024-08-20 14:47:09,428 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5cd0>
2024-08-20 14:47:09,431 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0711c0>
2024-08-20 14:47:09,437 - INFO - Created relationship from 大包装操作员 to 2# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:09,441 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,445 - INFO - Created relationship from 2# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151250>
2024-08-20 14:47:09,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,453 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d8b0>
2024-08-20 14:47:09,455 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14df70>
2024-08-20 14:47:09,458 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a3446d0>
2024-08-20 14:47:09,465 - INFO - Created relationship from 大包装操作员 to 3# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:09,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,485 - INFO - Created relationship from 3# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1100>
2024-08-20 14:47:09,488 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,489 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1f40>
2024-08-20 14:47:09,491 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a2dd790>
2024-08-20 14:47:09,492 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1e20>
2024-08-20 14:47:09,497 - INFO - Created relationship from 大包装操作员 to 4# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1e50>
2024-08-20 14:47:09,500 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,501 - INFO - Created relationship from 4# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:09,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,505 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dc40>
2024-08-20 14:47:09,506 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d850>
2024-08-20 14:47:09,506 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d9a0>
2024-08-20 14:47:09,511 - INFO - Created relationship from 大包装操作员 to 5# X-Ray Machine with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151af0>
2024-08-20 14:47:09,516 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5# X-Ray Machine'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,517 - INFO - Created relationship from 5# X-Ray Machine to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151f40>
2024-08-20 14:47:09,521 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5# X-Ray Machine'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,522 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0714f0>
2024-08-20 14:47:09,523 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606b5b20>
2024-08-20 14:47:09,524 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfd0>
2024-08-20 14:47:09,530 - INFO - Created relationship from 大包装操作员 to 1#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dda30>
2024-08-20 14:47:09,534 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '1#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,535 - INFO - Created relationship from 1#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a071910>
2024-08-20 14:47:09,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,541 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151d90>
2024-08-20 14:47:09,543 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151370>
2024-08-20 14:47:09,546 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d730>
2024-08-20 14:47:09,552 - INFO - Created relationship from 大包装操作员 to 2#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:09,556 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '2#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,558 - INFO - Created relationship from 2#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:09,561 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,563 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071de50>
2024-08-20 14:47:09,564 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:09,567 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b20>
2024-08-20 14:47:09,573 - INFO - Created relationship from 大包装操作员 to 3#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276b50>
2024-08-20 14:47:09,577 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '3#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,579 - INFO - Created relationship from 3#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1df0>
2024-08-20 14:47:09,583 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,584 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:09,586 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a344a00>
2024-08-20 14:47:09,587 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d5b0>
2024-08-20 14:47:09,593 - INFO - Created relationship from 大包装操作员 to 4#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d580>
2024-08-20 14:47:09,598 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '4#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,600 - INFO - Created relationship from 4#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d640>
2024-08-20 14:47:09,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '4#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,605 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151580>
2024-08-20 14:47:09,607 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a151d60>
2024-08-20 14:47:09,608 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071910>
2024-08-20 14:47:09,614 - INFO - Created relationship from 大包装操作员 to 5#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd00>
2024-08-20 14:47:09,619 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '5#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,621 - INFO - Created relationship from 5#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:09,625 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '5#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,627 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79e20190>
2024-08-20 14:47:09,628 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a071910>
2024-08-20 14:47:09,630 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151550>
2024-08-20 14:47:09,637 - INFO - Created relationship from 大包装操作员 to 6#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151e50>
2024-08-20 14:47:09,641 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '6#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,645 - INFO - Created relationship from 6#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14da60>
2024-08-20 14:47:09,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '6#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,660 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dac0>
2024-08-20 14:47:09,662 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14d4f0>
2024-08-20 14:47:09,663 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:09,670 - INFO - Created relationship from 大包装操作员 to 7#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a13a0>
2024-08-20 14:47:09,674 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '7#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,676 - INFO - Created relationship from 7#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1880>
2024-08-20 14:47:09,680 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '7#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,682 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276970>
2024-08-20 14:47:09,683 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:09,685 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1700>
2024-08-20 14:47:09,690 - INFO - Created relationship from 大包装操作员 to 8#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:09,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '8#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,695 - INFO - Created relationship from 8#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:09,698 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '8#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,700 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:09,701 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a14da60>
2024-08-20 14:47:09,710 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151df0>
2024-08-20 14:47:09,716 - INFO - Created relationship from 大包装操作员 to 9#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151430>
2024-08-20 14:47:09,721 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '9#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,723 - INFO - Created relationship from 9#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a071070>
2024-08-20 14:47:09,727 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '9#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,730 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5070>
2024-08-20 14:47:09,732 - INFO - Created node with label Man: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:09,733 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd760>
2024-08-20 14:47:09,742 - INFO - Created relationship from 大包装操作员 to 10#TSCW with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071d30>
2024-08-20 14:47:09,746 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Man {name: '大包装操作员'}), (b:Machine {name: '10#TSCW'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:09,749 - INFO - Created relationship from 10#TSCW to 大包装 with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151940>
2024-08-20 14:47:09,753 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '10#TSCW'}), (b:Process {name: '大包装'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,756 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a151160>
2024-08-20 14:47:09,764 - INFO - Created relationship from Room Temperature to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d940>
2024-08-20 14:47:09,768 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,770 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:09,773 - INFO - Created relationship from Room Temperature to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d9d0>
2024-08-20 14:47:09,777 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,779 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:09,782 - INFO - Created relationship from Room Temperature to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a12e0>
2024-08-20 14:47:09,786 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,789 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce606a1310>
2024-08-20 14:47:09,792 - INFO - Created relationship from Room Temperature to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b460>
2024-08-20 14:47:09,796 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,799 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:09,802 - INFO - Created relationship from Room Temperature to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a13d0>
2024-08-20 14:47:09,806 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,808 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a157b50>
2024-08-20 14:47:09,810 - INFO - Created relationship from Room Temperature to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d9d0>
2024-08-20 14:47:09,815 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,818 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a14dd30>
2024-08-20 14:47:09,821 - INFO - Created relationship from Room Temperature to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:09,825 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,829 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:09,831 - INFO - Created relationship from Room Temperature to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151d60>
2024-08-20 14:47:09,835 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,837 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a071a00>
2024-08-20 14:47:09,839 - INFO - Created relationship from Room Temperature to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6d0>
2024-08-20 14:47:09,842 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Room Temperature'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,845 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:09,853 - INFO - Created relationship from Humidity to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5070>
2024-08-20 14:47:09,857 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,859 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a071220>
2024-08-20 14:47:09,862 - INFO - Created relationship from Humidity to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:09,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,870 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a151fa0>
2024-08-20 14:47:09,873 - INFO - Created relationship from Humidity to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d220>
2024-08-20 14:47:09,877 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,881 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a14d100>
2024-08-20 14:47:09,884 - INFO - Created relationship from Humidity to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a242940>
2024-08-20 14:47:09,888 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,891 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:09,893 - INFO - Created relationship from Humidity to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1df0>
2024-08-20 14:47:09,898 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,902 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:09,905 - INFO - Created relationship from Humidity to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b880>
2024-08-20 14:47:09,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,913 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a27b220>
2024-08-20 14:47:09,915 - INFO - Created relationship from Humidity to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:09,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,923 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce606a1040>
2024-08-20 14:47:09,927 - INFO - Created relationship from Humidity to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce6071d2b0>
2024-08-20 14:47:09,930 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,933 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a14dbe0>
2024-08-20 14:47:09,936 - INFO - Created relationship from Humidity to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d460>
2024-08-20 14:47:09,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Humidity'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,945 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a156f40>
2024-08-20 14:47:09,953 - INFO - Created relationship from Logistics Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151490>
2024-08-20 14:47:09,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Logistics Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,960 - INFO - Created node with label Environment: <neo4j._sync.work.result.Result object at 0x7fce7a151730>
2024-08-20 14:47:09,969 - INFO - Created relationship from Warehouse Condition to TBD with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:09,973 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Environment {name: 'Warehouse Condition'}), (b:Process {name: 'TBD'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,977 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a2860a0>
2024-08-20 14:47:09,985 - INFO - Created relationship from Xylitol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5bb0>
2024-08-20 14:47:09,989 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:09,992 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a0713a0>
2024-08-20 14:47:10,001 - INFO - Created relationship from Sugar Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151490>
2024-08-20 14:47:10,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sugar Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,008 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a1515b0>
2024-08-20 14:47:10,014 - INFO - Created relationship from Acid Powder to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d220>
2024-08-20 14:47:10,018 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Acid Powder'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,020 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a14d3a0>
2024-08-20 14:47:10,027 - INFO - Created relationship from Cooling Agent to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:10,031 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Cooling Agent'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,034 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a1576a0>
2024-08-20 14:47:10,041 - INFO - Created relationship from Menthol to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1790>
2024-08-20 14:47:10,045 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Menthol'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,049 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a276b80>
2024-08-20 14:47:10,057 - INFO - Created relationship from Pigment to Pre-Process with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a286310>
2024-08-20 14:47:10,061 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Pigment'}), (b:Process {name: 'Pre-Process'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,063 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:10,069 - INFO - Created relationship from Glucose to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:10,073 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glucose'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,075 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a344610>
2024-08-20 14:47:10,083 - INFO - Created relationship from Glycerinum to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:10,087 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Glycerinum'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,090 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:10,098 - INFO - Created relationship from Essence to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:10,103 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Essence'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,106 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a151e80>
2024-08-20 14:47:10,115 - INFO - Created relationship from Sorbitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151fd0>
2024-08-20 14:47:10,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Sorbitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,124 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:10,127 - INFO - Created relationship from Xylitol to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce606b5730>
2024-08-20 14:47:10,131 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Xylitol'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,134 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a286b80>
2024-08-20 14:47:10,140 - INFO - Created relationship from Granulated Sugar to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:10,144 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Granulated Sugar'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,146 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a157460>
2024-08-20 14:47:10,151 - INFO - Created relationship from Gum Base to Mixing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151220>
2024-08-20 14:47:10,155 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Base'}), (b:Process {name: 'Mixing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,157 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a151970>
2024-08-20 14:47:10,165 - INFO - Created relationship from Gum Micelle to Extrusion with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b550>
2024-08-20 14:47:10,169 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Extrusion'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,172 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a27bf10>
2024-08-20 14:47:10,178 - INFO - Created relationship from Corn Starch to PowderSpray with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bfd0>
2024-08-20 14:47:10,182 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Corn Starch'}), (b:Process {name: 'PowderSpray'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,184 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a14db80>
2024-08-20 14:47:10,186 - INFO - Created relationship from Gum Micelle to Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dbb0>
2024-08-20 14:47:10,190 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,192 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a14d160>
2024-08-20 14:47:10,194 - INFO - Created relationship from Gum Micelle to Final Forming with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a2761f0>
2024-08-20 14:47:10,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Final Forming'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,199 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:10,201 - INFO - Created relationship from Gum Micelle to Cooling with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a14ddc0>
2024-08-20 14:47:10,205 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Cooling'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,206 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a0b9fa0>
2024-08-20 14:47:10,208 - INFO - Created relationship from Gum Micelle to Slicing with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b100>
2024-08-20 14:47:10,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Slicing'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,215 - INFO - Created node with label Material: <neo4j._sync.work.result.Result object at 0x7fce7a27b430>
2024-08-20 14:47:10,217 - INFO - Created relationship from Gum Micelle to Weighting with type HAS_Process: <neo4j._sync.work.result.Result object at 0x7fce7a151310>
2024-08-20 14:47:10,222 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Material {name: 'Gum Micelle'}), (b:Process {name: 'Weighting'}) MERGE (a)-[:HAS_Process]->(b)"
2024-08-20 14:47:10,225 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a151340>
2024-08-20 14:47:10,228 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a344610>
2024-08-20 14:47:10,236 - INFO - Created relationship from FVSS to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:10,240 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVSS'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,243 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a071100>
2024-08-20 14:47:10,246 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a276070>
2024-08-20 14:47:10,252 - INFO - Created relationship from FVBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276a00>
2024-08-20 14:47:10,256 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,258 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce6071dbe0>
2024-08-20 14:47:10,260 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:10,266 - INFO - Created relationship from EXCW to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151fd0>
2024-08-20 14:47:10,270 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXCW'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,272 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a1513a0>
2024-08-20 14:47:10,274 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a27b130>
2024-08-20 14:47:10,281 - INFO - Created relationship from EBB to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bb80>
2024-08-20 14:47:10,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EBB'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,288 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d30>
2024-08-20 14:47:10,291 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a14d340>
2024-08-20 14:47:10,298 - INFO - Created relationship from FVWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:10,302 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,305 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce606b5b50>
2024-08-20 14:47:10,307 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a14dfa0>
2024-08-20 14:47:10,315 - INFO - Created relationship from EXPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d7f0>
2024-08-20 14:47:10,319 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,322 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9eb0>
2024-08-20 14:47:10,324 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a27b6a0>
2024-08-20 14:47:10,333 - INFO - Created relationship from EXTP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b970>
2024-08-20 14:47:10,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXTP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,349 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a3449a0>
2024-08-20 14:47:10,351 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a151730>
2024-08-20 14:47:10,357 - INFO - Created relationship from EXSM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1512e0>
2024-08-20 14:47:10,361 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'EXSM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,364 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:10,368 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a071760>
2024-08-20 14:47:10,377 - INFO - Created relationship from FVPP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddac0>
2024-08-20 14:47:10,381 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'FVPP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,384 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce79ff7a90>
2024-08-20 14:47:10,387 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce6071d160>
2024-08-20 14:47:10,394 - INFO - Created relationship from DMLM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a156e20>
2024-08-20 14:47:10,398 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMLM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,400 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a151d60>
2024-08-20 14:47:10,402 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:10,410 - INFO - Created relationship from DMRR to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b700>
2024-08-20 14:47:10,414 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRR'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,418 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b250>
2024-08-20 14:47:10,422 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a0b9dc0>
2024-08-20 14:47:10,432 - INFO - Created relationship from DMRM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d340>
2024-08-20 14:47:10,437 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,441 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d490>
2024-08-20 14:47:10,445 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a2dd9d0>
2024-08-20 14:47:10,453 - INFO - Created relationship from DMRJ to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5910>
2024-08-20 14:47:10,457 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRJ'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,460 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d8e0>
2024-08-20 14:47:10,462 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a14de80>
2024-08-20 14:47:10,472 - INFO - Created relationship from DMRC to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b100>
2024-08-20 14:47:10,476 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMRC'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,480 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b430>
2024-08-20 14:47:10,483 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a27b730>
2024-08-20 14:47:10,492 - INFO - Created relationship from DMPE to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1512b0>
2024-08-20 14:47:10,496 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPE'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,499 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a1510d0>
2024-08-20 14:47:10,501 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a157610>
2024-08-20 14:47:10,508 - INFO - Created relationship from WSP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:10,512 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'WSP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,514 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce606a12e0>
2024-08-20 14:47:10,515 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a071100>
2024-08-20 14:47:10,522 - INFO - Created relationship from DMPY to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:10,526 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'DMPY'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,527 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a151e50>
2024-08-20 14:47:10,529 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a151df0>
2024-08-20 14:47:10,536 - INFO - Created relationship from RPWP to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce79d321f0>
2024-08-20 14:47:10,541 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'RPWP'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,544 - INFO - Created node with label Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b700>
2024-08-20 14:47:10,545 - INFO - Created node with label SKU: <neo4j._sync.work.result.Result object at 0x7fce7a27b8b0>
2024-08-20 14:47:10,553 - INFO - Created relationship from AUWM to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d90>
2024-08-20 14:47:10,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:SKU {name: 'AUWM'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,583 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d340>
2024-08-20 14:47:10,591 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dbb0>
2024-08-20 14:47:10,597 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:10,599 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dbb0>
2024-08-20 14:47:10,605 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14db20>
2024-08-20 14:47:10,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,611 - INFO - Created relationship from Sheeting to 环境控制 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:10,615 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '环境控制'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,617 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bbb0>
2024-08-20 14:47:10,621 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,623 - INFO - Created relationship from 环境控制 to 区域空调 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bd00>
2024-08-20 14:47:10,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '环境控制'}), (b:Machine {name: '区域空调'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,643 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151b80>
2024-08-20 14:47:10,651 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151d60>
2024-08-20 14:47:10,652 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:10,654 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a242940>
2024-08-20 14:47:10,659 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:10,660 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,662 - INFO - Created relationship from Sheeting to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1df0>
2024-08-20 14:47:10,666 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,668 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a071400>
2024-08-20 14:47:10,669 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,671 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157be0>
2024-08-20 14:47:10,675 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,690 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151220>
2024-08-20 14:47:10,698 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:10,700 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b490>
2024-08-20 14:47:10,701 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b970>
2024-08-20 14:47:10,706 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b250>
2024-08-20 14:47:10,707 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,708 - INFO - Created relationship from Sheeting to 挤压、切片系统生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d5e0>
2024-08-20 14:47:10,712 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,713 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d580>
2024-08-20 14:47:10,713 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,715 - INFO - Created relationship from 挤压、切片系统生产前调试 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:10,719 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统生产前调试'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,736 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:10,743 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddbe0>
2024-08-20 14:47:10,744 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14df40>
2024-08-20 14:47:10,746 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d880>
2024-08-20 14:47:10,751 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d30>
2024-08-20 14:47:10,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,752 - INFO - Created relationship from Sheeting to 除湿机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b370>
2024-08-20 14:47:10,756 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,757 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b550>
2024-08-20 14:47:10,758 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,762 - INFO - Created relationship from 除湿机生产前调试 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1517c0>
2024-08-20 14:47:10,765 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前调试'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,791 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151640>
2024-08-20 14:47:10,799 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1578b0>
2024-08-20 14:47:10,801 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071de50>
2024-08-20 14:47:10,803 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286550>
2024-08-20 14:47:10,804 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071460>
2024-08-20 14:47:10,805 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,806 - INFO - Created relationship from Sheeting to 除湿机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a157be0>
2024-08-20 14:47:10,809 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,810 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151940>
2024-08-20 14:47:10,810 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,811 - INFO - Created relationship from 除湿机生产前空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151310>
2024-08-20 14:47:10,815 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产前空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,828 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:10,835 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27be50>
2024-08-20 14:47:10,837 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f10>
2024-08-20 14:47:10,838 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d8b0>
2024-08-20 14:47:10,843 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14df40>
2024-08-20 14:47:10,844 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,845 - INFO - Created relationship from Sheeting to 冷冻机生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dda90>
2024-08-20 14:47:10,849 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,851 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286a30>
2024-08-20 14:47:10,851 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,853 - INFO - Created relationship from 冷冻机生产前调试 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1670>
2024-08-20 14:47:10,857 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前调试'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,875 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d4f0>
2024-08-20 14:47:10,881 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:10,883 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9dc0>
2024-08-20 14:47:10,884 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:10,886 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bd00>
2024-08-20 14:47:10,886 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,887 - INFO - Created relationship from Sheeting to 冷冻机生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:10,892 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,893 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:10,893 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,895 - INFO - Created relationship from 冷冻机生产前空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1576a0>
2024-08-20 14:47:10,897 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产前空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,912 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce6071df10>
2024-08-20 14:47:10,923 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0100>
2024-08-20 14:47:10,924 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79d321f0>
2024-08-20 14:47:10,926 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151eb0>
2024-08-20 14:47:10,931 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151f70>
2024-08-20 14:47:10,931 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,933 - INFO - Created relationship from Sheeting to 切片机除尘系统生产前空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286f40>
2024-08-20 14:47:10,935 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产前空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,936 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2864c0>
2024-08-20 14:47:10,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,938 - INFO - Created relationship from 切片机除尘系统生产前空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157b50>
2024-08-20 14:47:10,941 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产前空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:10,958 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1c10>
2024-08-20 14:47:10,964 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a17c0>
2024-08-20 14:47:10,965 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd9d0>
2024-08-20 14:47:10,967 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:10,969 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b4c0>
2024-08-20 14:47:10,969 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:10,971 - INFO - Created relationship from Sheeting to 挤压、切片系统运行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:10,976 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统运行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:10,977 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc70>
2024-08-20 14:47:10,977 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:10,979 - INFO - Created relationship from 挤压、切片系统运行 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1730>
2024-08-20 14:47:10,981 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统运行'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,000 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a10d0>
2024-08-20 14:47:11,006 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:11,008 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286a30>
2024-08-20 14:47:11,011 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d60>
2024-08-20 14:47:11,013 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151e20>
2024-08-20 14:47:11,013 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,014 - INFO - Created relationship from Sheeting to 挤压、切片系统停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151550>
2024-08-20 14:47:11,017 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '挤压、切片系统停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,018 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071d160>
2024-08-20 14:47:11,018 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,020 - INFO - Created relationship from 挤压、切片系统停止生产 to 切片机、挤压机、边料挤压机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b1c0>
2024-08-20 14:47:11,024 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '挤压、切片系统停止生产'}), (b:Machine {name: '切片机、挤压机、边料挤压机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,041 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a344a00>
2024-08-20 14:47:11,046 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151ca0>
2024-08-20 14:47:11,048 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151820>
2024-08-20 14:47:11,049 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286970>
2024-08-20 14:47:11,050 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286eb0>
2024-08-20 14:47:11,051 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,052 - INFO - Created relationship from Sheeting to 冷冻机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1670>
2024-08-20 14:47:11,054 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '冷冻机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,054 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a13a0>
2024-08-20 14:47:11,055 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,056 - INFO - Created relationship from 冷冻机生产中空载 to 低温冷冻机（丙二醇冷冻机组） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1790>
2024-08-20 14:47:11,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '冷冻机生产中空载'}), (b:Machine {name: '低温冷冻机（丙二醇冷冻机组）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,069 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6a0>
2024-08-20 14:47:11,075 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bfd0>
2024-08-20 14:47:11,077 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b880>
2024-08-20 14:47:11,078 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27be20>
2024-08-20 14:47:11,079 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6d0>
2024-08-20 14:47:11,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,081 - INFO - Created relationship from Sheeting to 除湿机生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd670>
2024-08-20 14:47:11,083 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '除湿机生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,084 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:11,084 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,085 - INFO - Created relationship from 除湿机生产中空载 to 冷辊除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1550>
2024-08-20 14:47:11,089 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除湿机生产中空载'}), (b:Machine {name: '冷辊除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,102 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1574c0>
2024-08-20 14:47:11,109 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286a00>
2024-08-20 14:47:11,111 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9e80>
2024-08-20 14:47:11,112 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1515b0>
2024-08-20 14:47:11,114 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151dc0>
2024-08-20 14:47:11,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,116 - INFO - Created relationship from Sheeting to 切片机除尘系统生产中空载 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a071250>
2024-08-20 14:47:11,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '切片机除尘系统生产中空载'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,120 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:11,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,122 - INFO - Created relationship from 切片机除尘系统生产中空载 to 切片除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:11,124 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '切片机除尘系统生产中空载'}), (b:Machine {name: '切片除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,138 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:11,145 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286580>
2024-08-20 14:47:11,146 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:11,148 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b50>
2024-08-20 14:47:11,154 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:11,154 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,156 - INFO - Created relationship from Sheeting to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1130>
2024-08-20 14:47:11,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,161 - INFO - Created relationship from Sheeting to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddac0>
2024-08-20 14:47:11,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Sheeting'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,163 - INFO - Created relationship from 异常处理 to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b940>
2024-08-20 14:47:11,166 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,180 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2760a0>
2024-08-20 14:47:11,187 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27be20>
2024-08-20 14:47:11,189 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6d0>
2024-08-20 14:47:11,194 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd30>
2024-08-20 14:47:11,197 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1430>
2024-08-20 14:47:11,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,199 - INFO - Created relationship from Mixer to 开机前准备 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:11,203 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '开机前准备'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,204 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:11,206 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,207 - INFO - Created relationship from 开机前准备 to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2865b0>
2024-08-20 14:47:11,209 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '开机前准备'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,223 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:11,229 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151790>
2024-08-20 14:47:11,231 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151670>
2024-08-20 14:47:11,232 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2767f0>
2024-08-20 14:47:11,238 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:11,238 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,239 - INFO - Created relationship from Mixer to 生产前调试 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151400>
2024-08-20 14:47:11,243 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '生产前调试'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,244 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9fd0>
2024-08-20 14:47:11,245 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,246 - INFO - Created relationship from 生产前调试 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286f40>
2024-08-20 14:47:11,250 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '生产前调试'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer——时间短，有清单，批次开始前'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,270 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:11,277 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1f70>
2024-08-20 14:47:11,278 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:11,280 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b5b0>
2024-08-20 14:47:11,285 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6a0>
2024-08-20 14:47:11,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,290 - INFO - Created relationship from Mixer to 启动夹套水加热器 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b8b0>
2024-08-20 14:47:11,293 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '启动夹套水加热器'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,296 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276af0>
2024-08-20 14:47:11,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,298 - INFO - Created relationship from 启动夹套水加热器 to 夹套水系统（设备清单中名称为热水）-用到热水、模温机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bb20>
2024-08-20 14:47:11,302 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '启动夹套水加热器'}), (b:Machine {name: '夹套水系统（设备清单中名称为热水）-用到热水、模温机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,314 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd7c0>
2024-08-20 14:47:11,318 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfa0>
2024-08-20 14:47:11,319 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:11,320 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1ee0>
2024-08-20 14:47:11,324 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:11,324 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,325 - INFO - Created relationship from Mixer to NCS系统降温 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286490>
2024-08-20 14:47:11,328 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: 'NCS系统降温'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,329 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9dc0>
2024-08-20 14:47:11,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,330 - INFO - Created relationship from NCS系统降温 to 停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1512b0>
2024-08-20 14:47:11,332 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'NCS系统降温'}), (b:Machine {name: '停产时消耗热水，控制85℃，正常生产，控制60℃——常年运行，用热水，有计量仪表（UT仪表）；约30分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,339 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1510d0>
2024-08-20 14:47:11,341 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d5e0>
2024-08-20 14:47:11,342 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151670>
2024-08-20 14:47:11,343 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1512e0>
2024-08-20 14:47:11,347 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9dc0>
2024-08-20 14:47:11,347 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,348 - INFO - Created relationship from Mixer to 除尘系统启动 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286430>
2024-08-20 14:47:11,351 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '除尘系统启动'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,352 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157790>
2024-08-20 14:47:11,352 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,353 - INFO - Created relationship from 除尘系统启动 to 混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:11,354 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '除尘系统启动'}), (b:Machine {name: '混合机/配料房除尘塔 #2，对应4台Mixer和配料房，共5个粉尘吸入口，目前为定频电机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,362 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:11,365 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddaf0>
2024-08-20 14:47:11,366 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd760>
2024-08-20 14:47:11,366 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b8b0>
2024-08-20 14:47:11,371 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d760>
2024-08-20 14:47:11,371 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,372 - INFO - Created relationship from Mixer to 1#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b610>
2024-08-20 14:47:11,375 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '1#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,376 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dd580>
2024-08-20 14:47:11,376 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,377 - INFO - Created relationship from 1#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddee0>
2024-08-20 14:47:11,380 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '1#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,387 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1e50>
2024-08-20 14:47:11,390 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:11,390 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a299d90>
2024-08-20 14:47:11,391 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286910>
2024-08-20 14:47:11,391 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:11,392 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,392 - INFO - Created relationship from Mixer to 2#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:11,395 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '2#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,396 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151dc0>
2024-08-20 14:47:11,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,396 - INFO - Created relationship from 2#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14ddf0>
2024-08-20 14:47:11,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '2#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,406 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1510d0>
2024-08-20 14:47:11,410 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1515e0>
2024-08-20 14:47:11,410 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d90>
2024-08-20 14:47:11,411 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286430>
2024-08-20 14:47:11,411 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157610>
2024-08-20 14:47:11,411 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,412 - INFO - Created relationship from Mixer to 3#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1520>
2024-08-20 14:47:11,416 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '3#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,417 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1280>
2024-08-20 14:47:11,417 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,417 - INFO - Created relationship from 3#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:11,421 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '3#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,426 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8b0>
2024-08-20 14:47:11,431 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b160>
2024-08-20 14:47:11,432 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d2b0>
2024-08-20 14:47:11,432 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dc40>
2024-08-20 14:47:11,433 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd760>
2024-08-20 14:47:11,433 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,433 - INFO - Created relationship from Mixer to 4#Mixer配方执行 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb20>
2024-08-20 14:47:11,436 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '4#Mixer配方执行'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,437 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1790>
2024-08-20 14:47:11,437 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,437 - INFO - Created relationship from 4#Mixer配方执行 to 1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b50>
2024-08-20 14:47:11,439 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '4#Mixer配方执行'}), (b:Machine {name: '1# Mixer、2# Mixer、3# Mixer、4# Mixer；放胶根据挤压机的控制料仓高度，控制放胶。——搅拌完成，有等待放胶的提示。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,445 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157460>
2024-08-20 14:47:11,449 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:11,449 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286160>
2024-08-20 14:47:11,450 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151760>
2024-08-20 14:47:11,451 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151d60>
2024-08-20 14:47:11,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,451 - INFO - Created relationship from Mixer to 停止生产 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0550>
2024-08-20 14:47:11,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '停止生产'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,456 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2865e0>
2024-08-20 14:47:11,456 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,456 - INFO - Created relationship from 停止生产 to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286550>
2024-08-20 14:47:11,459 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '停止生产'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,465 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157be0>
2024-08-20 14:47:11,469 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1f40>
2024-08-20 14:47:11,469 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:11,470 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd790>
2024-08-20 14:47:11,472 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d6a0>
2024-08-20 14:47:11,472 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,473 - INFO - Created relationship from Mixer to 异常处理 with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d9d0>
2024-08-20 14:47:11,475 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Step {name: '异常处理'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,475 - INFO - Created relationship from Mixer to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:11,475 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'Mixer'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,476 - INFO - Created relationship from 异常处理 to 一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:11,479 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: '异常处理'}), (b:Machine {name: '一般会停机，不消耗额外能源。有糖：Mixer和切片速度匹配，无糖：Mixer时间会富余。单独一台Mixer异常停机时，可降速生产。'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,480 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:11,484 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2769a0>
2024-08-20 14:47:11,488 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:11,488 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14ddf0>
2024-08-20 14:47:11,489 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:11,492 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,493 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd580>
2024-08-20 14:47:11,495 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,495 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1220>
2024-08-20 14:47:11,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,499 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1640>
2024-08-20 14:47:11,502 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,509 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:11,513 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286ee0>
2024-08-20 14:47:11,514 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286a30>
2024-08-20 14:47:11,514 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:11,518 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286340>
2024-08-20 14:47:11,518 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,518 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286100>
2024-08-20 14:47:11,522 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,523 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157b50>
2024-08-20 14:47:11,525 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,527 - INFO - Created relationship from nan to 振筛机\配料提升机升降正常\电子称打印机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:11,528 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机\\配料提升机升降正常\\电子称打印机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,535 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1790>
2024-08-20 14:47:11,540 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd580>
2024-08-20 14:47:11,541 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d820>
2024-08-20 14:47:11,542 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dee0>
2024-08-20 14:47:11,546 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d9a0>
2024-08-20 14:47:11,547 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,547 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2761f0>
2024-08-20 14:47:11,550 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,552 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:11,552 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,553 - INFO - Created relationship from nan to 振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2761f0>
2024-08-20 14:47:11,557 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,564 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d520>
2024-08-20 14:47:11,568 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d640>
2024-08-20 14:47:11,569 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14deb0>
2024-08-20 14:47:11,570 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd7c0>
2024-08-20 14:47:11,571 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a19a0>
2024-08-20 14:47:11,571 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,572 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1ac0>
2024-08-20 14:47:11,575 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,576 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a299d90>
2024-08-20 14:47:11,577 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,578 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286f70>
2024-08-20 14:47:11,580 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,588 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286f40>
2024-08-20 14:47:11,594 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:11,595 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286490>
2024-08-20 14:47:11,596 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286970>
2024-08-20 14:47:11,598 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:11,599 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,600 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a19d0>
2024-08-20 14:47:11,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,605 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:11,605 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,606 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddf10>
2024-08-20 14:47:11,610 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,618 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d1f0>
2024-08-20 14:47:11,623 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d100>
2024-08-20 14:47:11,624 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d280>
2024-08-20 14:47:11,625 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276b80>
2024-08-20 14:47:11,627 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151430>
2024-08-20 14:47:11,627 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,628 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a1517c0>
2024-08-20 14:47:11,630 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,631 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276070>
2024-08-20 14:47:11,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,632 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d910>
2024-08-20 14:47:11,635 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,643 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d250>
2024-08-20 14:47:11,648 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd640>
2024-08-20 14:47:11,649 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd5e0>
2024-08-20 14:47:11,651 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1fa0>
2024-08-20 14:47:11,655 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:11,656 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,657 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a157580>
2024-08-20 14:47:11,661 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,662 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286580>
2024-08-20 14:47:11,662 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,663 - INFO - Created relationship from nan to 吸包机、振筛机（密封气囊） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d040>
2024-08-20 14:47:11,665 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吸包机、振筛机（密封气囊）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,673 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286eb0>
2024-08-20 14:47:11,678 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:11,679 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1430>
2024-08-20 14:47:11,680 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1c70>
2024-08-20 14:47:11,684 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a10d0>
2024-08-20 14:47:11,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,686 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfd0>
2024-08-20 14:47:11,690 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,690 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14daf0>
2024-08-20 14:47:11,691 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,692 - INFO - Created relationship from nan to 振筛机（震动开关、抽风开关、密封气囊）、电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d2e0>
2024-08-20 14:47:11,694 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振筛机（震动开关、抽风开关、密封气囊）、电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,702 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:11,706 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:11,708 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b8b0>
2024-08-20 14:47:11,709 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151fa0>
2024-08-20 14:47:11,713 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:11,714 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,715 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d700>
2024-08-20 14:47:11,719 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,720 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dee0>
2024-08-20 14:47:11,720 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,721 - INFO - Created relationship from nan to 气动泵 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc10>
2024-08-20 14:47:11,723 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,732 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd9d0>
2024-08-20 14:47:11,737 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1d60>
2024-08-20 14:47:11,738 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1550>
2024-08-20 14:47:11,739 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1578b0>
2024-08-20 14:47:11,744 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286550>
2024-08-20 14:47:11,744 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,746 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b100>
2024-08-20 14:47:11,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,751 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286160>
2024-08-20 14:47:11,751 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,752 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157580>
2024-08-20 14:47:11,754 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,766 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1b50>
2024-08-20 14:47:11,772 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a11f0>
2024-08-20 14:47:11,774 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd970>
2024-08-20 14:47:11,775 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dc40>
2024-08-20 14:47:11,778 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:11,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,780 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d910>
2024-08-20 14:47:11,784 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,785 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276d60>
2024-08-20 14:47:11,786 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,787 - INFO - Created relationship from nan to 电子秤（预热60min） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a3449a0>
2024-08-20 14:47:11,791 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤（预热60min）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,806 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:11,813 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b310>
2024-08-20 14:47:11,814 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2768b0>
2024-08-20 14:47:11,815 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d5e0>
2024-08-20 14:47:11,821 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14de50>
2024-08-20 14:47:11,822 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,823 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dd90>
2024-08-20 14:47:11,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,828 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc70>
2024-08-20 14:47:11,829 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,831 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1730>
2024-08-20 14:47:11,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,846 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1460>
2024-08-20 14:47:11,854 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157730>
2024-08-20 14:47:11,855 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:11,857 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5070>
2024-08-20 14:47:11,860 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:11,861 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,862 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a1577c0>
2024-08-20 14:47:11,866 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,867 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:11,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,868 - INFO - Created relationship from nan to 电子秤\打印机\配料升降机\抽风系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:11,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤\\打印机\\配料升降机\\抽风系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,885 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd910>
2024-08-20 14:47:11,892 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dd60>
2024-08-20 14:47:11,894 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d1f0>
2024-08-20 14:47:11,895 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dbe0>
2024-08-20 14:47:11,900 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2767f0>
2024-08-20 14:47:11,900 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,901 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b220>
2024-08-20 14:47:11,905 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,906 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d08b0>
2024-08-20 14:47:11,907 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,908 - INFO - Created relationship from nan to 地磅 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b1c0>
2024-08-20 14:47:11,912 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '地磅'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,928 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:11,935 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dc10>
2024-08-20 14:47:11,937 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dee0>
2024-08-20 14:47:11,938 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14da90>
2024-08-20 14:47:11,942 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd880>
2024-08-20 14:47:11,942 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,944 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:11,948 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,949 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:11,950 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,952 - INFO - Created relationship from nan to 升降梯 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:11,954 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '升降梯'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:11,970 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:11,978 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0820>
2024-08-20 14:47:11,980 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a11c0>
2024-08-20 14:47:11,981 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:11,982 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddbb0>
2024-08-20 14:47:11,983 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:11,984 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:11,986 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:11,988 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dd30>
2024-08-20 14:47:11,988 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:11,989 - INFO - Created relationship from nan to 电子秤 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d850>
2024-08-20 14:47:11,992 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子秤'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,001 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157760>
2024-08-20 14:47:12,005 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bac0>
2024-08-20 14:47:12,007 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b9d0>
2024-08-20 14:47:12,008 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071df10>
2024-08-20 14:47:12,010 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:12,011 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,011 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b580>
2024-08-20 14:47:12,015 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,015 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bc10>
2024-08-20 14:47:12,016 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,017 - INFO - Created relationship from nan to 货梯、叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b1c0>
2024-08-20 14:47:12,019 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '货梯、叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,025 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5b50>
2024-08-20 14:47:12,030 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d9a0>
2024-08-20 14:47:12,032 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d0a0>
2024-08-20 14:47:12,033 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6a0>
2024-08-20 14:47:12,035 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd9d0>
2024-08-20 14:47:12,036 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,036 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1a00>
2024-08-20 14:47:12,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,040 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:12,041 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,042 - INFO - Created relationship from nan to 电子称、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151eb0>
2024-08-20 14:47:12,043 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,049 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151910>
2024-08-20 14:47:12,054 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1220>
2024-08-20 14:47:12,055 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1520>
2024-08-20 14:47:12,056 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd5e0>
2024-08-20 14:47:12,059 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d400>
2024-08-20 14:47:12,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,060 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d8b0>
2024-08-20 14:47:12,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,064 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:12,065 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,066 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157880>
2024-08-20 14:47:12,069 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,075 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b970>
2024-08-20 14:47:12,080 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bd30>
2024-08-20 14:47:12,082 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f70>
2024-08-20 14:47:12,083 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bf70>
2024-08-20 14:47:12,085 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bc70>
2024-08-20 14:47:12,086 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,087 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27ba30>
2024-08-20 14:47:12,089 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,090 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5d30>
2024-08-20 14:47:12,091 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,092 - INFO - Created relationship from nan to 电子称（Depend on PPlan）、 打印机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:12,095 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电子称（Depend on PPlan）、 打印机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,100 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d760>
2024-08-20 14:47:12,106 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:12,107 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:12,109 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a18e0>
2024-08-20 14:47:12,110 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a11f0>
2024-08-20 14:47:12,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,111 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0711c0>
2024-08-20 14:47:12,113 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,114 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:12,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,115 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1ca0>
2024-08-20 14:47:12,119 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,124 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1280>
2024-08-20 14:47:12,133 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd190>
2024-08-20 14:47:12,135 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d250>
2024-08-20 14:47:12,138 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d940>
2024-08-20 14:47:12,139 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d6d0>
2024-08-20 14:47:12,140 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,141 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:12,142 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,143 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b700>
2024-08-20 14:47:12,144 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,144 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b4f0>
2024-08-20 14:47:12,146 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,152 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce6071dbe0>
2024-08-20 14:47:12,157 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b190>
2024-08-20 14:47:12,158 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bac0>
2024-08-20 14:47:12,159 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157880>
2024-08-20 14:47:12,160 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5730>
2024-08-20 14:47:12,160 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,161 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d070>
2024-08-20 14:47:12,164 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,165 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d280>
2024-08-20 14:47:12,165 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,165 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd5e0>
2024-08-20 14:47:12,170 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,176 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:12,181 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1460>
2024-08-20 14:47:12,182 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151340>
2024-08-20 14:47:12,183 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:12,187 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:12,187 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,187 - INFO - Created relationship from 小配料 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a14c0>
2024-08-20 14:47:12,190 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,190 - INFO - Created relationship from 小配料 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:12,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '小配料'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,191 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8e0>
2024-08-20 14:47:12,193 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,194 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14da00>
2024-08-20 14:47:12,194 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14db50>
2024-08-20 14:47:12,195 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d880>
2024-08-20 14:47:12,195 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157880>
2024-08-20 14:47:12,196 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bf40>
2024-08-20 14:47:12,196 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,196 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b910>
2024-08-20 14:47:12,198 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,199 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:12,199 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,199 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b8b0>
2024-08-20 14:47:12,202 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,207 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b280>
2024-08-20 14:47:12,210 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157670>
2024-08-20 14:47:12,211 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:12,211 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:12,212 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d820>
2024-08-20 14:47:12,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,212 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd880>
2024-08-20 14:47:12,216 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,217 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dddc0>
2024-08-20 14:47:12,218 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,219 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1af0>
2024-08-20 14:47:12,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,226 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151f70>
2024-08-20 14:47:12,230 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286bb0>
2024-08-20 14:47:12,231 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:12,232 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:12,235 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:12,235 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,236 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8b0>
2024-08-20 14:47:12,237 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,238 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d310>
2024-08-20 14:47:12,238 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,239 - INFO - Created relationship from nan to Kanban with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d5b0>
2024-08-20 14:47:12,243 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'Kanban'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,248 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b50a0>
2024-08-20 14:47:12,251 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:12,253 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bc10>
2024-08-20 14:47:12,254 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b760>
2024-08-20 14:47:12,258 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286ee0>
2024-08-20 14:47:12,258 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,259 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b5e0>
2024-08-20 14:47:12,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,261 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bc10>
2024-08-20 14:47:12,262 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,263 - INFO - Created relationship from nan to 叉车 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:12,266 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '叉车'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,271 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:12,276 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dd30>
2024-08-20 14:47:12,277 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d7f0>
2024-08-20 14:47:12,279 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddaf0>
2024-08-20 14:47:12,282 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:12,283 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,284 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1e80>
2024-08-20 14:47:12,286 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,287 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1511f0>
2024-08-20 14:47:12,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,288 - INFO - Created relationship from nan to 砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286640>
2024-08-20 14:47:12,292 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、砂糖卸料站、振动筛、十吨罐和循环系统罐、打糖机、搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,298 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1513a0>
2024-08-20 14:47:12,303 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a19d0>
2024-08-20 14:47:12,304 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:12,306 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8e0>
2024-08-20 14:47:12,309 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:12,310 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,311 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d6d0>
2024-08-20 14:47:12,313 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,313 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:12,314 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,315 - INFO - Created relationship from nan to 1#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157b80>
2024-08-20 14:47:12,319 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,325 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27ba60>
2024-08-20 14:47:12,329 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b7f0>
2024-08-20 14:47:12,331 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a90>
2024-08-20 14:47:12,332 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b970>
2024-08-20 14:47:12,336 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b280>
2024-08-20 14:47:12,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,338 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b400>
2024-08-20 14:47:12,340 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,341 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5730>
2024-08-20 14:47:12,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,342 - INFO - Created relationship from nan to 砂糖系统、糖粉接收罐和循环系统罐、磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d640>
2024-08-20 14:47:12,346 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '砂糖系统、糖粉接收罐和循环系统罐、磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,352 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14db50>
2024-08-20 14:47:12,359 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd550>
2024-08-20 14:47:12,360 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ddf10>
2024-08-20 14:47:12,362 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b80>
2024-08-20 14:47:12,365 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a3446d0>
2024-08-20 14:47:12,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,367 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286670>
2024-08-20 14:47:12,369 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,370 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dd760>
2024-08-20 14:47:12,371 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,372 - INFO - Created relationship from nan to 2#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dbb0>
2024-08-20 14:47:12,375 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '2#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,381 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d5b0>
2024-08-20 14:47:12,388 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:12,389 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157880>
2024-08-20 14:47:12,390 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b80>
2024-08-20 14:47:12,393 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2866d0>
2024-08-20 14:47:12,394 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,394 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2863d0>
2024-08-20 14:47:12,396 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,397 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276b80>
2024-08-20 14:47:12,398 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,398 - INFO - Created relationship from nan to 3#蒙特除湿机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0713a0>
2024-08-20 14:47:12,402 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '3#蒙特除湿机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,410 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d90>
2024-08-20 14:47:12,416 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071c70>
2024-08-20 14:47:12,417 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276ac0>
2024-08-20 14:47:12,419 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2761f0>
2024-08-20 14:47:12,421 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286eb0>
2024-08-20 14:47:12,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,423 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0400>
2024-08-20 14:47:12,429 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,432 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157af0>
2024-08-20 14:47:12,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,434 - INFO - Created relationship from nan to 电动叉车、电葫芦、砂糖系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:12,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车、电葫芦、砂糖系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,443 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dc70>
2024-08-20 14:47:12,446 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dc10>
2024-08-20 14:47:12,447 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfd0>
2024-08-20 14:47:12,449 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b460>
2024-08-20 14:47:12,451 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd790>
2024-08-20 14:47:12,451 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,452 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d940>
2024-08-20 14:47:12,454 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,454 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dc70>
2024-08-20 14:47:12,455 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,456 - INFO - Created relationship from nan to 电葫芦、ZMT21 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:12,458 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电葫芦、ZMT21'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,464 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157610>
2024-08-20 14:47:12,467 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f70>
2024-08-20 14:47:12,468 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286490>
2024-08-20 14:47:12,469 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a344a00>
2024-08-20 14:47:12,472 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276af0>
2024-08-20 14:47:12,472 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,473 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0710d0>
2024-08-20 14:47:12,477 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,478 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bb80>
2024-08-20 14:47:12,478 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,479 - INFO - Created relationship from nan to 下糖斗RV阀、磨糖机、磨糖风机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0713a0>
2024-08-20 14:47:12,483 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '下糖斗RV阀、磨糖机、磨糖风机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,488 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276cd0>
2024-08-20 14:47:12,493 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a156e20>
2024-08-20 14:47:12,494 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286fd0>
2024-08-20 14:47:12,495 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0bb0>
2024-08-20 14:47:12,498 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:12,498 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,499 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14da60>
2024-08-20 14:47:12,503 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,503 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:12,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,505 - INFO - Created relationship from nan to 卸糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:12,509 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '卸糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,515 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc70>
2024-08-20 14:47:12,520 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b850>
2024-08-20 14:47:12,521 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b1c0>
2024-08-20 14:47:12,522 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddca0>
2024-08-20 14:47:12,525 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d0a0>
2024-08-20 14:47:12,525 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,526 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14deb0>
2024-08-20 14:47:12,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,530 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5d00>
2024-08-20 14:47:12,531 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,532 - INFO - Created relationship from nan to 1#风机、振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b80>
2024-08-20 14:47:12,534 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#风机、振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,540 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2865b0>
2024-08-20 14:47:12,545 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2860a0>
2024-08-20 14:47:12,546 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276d90>
2024-08-20 14:47:12,546 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:12,549 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9bb0>
2024-08-20 14:47:12,550 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,550 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276d00>
2024-08-20 14:47:12,553 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,554 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276c70>
2024-08-20 14:47:12,555 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,555 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286370>
2024-08-20 14:47:12,558 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,564 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286e80>
2024-08-20 14:47:12,569 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0460>
2024-08-20 14:47:12,570 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5070>
2024-08-20 14:47:12,571 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:12,572 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d730>
2024-08-20 14:47:12,572 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,573 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d490>
2024-08-20 14:47:12,575 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,576 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dd880>
2024-08-20 14:47:12,576 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,577 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a10d0>
2024-08-20 14:47:12,579 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,584 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd90>
2024-08-20 14:47:12,590 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d3d0>
2024-08-20 14:47:12,591 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:12,592 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d640>
2024-08-20 14:47:12,592 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:12,592 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,593 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ee0>
2024-08-20 14:47:12,595 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,595 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286e80>
2024-08-20 14:47:12,595 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,596 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286e20>
2024-08-20 14:47:12,598 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,603 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2769d0>
2024-08-20 14:47:12,608 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276d60>
2024-08-20 14:47:12,609 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a10a0>
2024-08-20 14:47:12,610 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:12,611 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:12,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,611 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276a00>
2024-08-20 14:47:12,614 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,615 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286640>
2024-08-20 14:47:12,615 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,615 - INFO - Created relationship from nan to 葫芦吊 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0e20>
2024-08-20 14:47:12,617 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '葫芦吊'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,622 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157670>
2024-08-20 14:47:12,625 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:12,627 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d880>
2024-08-20 14:47:12,627 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dd60>
2024-08-20 14:47:12,628 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddac0>
2024-08-20 14:47:12,628 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,628 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:12,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,632 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfa0>
2024-08-20 14:47:12,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,632 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:12,635 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,640 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dac0>
2024-08-20 14:47:12,646 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14da30>
2024-08-20 14:47:12,647 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:12,648 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0e20>
2024-08-20 14:47:12,650 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286e50>
2024-08-20 14:47:12,650 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,651 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:12,654 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,655 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:12,655 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,655 - INFO - Created relationship from nan to 搅拌罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1e50>
2024-08-20 14:47:12,660 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,666 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151250>
2024-08-20 14:47:12,671 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:12,672 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2763a0>
2024-08-20 14:47:12,673 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:12,675 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2860a0>
2024-08-20 14:47:12,676 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,677 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d09d0>
2024-08-20 14:47:12,680 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,680 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:12,681 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,682 - INFO - Created relationship from nan to 搅拌罐、吸尘器 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dd30>
2024-08-20 14:47:12,685 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '搅拌罐、吸尘器'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,690 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:12,695 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d3a0>
2024-08-20 14:47:12,696 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb20>
2024-08-20 14:47:12,697 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151b80>
2024-08-20 14:47:12,698 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1516d0>
2024-08-20 14:47:12,699 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,699 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:12,701 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,702 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d340>
2024-08-20 14:47:12,702 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,702 - INFO - Created relationship from nan to 所有能源覆盖物料设备和容器（包括电、水、气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14da30>
2024-08-20 14:47:12,705 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '所有能源覆盖物料设备和容器（包括电、水、气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,711 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5910>
2024-08-20 14:47:12,716 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d08e0>
2024-08-20 14:47:12,717 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286310>
2024-08-20 14:47:12,718 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2866d0>
2024-08-20 14:47:12,718 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2760d0>
2024-08-20 14:47:12,718 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,719 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276400>
2024-08-20 14:47:12,723 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,724 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a071160>
2024-08-20 14:47:12,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,725 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1c70>
2024-08-20 14:47:12,727 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,732 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2760d0>
2024-08-20 14:47:12,737 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286100>
2024-08-20 14:47:12,738 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286910>
2024-08-20 14:47:12,739 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0580>
2024-08-20 14:47:12,739 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157b80>
2024-08-20 14:47:12,740 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,740 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d1c0>
2024-08-20 14:47:12,743 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,744 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d8e0>
2024-08-20 14:47:12,744 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,745 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14db20>
2024-08-20 14:47:12,746 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,752 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc10>
2024-08-20 14:47:12,756 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ce2e0>
2024-08-20 14:47:12,757 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d430>
2024-08-20 14:47:12,758 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d370>
2024-08-20 14:47:12,759 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:12,759 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,760 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:12,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,764 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f70>
2024-08-20 14:47:12,764 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,765 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2865e0>
2024-08-20 14:47:12,768 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,775 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:12,779 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1514f0>
2024-08-20 14:47:12,780 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1511f0>
2024-08-20 14:47:12,781 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1490>
2024-08-20 14:47:12,784 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1520>
2024-08-20 14:47:12,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,785 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a18b0>
2024-08-20 14:47:12,789 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,789 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1517c0>
2024-08-20 14:47:12,790 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,791 - INFO - Created relationship from nan to 振动筛 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151250>
2024-08-20 14:47:12,794 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '振动筛'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,800 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce6071d9d0>
2024-08-20 14:47:12,804 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2861c0>
2024-08-20 14:47:12,805 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0970>
2024-08-20 14:47:12,806 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a90>
2024-08-20 14:47:12,807 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5910>
2024-08-20 14:47:12,808 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,808 - INFO - Created relationship from 砂糖系统 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d760>
2024-08-20 14:47:12,810 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,811 - INFO - Created relationship from 砂糖系统 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14db80>
2024-08-20 14:47:12,811 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '砂糖系统'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,812 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2769a0>
2024-08-20 14:47:12,816 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,839 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:12,841 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d460>
2024-08-20 14:47:12,842 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5e50>
2024-08-20 14:47:12,844 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d03a0>
2024-08-20 14:47:12,845 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d09d0>
2024-08-20 14:47:12,845 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,846 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286040>
2024-08-20 14:47:12,849 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,849 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071dd90>
2024-08-20 14:47:12,850 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,851 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1519a0>
2024-08-20 14:47:12,853 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,860 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151490>
2024-08-20 14:47:12,866 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a18e0>
2024-08-20 14:47:12,867 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:12,868 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1640>
2024-08-20 14:47:12,872 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:12,873 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,874 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151460>
2024-08-20 14:47:12,876 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,877 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1514c0>
2024-08-20 14:47:12,879 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,880 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286a30>
2024-08-20 14:47:12,882 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,889 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286f70>
2024-08-20 14:47:12,895 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fd0>
2024-08-20 14:47:12,896 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1578b0>
2024-08-20 14:47:12,898 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dac0>
2024-08-20 14:47:12,902 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d2b0>
2024-08-20 14:47:12,902 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,903 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd190>
2024-08-20 14:47:12,905 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,906 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d2b0>
2024-08-20 14:47:12,907 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,908 - INFO - Created relationship from nan to 是否为胶基系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d310>
2024-08-20 14:47:12,912 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为胶基系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,919 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1574c0>
2024-08-20 14:47:12,924 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0be0>
2024-08-20 14:47:12,926 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2861f0>
2024-08-20 14:47:12,927 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2863d0>
2024-08-20 14:47:12,928 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a03ba90>
2024-08-20 14:47:12,928 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,929 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a1519a0>
2024-08-20 14:47:12,933 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,933 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1eb0>
2024-08-20 14:47:12,934 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,935 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1dc0>
2024-08-20 14:47:12,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,944 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:12,950 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:12,951 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1f70>
2024-08-20 14:47:12,953 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151550>
2024-08-20 14:47:12,956 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151f40>
2024-08-20 14:47:12,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,958 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce6071dbb0>
2024-08-20 14:47:12,960 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,960 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286640>
2024-08-20 14:47:12,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,962 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f70>
2024-08-20 14:47:12,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:12,972 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157b80>
2024-08-20 14:47:12,977 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dc10>
2024-08-20 14:47:12,978 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dee0>
2024-08-20 14:47:12,980 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0717f0>
2024-08-20 14:47:12,984 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14da00>
2024-08-20 14:47:12,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:12,986 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:12,988 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:12,989 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5e50>
2024-08-20 14:47:12,989 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:12,990 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0040>
2024-08-20 14:47:12,992 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,001 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286a00>
2024-08-20 14:47:13,007 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2865b0>
2024-08-20 14:47:13,008 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a03ba90>
2024-08-20 14:47:13,019 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:13,020 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151940>
2024-08-20 14:47:13,021 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,022 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1640>
2024-08-20 14:47:13,026 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,027 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b490>
2024-08-20 14:47:13,028 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,029 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1490>
2024-08-20 14:47:13,032 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,043 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a18b0>
2024-08-20 14:47:13,049 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:13,050 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:13,051 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286040>
2024-08-20 14:47:13,053 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:13,053 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,054 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0040>
2024-08-20 14:47:13,058 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,059 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157af0>
2024-08-20 14:47:13,059 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,060 - INFO - Created relationship from nan to 1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:13,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#胶基罐、2#胶基罐、3#胶基罐、4#胶基罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,075 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14da00>
2024-08-20 14:47:13,083 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b670>
2024-08-20 14:47:13,085 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:13,086 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dc10>
2024-08-20 14:47:13,089 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157670>
2024-08-20 14:47:13,089 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,090 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0e80>
2024-08-20 14:47:13,092 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,093 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:13,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,095 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286340>
2024-08-20 14:47:13,099 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,110 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151fd0>
2024-08-20 14:47:13,117 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1517f0>
2024-08-20 14:47:13,118 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1760>
2024-08-20 14:47:13,119 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1eb0>
2024-08-20 14:47:13,124 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bb50>
2024-08-20 14:47:13,124 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,125 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1d60>
2024-08-20 14:47:13,129 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,130 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:13,130 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,132 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:13,134 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,145 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a3445e0>
2024-08-20 14:47:13,151 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2861f0>
2024-08-20 14:47:13,152 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286ac0>
2024-08-20 14:47:13,154 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a00>
2024-08-20 14:47:13,155 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a156e20>
2024-08-20 14:47:13,156 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,157 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d280>
2024-08-20 14:47:13,161 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,162 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14da90>
2024-08-20 14:47:13,162 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,164 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b8b0>
2024-08-20 14:47:13,166 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,178 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:13,186 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14deb0>
2024-08-20 14:47:13,188 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d970>
2024-08-20 14:47:13,189 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:13,190 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0eb0>
2024-08-20 14:47:13,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,192 - INFO - Created relationship from 胶基 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286310>
2024-08-20 14:47:13,194 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,195 - INFO - Created relationship from 胶基 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286340>
2024-08-20 14:47:13,195 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '胶基'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,196 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:13,200 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,202 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151e20>
2024-08-20 14:47:13,204 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:13,205 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276b50>
2024-08-20 14:47:13,207 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a16a0>
2024-08-20 14:47:13,207 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151550>
2024-08-20 14:47:13,208 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,209 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:13,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,213 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071d0a0>
2024-08-20 14:47:13,214 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,215 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286160>
2024-08-20 14:47:13,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,229 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a60>
2024-08-20 14:47:13,235 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157af0>
2024-08-20 14:47:13,237 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:13,238 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dd60>
2024-08-20 14:47:13,239 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bdf0>
2024-08-20 14:47:13,240 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,242 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ce2b0>
2024-08-20 14:47:13,246 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,247 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:13,249 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,250 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d08b0>
2024-08-20 14:47:13,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,265 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286e50>
2024-08-20 14:47:13,272 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce6071d160>
2024-08-20 14:47:13,273 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1516d0>
2024-08-20 14:47:13,275 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151310>
2024-08-20 14:47:13,280 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27ba60>
2024-08-20 14:47:13,280 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,281 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b100>
2024-08-20 14:47:13,285 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,286 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0717c0>
2024-08-20 14:47:13,287 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,288 - INFO - Created relationship from nan to 是否为山梨醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5910>
2024-08-20 14:47:13,291 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为山梨醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,305 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddd00>
2024-08-20 14:47:13,312 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc10>
2024-08-20 14:47:13,313 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a071fd0>
2024-08-20 14:47:13,314 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b0a0>
2024-08-20 14:47:13,315 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b400>
2024-08-20 14:47:13,316 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,317 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b580>
2024-08-20 14:47:13,321 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,322 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151f70>
2024-08-20 14:47:13,323 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,324 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a299eb0>
2024-08-20 14:47:13,327 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,345 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286bb0>
2024-08-20 14:47:13,349 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286a30>
2024-08-20 14:47:13,350 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0130>
2024-08-20 14:47:13,352 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:13,354 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fa0>
2024-08-20 14:47:13,354 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,356 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0400>
2024-08-20 14:47:13,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,359 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2863d0>
2024-08-20 14:47:13,359 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,361 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a3446d0>
2024-08-20 14:47:13,365 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,377 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151400>
2024-08-20 14:47:13,381 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b580>
2024-08-20 14:47:13,382 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b9a0>
2024-08-20 14:47:13,383 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b100>
2024-08-20 14:47:13,387 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071fd0>
2024-08-20 14:47:13,388 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,389 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:13,393 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,394 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d130>
2024-08-20 14:47:13,394 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,396 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5940>
2024-08-20 14:47:13,399 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,411 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:13,418 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bd90>
2024-08-20 14:47:13,419 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b730>
2024-08-20 14:47:13,420 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1513d0>
2024-08-20 14:47:13,422 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:13,422 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,423 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a344a00>
2024-08-20 14:47:13,426 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,427 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2862b0>
2024-08-20 14:47:13,427 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,428 - INFO - Created relationship from nan to 1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b50>
2024-08-20 14:47:13,430 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#山梨醇罐、2#山梨醇罐、3#山梨醇罐、4#山梨醇罐'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,443 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a156f40>
2024-08-20 14:47:13,452 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:13,453 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f10>
2024-08-20 14:47:13,454 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d160>
2024-08-20 14:47:13,456 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286610>
2024-08-20 14:47:13,456 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,458 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151820>
2024-08-20 14:47:13,462 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,463 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1517f0>
2024-08-20 14:47:13,464 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,465 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f70>
2024-08-20 14:47:13,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,482 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b3d0>
2024-08-20 14:47:13,490 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:13,491 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0717f0>
2024-08-20 14:47:13,492 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:13,493 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d9a0>
2024-08-20 14:47:13,494 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,495 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd970>
2024-08-20 14:47:13,499 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,499 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a071fa0>
2024-08-20 14:47:13,500 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,501 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b5e0>
2024-08-20 14:47:13,505 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,515 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bfa0>
2024-08-20 14:47:13,521 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f70>
2024-08-20 14:47:13,523 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1513d0>
2024-08-20 14:47:13,524 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1516d0>
2024-08-20 14:47:13,525 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286bb0>
2024-08-20 14:47:13,526 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,527 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce6071df10>
2024-08-20 14:47:13,528 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,529 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d0460>
2024-08-20 14:47:13,530 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,531 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276220>
2024-08-20 14:47:13,533 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,539 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0370>
2024-08-20 14:47:13,544 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce79ff7b80>
2024-08-20 14:47:13,545 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286a00>
2024-08-20 14:47:13,546 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:13,547 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151370>
2024-08-20 14:47:13,548 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,548 - INFO - Created relationship from 山梨醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d90>
2024-08-20 14:47:13,550 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,551 - INFO - Created relationship from 山梨醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bcd0>
2024-08-20 14:47:13,551 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '山梨醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,552 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27be80>
2024-08-20 14:47:13,556 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,557 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a071550>
2024-08-20 14:47:13,558 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd040>
2024-08-20 14:47:13,560 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2769d0>
2024-08-20 14:47:13,560 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276280>
2024-08-20 14:47:13,561 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5730>
2024-08-20 14:47:13,561 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,562 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a071400>
2024-08-20 14:47:13,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,564 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:13,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,565 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b400>
2024-08-20 14:47:13,568 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,573 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:13,577 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151160>
2024-08-20 14:47:13,578 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286e50>
2024-08-20 14:47:13,578 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286910>
2024-08-20 14:47:13,579 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:13,579 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,580 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f10>
2024-08-20 14:47:13,584 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,584 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d03a0>
2024-08-20 14:47:13,586 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,587 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286eb0>
2024-08-20 14:47:13,588 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,594 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286e80>
2024-08-20 14:47:13,599 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151160>
2024-08-20 14:47:13,600 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:13,601 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b3a0>
2024-08-20 14:47:13,605 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:13,606 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,606 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27ba30>
2024-08-20 14:47:13,610 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,610 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5cd0>
2024-08-20 14:47:13,611 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,612 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:13,614 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,619 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a11f0>
2024-08-20 14:47:13,625 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14de80>
2024-08-20 14:47:13,626 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5bb0>
2024-08-20 14:47:13,627 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0711c0>
2024-08-20 14:47:13,628 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b370>
2024-08-20 14:47:13,629 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,629 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bcd0>
2024-08-20 14:47:13,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,633 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1511f0>
2024-08-20 14:47:13,634 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,634 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151760>
2024-08-20 14:47:13,638 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,643 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286550>
2024-08-20 14:47:13,649 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286a00>
2024-08-20 14:47:13,650 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0e80>
2024-08-20 14:47:13,652 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1dc0>
2024-08-20 14:47:13,653 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:13,653 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,654 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a344a00>
2024-08-20 14:47:13,656 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,656 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:13,657 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,658 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151940>
2024-08-20 14:47:13,661 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,666 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151d60>
2024-08-20 14:47:13,671 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f40>
2024-08-20 14:47:13,672 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b5b0>
2024-08-20 14:47:13,673 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:13,677 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071250>
2024-08-20 14:47:13,678 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,678 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd0a0>
2024-08-20 14:47:13,680 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,681 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:13,682 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,683 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:13,687 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,692 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a071c70>
2024-08-20 14:47:13,697 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b760>
2024-08-20 14:47:13,698 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:13,700 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b250>
2024-08-20 14:47:13,703 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151220>
2024-08-20 14:47:13,704 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,705 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151760>
2024-08-20 14:47:13,707 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,708 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286100>
2024-08-20 14:47:13,708 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,709 - INFO - Created relationship from nan to 木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce6071d040>
2024-08-20 14:47:13,713 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,718 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d08b0>
2024-08-20 14:47:13,724 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ce790>
2024-08-20 14:47:13,725 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:13,726 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151670>
2024-08-20 14:47:13,727 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151e50>
2024-08-20 14:47:13,728 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,729 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bc10>
2024-08-20 14:47:13,732 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,733 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:13,733 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,734 - INFO - Created relationship from nan to 1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071250>
2024-08-20 14:47:13,736 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '1#木糖醇罐、2#木糖醇罐、3#木糖醇罐、4#木糖醇罐、木糖醇搅拌罐、木糖醇磨糖机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,742 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ceeb0>
2024-08-20 14:47:13,747 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1430>
2024-08-20 14:47:13,749 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1c40>
2024-08-20 14:47:13,750 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276ac0>
2024-08-20 14:47:13,751 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276940>
2024-08-20 14:47:13,752 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,752 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276b80>
2024-08-20 14:47:13,756 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,756 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:13,757 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,757 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1460>
2024-08-20 14:47:13,761 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,766 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ce700>
2024-08-20 14:47:13,770 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071c70>
2024-08-20 14:47:13,771 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b2e0>
2024-08-20 14:47:13,772 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bc70>
2024-08-20 14:47:13,773 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1516a0>
2024-08-20 14:47:13,774 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,774 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a1514c0>
2024-08-20 14:47:13,778 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,778 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f10>
2024-08-20 14:47:13,779 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,780 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:13,781 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,787 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:13,792 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:13,793 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1516a0>
2024-08-20 14:47:13,794 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bb50>
2024-08-20 14:47:13,795 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bfa0>
2024-08-20 14:47:13,795 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,796 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a071550>
2024-08-20 14:47:13,799 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,800 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5d00>
2024-08-20 14:47:13,800 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,801 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1a60>
2024-08-20 14:47:13,804 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,810 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:13,813 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2763d0>
2024-08-20 14:47:13,815 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fa0>
2024-08-20 14:47:13,815 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276a60>
2024-08-20 14:47:13,816 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce6071d9d0>
2024-08-20 14:47:13,817 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,817 - INFO - Created relationship from 木糖醇 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1ca0>
2024-08-20 14:47:13,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,821 - INFO - Created relationship from 木糖醇 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ceaf0>
2024-08-20 14:47:13,822 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '木糖醇'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,822 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5df0>
2024-08-20 14:47:13,825 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,827 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b9a0>
2024-08-20 14:47:13,828 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b910>
2024-08-20 14:47:13,829 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b610>
2024-08-20 14:47:13,829 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:13,830 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151eb0>
2024-08-20 14:47:13,830 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,830 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a157b80>
2024-08-20 14:47:13,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,834 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a3442b0>
2024-08-20 14:47:13,834 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,834 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151250>
2024-08-20 14:47:13,836 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,841 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27baf0>
2024-08-20 14:47:13,843 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b910>
2024-08-20 14:47:13,844 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b9a0>
2024-08-20 14:47:13,844 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071160>
2024-08-20 14:47:13,845 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ceb80>
2024-08-20 14:47:13,846 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,846 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1d30>
2024-08-20 14:47:13,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,849 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:13,852 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,853 - INFO - Created relationship from nan to 电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276b80>
2024-08-20 14:47:13,855 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,860 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d9a0>
2024-08-20 14:47:13,865 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:13,866 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:13,866 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a19d0>
2024-08-20 14:47:13,867 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2cec40>
2024-08-20 14:47:13,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,868 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606b5e50>
2024-08-20 14:47:13,869 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,870 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b9a0>
2024-08-20 14:47:13,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,871 - INFO - Created relationship from nan to 是否为木糖醇系统所有设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bbe0>
2024-08-20 14:47:13,873 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '是否为木糖醇系统所有设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,879 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b610>
2024-08-20 14:47:13,884 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1517f0>
2024-08-20 14:47:13,885 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:13,886 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d880>
2024-08-20 14:47:13,887 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151130>
2024-08-20 14:47:13,888 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,888 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151e20>
2024-08-20 14:47:13,891 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,892 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b5b0>
2024-08-20 14:47:13,892 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,892 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27ba30>
2024-08-20 14:47:13,897 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,902 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b9d0>
2024-08-20 14:47:13,908 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:13,909 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2ceb20>
2024-08-20 14:47:13,910 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1940>
2024-08-20 14:47:13,911 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a19a0>
2024-08-20 14:47:13,911 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,912 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276a60>
2024-08-20 14:47:13,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,915 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d640>
2024-08-20 14:47:13,915 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,915 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b670>
2024-08-20 14:47:13,918 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,924 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276fd0>
2024-08-20 14:47:13,930 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1b80>
2024-08-20 14:47:13,931 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a19d0>
2024-08-20 14:47:13,932 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:13,933 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0714f0>
2024-08-20 14:47:13,934 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,934 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b790>
2024-08-20 14:47:13,936 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,937 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bca0>
2024-08-20 14:47:13,937 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,937 - INFO - Created relationship from nan to 吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151a00>
2024-08-20 14:47:13,939 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '吊机（电葫芦）-可考虑忽略，电动叉车-墙插充电'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,945 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151340>
2024-08-20 14:47:13,951 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddac0>
2024-08-20 14:47:13,952 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:13,952 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a1517c0>
2024-08-20 14:47:13,956 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bdc0>
2024-08-20 14:47:13,957 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,958 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b790>
2024-08-20 14:47:13,959 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,960 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0710d0>
2024-08-20 14:47:13,961 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,961 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:13,963 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,969 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:13,975 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a13a0>
2024-08-20 14:47:13,976 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276af0>
2024-08-20 14:47:13,977 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f70>
2024-08-20 14:47:13,979 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddbe0>
2024-08-20 14:47:13,979 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:13,980 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d5b0>
2024-08-20 14:47:13,984 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:13,984 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:13,985 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:13,985 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a13d0>
2024-08-20 14:47:13,987 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:13,993 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1a00>
2024-08-20 14:47:13,997 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:13,998 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a071250>
2024-08-20 14:47:13,999 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bdf0>
2024-08-20 14:47:14,000 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b130>
2024-08-20 14:47:14,000 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,001 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:14,003 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,004 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1515b0>
2024-08-20 14:47:14,004 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,005 - INFO - Created relationship from nan to 表面粉搅拌罐、滑石粉振筛机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286310>
2024-08-20 14:47:14,008 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '表面粉搅拌罐、滑石粉振筛机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,013 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151550>
2024-08-20 14:47:14,017 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1511f0>
2024-08-20 14:47:14,017 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bb20>
2024-08-20 14:47:14,018 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bd30>
2024-08-20 14:47:14,019 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071250>
2024-08-20 14:47:14,019 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,020 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606b50a0>
2024-08-20 14:47:14,023 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,024 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a03b940>
2024-08-20 14:47:14,024 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,024 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a15b0>
2024-08-20 14:47:14,026 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,031 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:14,036 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d09a0>
2024-08-20 14:47:14,037 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286a30>
2024-08-20 14:47:14,038 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286eb0>
2024-08-20 14:47:14,039 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276880>
2024-08-20 14:47:14,039 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,040 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a16a0>
2024-08-20 14:47:14,042 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,042 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1730>
2024-08-20 14:47:14,042 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,043 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cec70>
2024-08-20 14:47:14,047 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,052 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a071460>
2024-08-20 14:47:14,057 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b6a0>
2024-08-20 14:47:14,058 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bfd0>
2024-08-20 14:47:14,059 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bca0>
2024-08-20 14:47:14,060 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151f10>
2024-08-20 14:47:14,060 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,061 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ca070>
2024-08-20 14:47:14,063 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,064 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:14,064 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,064 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27ba00>
2024-08-20 14:47:14,066 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,072 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a071400>
2024-08-20 14:47:14,077 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ce700>
2024-08-20 14:47:14,078 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1280>
2024-08-20 14:47:14,079 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b80>
2024-08-20 14:47:14,080 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286e20>
2024-08-20 14:47:14,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,081 - INFO - Created relationship from 表面粉 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286df0>
2024-08-20 14:47:14,084 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,085 - INFO - Created relationship from 表面粉 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddac0>
2024-08-20 14:47:14,085 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '表面粉'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,086 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d1c0>
2024-08-20 14:47:14,088 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,089 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d850>
2024-08-20 14:47:14,091 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd910>
2024-08-20 14:47:14,092 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd6d0>
2024-08-20 14:47:14,092 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286610>
2024-08-20 14:47:14,093 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:14,093 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,094 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1d30>
2024-08-20 14:47:14,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,096 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ceca0>
2024-08-20 14:47:14,096 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,097 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0717c0>
2024-08-20 14:47:14,100 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,106 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b400>
2024-08-20 14:47:14,110 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b430>
2024-08-20 14:47:14,111 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d910>
2024-08-20 14:47:14,112 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d220>
2024-08-20 14:47:14,113 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:14,113 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,114 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b220>
2024-08-20 14:47:14,116 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,116 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:14,118 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,119 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0713d0>
2024-08-20 14:47:14,123 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,129 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:14,135 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1790>
2024-08-20 14:47:14,136 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:14,137 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286400>
2024-08-20 14:47:14,138 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286ee0>
2024-08-20 14:47:14,138 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,139 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb80>
2024-08-20 14:47:14,141 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,142 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151730>
2024-08-20 14:47:14,142 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,143 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddaf0>
2024-08-20 14:47:14,145 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,151 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:14,157 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286f40>
2024-08-20 14:47:14,158 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:14,159 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cefa0>
2024-08-20 14:47:14,160 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5d30>
2024-08-20 14:47:14,161 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,161 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0715e0>
2024-08-20 14:47:14,165 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,165 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bcd0>
2024-08-20 14:47:14,166 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,167 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b610>
2024-08-20 14:47:14,168 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,175 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d640>
2024-08-20 14:47:14,179 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151130>
2024-08-20 14:47:14,180 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d8b0>
2024-08-20 14:47:14,181 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b040>
2024-08-20 14:47:14,185 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b2e0>
2024-08-20 14:47:14,186 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,186 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0717c0>
2024-08-20 14:47:14,188 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,189 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5b20>
2024-08-20 14:47:14,190 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,191 - INFO - Created relationship from nan to 气动泵（气） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1af0>
2024-08-20 14:47:14,193 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '气动泵（气）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,200 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1550>
2024-08-20 14:47:14,205 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286430>
2024-08-20 14:47:14,206 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2863a0>
2024-08-20 14:47:14,207 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dda30>
2024-08-20 14:47:14,208 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151f70>
2024-08-20 14:47:14,209 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,210 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151c40>
2024-08-20 14:47:14,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,214 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb80>
2024-08-20 14:47:14,214 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,215 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286130>
2024-08-20 14:47:14,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,224 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1e80>
2024-08-20 14:47:14,229 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a14c0>
2024-08-20 14:47:14,230 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2cefd0>
2024-08-20 14:47:14,232 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a071760>
2024-08-20 14:47:14,233 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b1f0>
2024-08-20 14:47:14,233 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,235 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bfd0>
2024-08-20 14:47:14,238 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,239 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d4c0>
2024-08-20 14:47:14,239 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,240 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0370>
2024-08-20 14:47:14,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,252 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dd60>
2024-08-20 14:47:14,257 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:14,258 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b490>
2024-08-20 14:47:14,259 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27ba00>
2024-08-20 14:47:14,260 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5d00>
2024-08-20 14:47:14,261 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,262 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2cebb0>
2024-08-20 14:47:14,266 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,267 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:14,267 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,268 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a16a0>
2024-08-20 14:47:14,270 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,278 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286e80>
2024-08-20 14:47:14,284 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ddca0>
2024-08-20 14:47:14,285 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151a00>
2024-08-20 14:47:14,286 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd970>
2024-08-20 14:47:14,288 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286ee0>
2024-08-20 14:47:14,288 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,289 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286370>
2024-08-20 14:47:14,293 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,294 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1730>
2024-08-20 14:47:14,294 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,295 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cecd0>
2024-08-20 14:47:14,299 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,308 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:14,315 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bc70>
2024-08-20 14:47:14,317 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b1f0>
2024-08-20 14:47:14,318 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b5b0>
2024-08-20 14:47:14,319 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dee0>
2024-08-20 14:47:14,320 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,321 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a157af0>
2024-08-20 14:47:14,323 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,324 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d0be0>
2024-08-20 14:47:14,325 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,326 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d550>
2024-08-20 14:47:14,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,338 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:14,345 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b1c0>
2024-08-20 14:47:14,346 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a071100>
2024-08-20 14:47:14,347 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ceee0>
2024-08-20 14:47:14,348 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1130>
2024-08-20 14:47:14,349 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,350 - INFO - Created relationship from 香精 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:14,352 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,353 - INFO - Created relationship from 香精 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286340>
2024-08-20 14:47:14,353 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '香精'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,354 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dddc0>
2024-08-20 14:47:14,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,360 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276d90>
2024-08-20 14:47:14,363 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dddc0>
2024-08-20 14:47:14,364 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286fa0>
2024-08-20 14:47:14,365 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1640>
2024-08-20 14:47:14,366 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1ca0>
2024-08-20 14:47:14,366 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,367 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ceac0>
2024-08-20 14:47:14,372 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,372 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:14,373 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,374 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bc70>
2024-08-20 14:47:14,378 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,389 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bd60>
2024-08-20 14:47:14,394 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:14,396 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:14,401 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276070>
2024-08-20 14:47:14,402 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d08e0>
2024-08-20 14:47:14,403 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,404 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d190>
2024-08-20 14:47:14,406 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,407 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bdc0>
2024-08-20 14:47:14,409 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,410 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b4f0>
2024-08-20 14:47:14,412 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,424 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5bb0>
2024-08-20 14:47:14,431 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ce700>
2024-08-20 14:47:14,432 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1700>
2024-08-20 14:47:14,433 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1e80>
2024-08-20 14:47:14,434 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2865b0>
2024-08-20 14:47:14,435 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,436 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfa0>
2024-08-20 14:47:14,438 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,440 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276790>
2024-08-20 14:47:14,440 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,441 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfd0>
2024-08-20 14:47:14,445 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,455 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2861c0>
2024-08-20 14:47:14,462 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286580>
2024-08-20 14:47:14,463 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1520>
2024-08-20 14:47:14,464 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cef10>
2024-08-20 14:47:14,466 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b50a0>
2024-08-20 14:47:14,466 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,467 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b2e0>
2024-08-20 14:47:14,471 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,472 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27be20>
2024-08-20 14:47:14,472 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,474 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b2b0>
2024-08-20 14:47:14,476 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,490 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d250>
2024-08-20 14:47:14,499 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ca3d0>
2024-08-20 14:47:14,500 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a071100>
2024-08-20 14:47:14,502 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cea90>
2024-08-20 14:47:14,503 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1760>
2024-08-20 14:47:14,503 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,504 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1bb0>
2024-08-20 14:47:14,506 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,507 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2865b0>
2024-08-20 14:47:14,508 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,509 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2763a0>
2024-08-20 14:47:14,511 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,520 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2761c0>
2024-08-20 14:47:14,525 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157b20>
2024-08-20 14:47:14,527 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fa0>
2024-08-20 14:47:14,528 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151af0>
2024-08-20 14:47:14,531 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151dc0>
2024-08-20 14:47:14,532 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,533 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151370>
2024-08-20 14:47:14,537 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,538 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:14,538 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,540 - INFO - Created relationship from nan to 边料拆包机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0040>
2024-08-20 14:47:14,542 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '边料拆包机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,551 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276280>
2024-08-20 14:47:14,559 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276400>
2024-08-20 14:47:14,560 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286fa0>
2024-08-20 14:47:14,562 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286520>
2024-08-20 14:47:14,563 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:14,564 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,565 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ceca0>
2024-08-20 14:47:14,567 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,568 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5700>
2024-08-20 14:47:14,568 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,570 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8b0>
2024-08-20 14:47:14,574 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,584 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5b80>
2024-08-20 14:47:14,590 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ce3d0>
2024-08-20 14:47:14,591 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:14,592 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1d60>
2024-08-20 14:47:14,594 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286340>
2024-08-20 14:47:14,594 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,595 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2763a0>
2024-08-20 14:47:14,599 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,600 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276280>
2024-08-20 14:47:14,600 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,601 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:14,603 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,614 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d09d0>
2024-08-20 14:47:14,620 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1510a0>
2024-08-20 14:47:14,621 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd820>
2024-08-20 14:47:14,623 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:14,624 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151310>
2024-08-20 14:47:14,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,626 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a60>
2024-08-20 14:47:14,630 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,631 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157910>
2024-08-20 14:47:14,631 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,633 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276c10>
2024-08-20 14:47:14,635 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,646 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286e80>
2024-08-20 14:47:14,654 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286130>
2024-08-20 14:47:14,655 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:14,656 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1850>
2024-08-20 14:47:14,657 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ceaf0>
2024-08-20 14:47:14,658 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,660 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0715b0>
2024-08-20 14:47:14,662 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,663 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:14,663 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,664 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1520>
2024-08-20 14:47:14,668 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,679 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1550>
2024-08-20 14:47:14,688 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:14,689 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a286fd0>
2024-08-20 14:47:14,690 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276130>
2024-08-20 14:47:14,691 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157730>
2024-08-20 14:47:14,692 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,693 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a90>
2024-08-20 14:47:14,695 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,696 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ee0>
2024-08-20 14:47:14,697 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,698 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151820>
2024-08-20 14:47:14,702 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,714 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:14,721 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151760>
2024-08-20 14:47:14,723 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce79ff7a90>
2024-08-20 14:47:14,724 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fa0>
2024-08-20 14:47:14,725 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a157730>
2024-08-20 14:47:14,726 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,727 - INFO - Created relationship from 边料拆包机 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276c10>
2024-08-20 14:47:14,731 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,732 - INFO - Created relationship from 边料拆包机 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286df0>
2024-08-20 14:47:14,732 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '边料拆包机'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,733 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286520>
2024-08-20 14:47:14,736 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,738 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1760>
2024-08-20 14:47:14,740 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a14c0>
2024-08-20 14:47:14,742 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:14,743 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14deb0>
2024-08-20 14:47:14,744 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606b5220>
2024-08-20 14:47:14,745 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,746 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:14,749 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,750 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1640>
2024-08-20 14:47:14,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,751 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286f70>
2024-08-20 14:47:14,755 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,768 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276820>
2024-08-20 14:47:14,776 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276b50>
2024-08-20 14:47:14,777 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:14,782 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ee0>
2024-08-20 14:47:14,785 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1514f0>
2024-08-20 14:47:14,785 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,787 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151e50>
2024-08-20 14:47:14,791 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,792 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d370>
2024-08-20 14:47:14,796 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,797 - INFO - Created relationship from nan to 加热：蜡池加热、热熔胶池加热等 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:14,800 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热：蜡池加热、热熔胶池加热等'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,815 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151be0>
2024-08-20 14:47:14,823 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0e80>
2024-08-20 14:47:14,824 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce6071dbb0>
2024-08-20 14:47:14,825 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276340>
2024-08-20 14:47:14,827 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276ac0>
2024-08-20 14:47:14,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,829 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2860a0>
2024-08-20 14:47:14,831 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,832 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:14,833 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,835 - INFO - Created relationship from nan to 无 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b50>
2024-08-20 14:47:14,839 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '无'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,852 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ce700>
2024-08-20 14:47:14,861 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bf40>
2024-08-20 14:47:14,862 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2cef40>
2024-08-20 14:47:14,863 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1f70>
2024-08-20 14:47:14,866 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:14,867 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,868 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286bb0>
2024-08-20 14:47:14,870 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,871 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276250>
2024-08-20 14:47:14,872 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,873 - INFO - Created relationship from nan to 需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2768e0>
2024-08-20 14:47:14,878 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需提供连锁试机清单：YH-WI-GUM-PKG002F02小包装岗位开机检查表（MSS5）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,892 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:14,901 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ee0>
2024-08-20 14:47:14,902 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:14,903 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce79d321f0>
2024-08-20 14:47:14,909 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:14,910 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,911 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14df70>
2024-08-20 14:47:14,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,915 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce79fcb430>
2024-08-20 14:47:14,916 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,918 - INFO - Created relationship from nan to 包装机（所有设备） with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0400>
2024-08-20 14:47:14,923 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装机（所有设备）'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,939 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157760>
2024-08-20 14:47:14,946 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2761c0>
2024-08-20 14:47:14,947 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276760>
2024-08-20 14:47:14,949 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2865e0>
2024-08-20 14:47:14,952 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:14,952 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,954 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a1610>
2024-08-20 14:47:14,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:14,959 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ce700>
2024-08-20 14:47:14,960 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:14,963 - INFO - Created relationship from nan to 小包装除尘系统 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:14,967 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '小包装除尘系统'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:14,982 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2cebe0>
2024-08-20 14:47:14,990 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a19a0>
2024-08-20 14:47:14,991 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1c70>
2024-08-20 14:47:14,992 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286130>
2024-08-20 14:47:14,995 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:14,996 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:14,998 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276790>
2024-08-20 14:47:15,000 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,001 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071dbb0>
2024-08-20 14:47:15,002 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,004 - INFO - Created relationship from nan to 包装产线 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0970>
2024-08-20 14:47:15,009 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '包装产线'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,024 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1515e0>
2024-08-20 14:47:15,030 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14dac0>
2024-08-20 14:47:15,033 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:15,034 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14d400>
2024-08-20 14:47:15,043 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:15,044 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,045 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a90>
2024-08-20 14:47:15,048 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,049 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d90>
2024-08-20 14:47:15,049 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,051 - INFO - Created relationship from nan to 手工操作，不停机，不影响正常生产 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276fd0>
2024-08-20 14:47:15,056 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '手工操作，不停机，不影响正常生产'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,071 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:15,079 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2869d0>
2024-08-20 14:47:15,080 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1af0>
2024-08-20 14:47:15,082 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1d00>
2024-08-20 14:47:15,087 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2cefa0>
2024-08-20 14:47:15,088 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,090 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ca430>
2024-08-20 14:47:15,094 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,095 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1e50>
2024-08-20 14:47:15,095 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,097 - INFO - Created relationship from nan to 加热设备：蜡池加热、热熔胶池加热等，约20分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1af0>
2024-08-20 14:47:15,100 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '加热设备：蜡池加热、热熔胶池加热等，约20分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,115 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a286400>
2024-08-20 14:47:15,121 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276a90>
2024-08-20 14:47:15,123 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276a60>
2024-08-20 14:47:15,124 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f10>
2024-08-20 14:47:15,127 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d03d0>
2024-08-20 14:47:15,127 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,129 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:15,133 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,134 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bac0>
2024-08-20 14:47:15,135 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,137 - INFO - Created relationship from nan to 造盒机、包装机、裂胶机、折胶台 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dbb0>
2024-08-20 14:47:15,141 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '造盒机、包装机、裂胶机、折胶台'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,155 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d490>
2024-08-20 14:47:15,162 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bd30>
2024-08-20 14:47:15,163 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27bbe0>
2024-08-20 14:47:15,165 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0a60>
2024-08-20 14:47:15,166 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:15,166 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,168 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276a60>
2024-08-20 14:47:15,172 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,173 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276cd0>
2024-08-20 14:47:15,174 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,175 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286490>
2024-08-20 14:47:15,179 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,195 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a15b0>
2024-08-20 14:47:15,202 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1fd0>
2024-08-20 14:47:15,203 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d1f0>
2024-08-20 14:47:15,205 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a14dbe0>
2024-08-20 14:47:15,207 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d100>
2024-08-20 14:47:15,207 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,209 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a17c0>
2024-08-20 14:47:15,212 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,213 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1220>
2024-08-20 14:47:15,213 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,215 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2861c0>
2024-08-20 14:47:15,217 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,232 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276400>
2024-08-20 14:47:15,240 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2768b0>
2024-08-20 14:47:15,241 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157b80>
2024-08-20 14:47:15,242 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0520>
2024-08-20 14:47:15,244 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b640>
2024-08-20 14:47:15,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,246 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:15,250 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,251 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2ceee0>
2024-08-20 14:47:15,252 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,253 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b130>
2024-08-20 14:47:15,257 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,270 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b5b0>
2024-08-20 14:47:15,278 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d08b0>
2024-08-20 14:47:15,279 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d60>
2024-08-20 14:47:15,280 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157af0>
2024-08-20 14:47:15,281 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:15,282 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,284 - INFO - Created relationship from 5片小包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286610>
2024-08-20 14:47:15,288 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,289 - INFO - Created relationship from 5片小包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a286100>
2024-08-20 14:47:15,290 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片小包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,291 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a19a0>
2024-08-20 14:47:15,295 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,297 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d760>
2024-08-20 14:47:15,300 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d580>
2024-08-20 14:47:15,302 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14d970>
2024-08-20 14:47:15,303 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1460>
2024-08-20 14:47:15,304 - INFO - Created relationship from Gum Stick to nan with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1a60>
2024-08-20 14:47:15,305 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'nan'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,307 - INFO - Created relationship from nan to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2861c0>
2024-08-20 14:47:15,311 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,312 - INFO - Created relationship from nan to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276400>
2024-08-20 14:47:15,312 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: 'nan'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,314 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2762b0>
2024-08-20 14:47:15,318 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,333 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a157760>
2024-08-20 14:47:15,342 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0520>
2024-08-20 14:47:15,344 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27ba00>
2024-08-20 14:47:15,349 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bc40>
2024-08-20 14:47:15,355 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a344760>
2024-08-20 14:47:15,356 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,358 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b610>
2024-08-20 14:47:15,362 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,363 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27b6d0>
2024-08-20 14:47:15,367 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,370 - INFO - Created relationship from nan to 系统自动加热：几个加热版——无数据采集 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fa0>
2024-08-20 14:47:15,375 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '系统自动加热：几个加热版——无数据采集'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,391 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:15,400 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2762b0>
2024-08-20 14:47:15,401 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:15,403 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286280>
2024-08-20 14:47:15,404 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1280>
2024-08-20 14:47:15,405 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,406 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce606a16d0>
2024-08-20 14:47:15,410 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,411 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:15,412 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,414 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd190>
2024-08-20 14:47:15,418 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,434 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d1f0>
2024-08-20 14:47:15,442 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1d30>
2024-08-20 14:47:15,443 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1a60>
2024-08-20 14:47:15,444 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2865e0>
2024-08-20 14:47:15,446 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286ac0>
2024-08-20 14:47:15,446 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,448 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276280>
2024-08-20 14:47:15,452 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,453 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a157910>
2024-08-20 14:47:15,453 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,455 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d03a0>
2024-08-20 14:47:15,457 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,472 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b970>
2024-08-20 14:47:15,479 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bb50>
2024-08-20 14:47:15,481 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5b50>
2024-08-20 14:47:15,482 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b160>
2024-08-20 14:47:15,485 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b7f0>
2024-08-20 14:47:15,486 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,488 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d09a0>
2024-08-20 14:47:15,492 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,493 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f10>
2024-08-20 14:47:15,494 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,496 - INFO - Created relationship from nan to 皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276070>
2024-08-20 14:47:15,501 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '皮带、堆叠器、激光打码、HSO包膜机、3705包膜机、X光机、中盒检重、热熔胶枪、'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,517 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276c40>
2024-08-20 14:47:15,526 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a286a90>
2024-08-20 14:47:15,528 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:15,529 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1cd0>
2024-08-20 14:47:15,532 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14d310>
2024-08-20 14:47:15,533 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,535 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a071550>
2024-08-20 14:47:15,539 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,540 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14d610>
2024-08-20 14:47:15,540 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,543 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1b50>
2024-08-20 14:47:15,546 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,561 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1700>
2024-08-20 14:47:15,570 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:15,571 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2769a0>
2024-08-20 14:47:15,573 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276370>
2024-08-20 14:47:15,574 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:15,574 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,576 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0eb0>
2024-08-20 14:47:15,580 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,581 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a27bc70>
2024-08-20 14:47:15,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,583 - INFO - Created relationship from nan to 需要停机：一两分钟 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bf70>
2024-08-20 14:47:15,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '需要停机：一两分钟'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,601 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151130>
2024-08-20 14:47:15,610 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27bb50>
2024-08-20 14:47:15,612 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b9d0>
2024-08-20 14:47:15,614 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0eb0>
2024-08-20 14:47:15,619 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:15,620 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,621 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276370>
2024-08-20 14:47:15,624 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,625 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2761c0>
2024-08-20 14:47:15,626 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,628 - INFO - Created relationship from nan to 20分钟左右 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286f40>
2024-08-20 14:47:15,633 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '20分钟左右'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,648 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:15,657 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1be0>
2024-08-20 14:47:15,658 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a14dcd0>
2024-08-20 14:47:15,660 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151e50>
2024-08-20 14:47:15,661 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dda30>
2024-08-20 14:47:15,662 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,663 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a14d0a0>
2024-08-20 14:47:15,667 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,668 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a16a0>
2024-08-20 14:47:15,669 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,670 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:15,673 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,687 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce79ff7b80>
2024-08-20 14:47:15,696 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276790>
2024-08-20 14:47:15,697 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:15,698 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d08e0>
2024-08-20 14:47:15,699 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:15,700 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,702 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b1c0>
2024-08-20 14:47:15,705 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,706 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2cac40>
2024-08-20 14:47:15,707 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,708 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27b130>
2024-08-20 14:47:15,712 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,725 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b730>
2024-08-20 14:47:15,733 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d07c0>
2024-08-20 14:47:15,734 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:15,735 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276370>
2024-08-20 14:47:15,737 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2763d0>
2024-08-20 14:47:15,737 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,739 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:15,743 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,744 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1130>
2024-08-20 14:47:15,744 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,746 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1d60>
2024-08-20 14:47:15,750 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,779 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a14ddf0>
2024-08-20 14:47:15,788 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ca490>
2024-08-20 14:47:15,791 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1220>
2024-08-20 14:47:15,797 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a1eb0>
2024-08-20 14:47:15,807 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:15,813 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,817 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a157640>
2024-08-20 14:47:15,821 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,822 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2d07c0>
2024-08-20 14:47:15,823 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,825 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cafa0>
2024-08-20 14:47:15,827 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,834 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a1516a0>
2024-08-20 14:47:15,842 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151b80>
2024-08-20 14:47:15,844 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606b5220>
2024-08-20 14:47:15,846 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd040>
2024-08-20 14:47:15,847 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a071fd0>
2024-08-20 14:47:15,848 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,849 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2dd790>
2024-08-20 14:47:15,851 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,852 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8b0>
2024-08-20 14:47:15,853 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,854 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:15,858 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,866 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a151220>
2024-08-20 14:47:15,873 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ca700>
2024-08-20 14:47:15,875 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0eb0>
2024-08-20 14:47:15,876 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f70>
2024-08-20 14:47:15,877 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276250>
2024-08-20 14:47:15,878 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,880 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a276760>
2024-08-20 14:47:15,883 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,884 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1490>
2024-08-20 14:47:15,884 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,886 - INFO - Created relationship from nan to CP28 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ceca0>
2024-08-20 14:47:15,891 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'CP28'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,900 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1490>
2024-08-20 14:47:15,906 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:15,908 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276250>
2024-08-20 14:47:15,910 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a157610>
2024-08-20 14:47:15,913 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0970>
2024-08-20 14:47:15,914 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,915 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2caee0>
2024-08-20 14:47:15,919 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,920 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a1512b0>
2024-08-20 14:47:15,920 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,922 - INFO - Created relationship from nan to 设备管理系统-可忽略能耗，追溯码 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a151130>
2024-08-20 14:47:15,926 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '设备管理系统-可忽略能耗，追溯码'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,937 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606b5df0>
2024-08-20 14:47:15,943 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd040>
2024-08-20 14:47:15,945 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a27b520>
2024-08-20 14:47:15,947 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2dd640>
2024-08-20 14:47:15,950 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a03b940>
2024-08-20 14:47:15,950 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,952 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a151250>
2024-08-20 14:47:15,956 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:15,957 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a151340>
2024-08-20 14:47:15,958 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:15,961 - INFO - Created relationship from nan to 大箱喷码机 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2caaf0>
2024-08-20 14:47:15,964 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '大箱喷码机'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:15,980 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b20>
2024-08-20 14:47:15,988 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:15,989 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a276940>
2024-08-20 14:47:15,990 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a276760>
2024-08-20 14:47:15,995 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1400>
2024-08-20 14:47:15,995 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:15,997 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27b910>
2024-08-20 14:47:16,001 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,002 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce606a1e80>
2024-08-20 14:47:16,003 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,006 - INFO - Created relationship from nan to 转箭过程待机，无其他能源消耗 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2768e0>
2024-08-20 14:47:16,011 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '转箭过程待机，无其他能源消耗'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,031 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276790>
2024-08-20 14:47:16,037 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d60>
2024-08-20 14:47:16,039 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2d0fa0>
2024-08-20 14:47:16,040 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ca880>
2024-08-20 14:47:16,041 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1517f0>
2024-08-20 14:47:16,042 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:16,043 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a1514f0>
2024-08-20 14:47:16,047 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,048 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a03b670>
2024-08-20 14:47:16,048 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,050 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2ddc70>
2024-08-20 14:47:16,053 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,063 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a27ba00>
2024-08-20 14:47:16,071 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a27b850>
2024-08-20 14:47:16,072 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a2dd8e0>
2024-08-20 14:47:16,074 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606b5940>
2024-08-20 14:47:16,075 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:16,075 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:16,077 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:16,079 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,080 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071dbe0>
2024-08-20 14:47:16,080 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,082 - INFO - Created relationship from nan to nan with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ee0>
2024-08-20 14:47:16,086 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: 'nan'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,097 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a276fd0>
2024-08-20 14:47:16,104 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a276970>
2024-08-20 14:47:16,105 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a1f40>
2024-08-20 14:47:16,107 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce606a11c0>
2024-08-20 14:47:16,108 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:16,109 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:16,110 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2768b0>
2024-08-20 14:47:16,114 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,115 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a2767c0>
2024-08-20 14:47:16,115 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,117 - INFO - Created relationship from nan to 产线处于计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a0b9fd0>
2024-08-20 14:47:16,120 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,132 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f70>
2024-08-20 14:47:16,137 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ca700>
2024-08-20 14:47:16,138 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a151640>
2024-08-20 14:47:16,140 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a03b670>
2024-08-20 14:47:16,141 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2dd5e0>
2024-08-20 14:47:16,142 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:16,143 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a27bfd0>
2024-08-20 14:47:16,147 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,148 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a14de80>
2024-08-20 14:47:16,149 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,150 - INFO - Created relationship from nan to 产线处于非计划停机的状态，并非停机的过程 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a27bb50>
2024-08-20 14:47:16,154 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '产线处于非计划停机的状态，并非停机的过程'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,166 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce7a2ddb80>
2024-08-20 14:47:16,174 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a151310>
2024-08-20 14:47:16,175 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce7a1513d0>
2024-08-20 14:47:16,177 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2cac70>
2024-08-20 14:47:16,178 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f70>
2024-08-20 14:47:16,178 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:16,180 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a0b9bb0>
2024-08-20 14:47:16,184 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,185 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce7a276d30>
2024-08-20 14:47:16,185 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,187 - INFO - Created relationship from nan to 每台设备都存在异常情况，当一台异常时，其他处于何种状态 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2761c0>
2024-08-20 14:47:16,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '每台设备都存在异常情况，当一台异常时，其他处于何种状态'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,204 - INFO - Created node with label Step: <neo4j._sync.work.result.Result object at 0x7fce606a1eb0>
2024-08-20 14:47:16,214 - INFO - Created node with label Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a14da90>
2024-08-20 14:47:16,215 - INFO - Created node with label Process: <neo4j._sync.work.result.Result object at 0x7fce606a19d0>
2024-08-20 14:47:16,216 - INFO - Created node with label Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2762b0>
2024-08-20 14:47:16,218 - INFO - Created relationship from Gum Stick to Gum Stick with type HAS_Value_Stream: <neo4j._sync.work.result.Result object at 0x7fce7a2ceeb0>
2024-08-20 14:47:16,218 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Product {name: 'Gum Stick'}), (b:Value_Stream {name: 'Gum Stick'}) MERGE (a)-[:HAS_Value_Stream]->(b)"
2024-08-20 14:47:16,220 - INFO - Created relationship from 5片中大包装 to nan with type HAS_Step: <neo4j._sync.work.result.Result object at 0x7fce7a2d0580>
2024-08-20 14:47:16,224 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Step {name: 'nan'}) MERGE (a)-[:HAS_Step]->(b)"
2024-08-20 14:47:16,225 - INFO - Created relationship from 5片中大包装 to Gum Stick with type HAS_Product: <neo4j._sync.work.result.Result object at 0x7fce6071dbe0>
2024-08-20 14:47:16,225 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Process {name: '5片中大包装'}), (b:Product {name: 'Gum Stick'}) MERGE (a)-[:HAS_Product]->(b)"
2024-08-20 14:47:16,227 - INFO - Created relationship from nan to 照明设备、空调设备 with type HAS_Machine: <neo4j._sync.work.result.Result object at 0x7fce7a2faa00>
2024-08-20 14:47:16,231 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Step {name: 'nan'}), (b:Machine {name: '照明设备、空调设备'}) MERGE (a)-[:HAS_Machine]->(b)"
2024-08-20 14:47:16,240 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151dc0>
2024-08-20 14:47:16,245 - INFO - Created relationship from Extruder to 挤压机螺杆转速 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b50a0>
2024-08-20 14:47:16,249 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机螺杆转速'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,257 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2dd970>
2024-08-20 14:47:16,263 - INFO - Created relationship from Extruder to 挤压机料位高低 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a27b5e0>
2024-08-20 14:47:16,265 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机料位高低'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,273 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d460>
2024-08-20 14:47:16,279 - INFO - Created relationship from Extruder to 挤压机出口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0715b0>
2024-08-20 14:47:16,281 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机出口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,289 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2ddbb0>
2024-08-20 14:47:16,295 - INFO - Created relationship from Extruder to 挤压机夹套温度上 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5e50>
2024-08-20 14:47:16,297 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,304 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151f40>
2024-08-20 14:47:16,310 - INFO - Created relationship from Extruder to 挤压机夹套温度下 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151be0>
2024-08-20 14:47:16,313 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,320 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2ca850>
2024-08-20 14:47:16,325 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b50>
2024-08-20 14:47:16,329 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,335 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:16,339 - INFO - Created relationship from Extruder to 挤压机压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2769a0>
2024-08-20 14:47:16,341 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,347 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a17c0>
2024-08-20 14:47:16,354 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度1 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286280>
2024-08-20 14:47:16,358 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度1'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,366 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a1370>
2024-08-20 14:47:16,371 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度2 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2768e0>
2024-08-20 14:47:16,374 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度2'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,382 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:16,389 - INFO - Created relationship from Extruder to 挤压机夹套温度上（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b50>
2024-08-20 14:47:16,391 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度上（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,394 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a242940>
2024-08-20 14:47:16,397 - INFO - Created relationship from Extruder to 挤压机夹套温度下（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1515b0>
2024-08-20 14:47:16,400 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度下（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,407 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1516d0>
2024-08-20 14:47:16,413 - INFO - Created relationship from Extruder to 挤压机夹套温度嘴（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5ac0>
2024-08-20 14:47:16,416 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机夹套温度嘴（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,423 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2dd580>
2024-08-20 14:47:16,428 - INFO - Created relationship from Extruder to 挤压机喂胶轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce79ff7a90>
2024-08-20 14:47:16,432 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机喂胶轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,442 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286ac0>
2024-08-20 14:47:16,447 - INFO - Created relationship from Extruder to 挤压机入口温度_Max with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286430>
2024-08-20 14:47:16,449 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Max'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,457 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2ddfd0>
2024-08-20 14:47:16,463 - INFO - Created relationship from Extruder to 挤压机入口温度_Min with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5730>
2024-08-20 14:47:16,467 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Min'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,477 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:16,483 - INFO - Created relationship from Extruder to 挤压机入口温度_Avg with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151730>
2024-08-20 14:47:16,487 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Extruder'}), (b:Parameter {name: '挤压机入口温度_Avg'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,497 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2caf70>
2024-08-20 14:47:16,502 - INFO - Created relationship from Rolling Powder to 表面粉下表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d03a0>
2024-08-20 14:47:16,504 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,514 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1576a0>
2024-08-20 14:47:16,519 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276220>
2024-08-20 14:47:16,522 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,530 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276cd0>
2024-08-20 14:47:16,537 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a278100>
2024-08-20 14:47:16,541 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,550 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276940>
2024-08-20 14:47:16,554 - INFO - Created relationship from Rolling Powder to 表面粉上表面粉皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a157760>
2024-08-20 14:47:16,556 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上表面粉皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,563 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0970>
2024-08-20 14:47:16,568 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0040>
2024-08-20 14:47:16,572 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,579 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1513d0>
2024-08-20 14:47:16,583 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151490>
2024-08-20 14:47:16,587 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,594 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286490>
2024-08-20 14:47:16,601 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286340>
2024-08-20 14:47:16,604 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,613 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d2e0>
2024-08-20 14:47:16,619 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌机速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d250>
2024-08-20 14:47:16,623 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌机速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,633 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14de50>
2024-08-20 14:47:16,640 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d250>
2024-08-20 14:47:16,644 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,653 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:16,658 - INFO - Created relationship from Rolling Powder to 表面粉上搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286280>
2024-08-20 14:47:16,662 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,671 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286040>
2024-08-20 14:47:16,678 - INFO - Created relationship from Rolling Powder to 表面粉下搅拌器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1519a0>
2024-08-20 14:47:16,682 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下搅拌器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,692 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:16,699 - INFO - Created relationship from Rolling Powder to 表面粉回粉皮带（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a242ca0>
2024-08-20 14:47:16,703 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉回粉皮带（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,713 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ee0>
2024-08-20 14:47:16,720 - INFO - Created relationship from Rolling Powder to 表面粉上螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a157af0>
2024-08-20 14:47:16,724 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,733 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2768b0>
2024-08-20 14:47:16,739 - INFO - Created relationship from Rolling Powder to 表面粉下螺杆（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2dd580>
2024-08-20 14:47:16,741 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下螺杆（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,751 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276a30>
2024-08-20 14:47:16,757 - INFO - Created relationship from Rolling Powder to 表面粉上涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1578e0>
2024-08-20 14:47:16,761 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉上涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,770 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0ac0>
2024-08-20 14:47:16,778 - INFO - Created relationship from Rolling Powder to 表面粉下涂抹器（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a03b670>
2024-08-20 14:47:16,782 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Rolling Powder'}), (b:Parameter {name: '表面粉下涂抹器（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,797 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1510d0>
2024-08-20 14:47:16,803 - INFO - Created relationship from Bull Roller to 大辊速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1517c0>
2024-08-20 14:47:16,807 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,815 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286520>
2024-08-20 14:47:16,821 - INFO - Created relationship from Bull Roller to 大辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286e50>
2024-08-20 14:47:16,825 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,840 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14dac0>
2024-08-20 14:47:16,849 - INFO - Created relationship from Bull Roller to 大辊速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14deb0>
2024-08-20 14:47:16,851 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,868 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce79ff7a90>
2024-08-20 14:47:16,876 - INFO - Created relationship from Bull Roller to 大辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d160>
2024-08-20 14:47:16,880 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Bull Roller'}), (b:Parameter {name: '大辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,883 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14dc40>
2024-08-20 14:47:16,888 - INFO - Created relationship from 1st Roller to 1号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5cd0>
2024-08-20 14:47:16,892 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,908 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286a00>
2024-08-20 14:47:16,915 - INFO - Created relationship from 1st Roller to 1号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151c10>
2024-08-20 14:47:16,919 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,922 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151610>
2024-08-20 14:47:16,928 - INFO - Created relationship from 1st Roller to 1号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2caf40>
2024-08-20 14:47:16,930 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,942 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0e50>
2024-08-20 14:47:16,948 - INFO - Created relationship from 1st Roller to 1号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:16,951 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '1st Roller'}), (b:Parameter {name: '1号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,954 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276430>
2024-08-20 14:47:16,958 - INFO - Created relationship from 2nd Roller to 2号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a27b8e0>
2024-08-20 14:47:16,962 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,964 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2760a0>
2024-08-20 14:47:16,968 - INFO - Created relationship from 2nd Roller to 2号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0b9c70>
2024-08-20 14:47:16,971 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,974 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0460>
2024-08-20 14:47:16,980 - INFO - Created relationship from 2nd Roller to 2号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2ca700>
2024-08-20 14:47:16,983 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,986 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151a00>
2024-08-20 14:47:16,991 - INFO - Created relationship from 2nd Roller to 2号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1515b0>
2024-08-20 14:47:16,993 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '2nd Roller'}), (b:Parameter {name: '2号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:16,996 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286370>
2024-08-20 14:47:17,002 - INFO - Created relationship from 3rd Roller to 3号辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5b50>
2024-08-20 14:47:17,005 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,019 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14dc40>
2024-08-20 14:47:17,025 - INFO - Created relationship from 3rd Roller to 3号辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d850>
2024-08-20 14:47:17,029 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,034 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a27b070>
2024-08-20 14:47:17,039 - INFO - Created relationship from 3rd Roller to 3号辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14dc70>
2024-08-20 14:47:17,043 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,045 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d3d0>
2024-08-20 14:47:17,049 - INFO - Created relationship from 3rd Roller to 3号辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2861c0>
2024-08-20 14:47:17,053 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: '3rd Roller'}), (b:Parameter {name: '3号辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,067 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286df0>
2024-08-20 14:47:17,072 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151fa0>
2024-08-20 14:47:17,075 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,087 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151910>
2024-08-20 14:47:17,094 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:17,098 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,101 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d08e0>
2024-08-20 14:47:17,106 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1576d0>
2024-08-20 14:47:17,110 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,112 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2767c0>
2024-08-20 14:47:17,118 - INFO - Created relationship from Cooling Roller1 to 1号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a27b3d0>
2024-08-20 14:47:17,121 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,122 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276910>
2024-08-20 14:47:17,126 - INFO - Created relationship from Cooling Roller1 to 入口胶温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1576a0>
2024-08-20 14:47:17,130 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '入口胶温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,133 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f40>
2024-08-20 14:47:17,139 - INFO - Created relationship from Forming Roller to Forming Roller 辊轮速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0f10>
2024-08-20 14:47:17,143 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 辊轮速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,159 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151940>
2024-08-20 14:47:17,166 - INFO - Created relationship from Forming Roller to Forming Roller 定型辊间隙（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151f10>
2024-08-20 14:47:17,169 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Forming Roller'}), (b:Parameter {name: 'Forming Roller 定型辊间隙（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,171 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286ee0>
2024-08-20 14:47:17,176 - INFO - Created relationship from Cooling Roller1 to Cooling Roller 辊轮速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:17,180 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: 'Cooling Roller 辊轮速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,183 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14dfd0>
2024-08-20 14:47:17,187 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14daf0>
2024-08-20 14:47:17,191 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,201 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a1580>
2024-08-20 14:47:17,206 - INFO - Created relationship from Cooling Roller1 to 1号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d7f0>
2024-08-20 14:47:17,210 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,212 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d790>
2024-08-20 14:47:17,217 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286310>
2024-08-20 14:47:17,221 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,224 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286280>
2024-08-20 14:47:17,228 - INFO - Created relationship from Cooling Roller2 to 2号冷辊入口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151b80>
2024-08-20 14:47:17,232 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊入口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,234 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1516a0>
2024-08-20 14:47:17,240 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d03d0>
2024-08-20 14:47:17,244 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,246 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce6071d1c0>
2024-08-20 14:47:17,252 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a157850>
2024-08-20 14:47:17,256 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,280 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276520>
2024-08-20 14:47:17,288 - INFO - Created relationship from Cooling Roller1 to 1号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a1910>
2024-08-20 14:47:17,292 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,295 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276ac0>
2024-08-20 14:47:17,299 - INFO - Created relationship from Cooling Roller1 to 1号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a157790>
2024-08-20 14:47:17,303 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '1号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,306 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b80>
2024-08-20 14:47:17,311 - INFO - Created relationship from Cooling Roller1 to 冷辊温度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a044ee0>
2024-08-20 14:47:17,315 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊温度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,319 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151af0>
2024-08-20 14:47:17,333 - INFO - Created relationship from Cooling Roller1 to 冷辊露点 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151f70>
2024-08-20 14:47:17,337 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller1'}), (b:Parameter {name: '冷辊露点'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,340 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2864c0>
2024-08-20 14:47:17,347 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口压力 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286040>
2024-08-20 14:47:17,350 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口压力'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,354 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d9a0>
2024-08-20 14:47:17,359 - INFO - Created relationship from Cooling Roller2 to 2号冷辊出口温度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d160>
2024-08-20 14:47:17,362 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊出口温度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,366 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a1430>
2024-08-20 14:47:17,371 - INFO - Created relationship from Cooling Roller2 to 出口胶温度L with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce79ff7b80>
2024-08-20 14:47:17,375 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度L'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,379 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d6d0>
2024-08-20 14:47:17,385 - INFO - Created relationship from Cooling Roller2 to 出口胶温度R with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5b50>
2024-08-20 14:47:17,389 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '出口胶温度R'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,392 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286430>
2024-08-20 14:47:17,401 - INFO - Created relationship from Cooling Roller2 to 2号冷辊皮带速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151c70>
2024-08-20 14:47:17,405 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊皮带速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,409 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151af0>
2024-08-20 14:47:17,416 - INFO - Created relationship from Cooling Roller2 to 2号冷辊转速（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2ca7f0>
2024-08-20 14:47:17,419 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Cooling Roller2'}), (b:Parameter {name: '2号冷辊转速（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,421 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0b80>
2024-08-20 14:47:17,426 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f10>
2024-08-20 14:47:17,430 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,433 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:17,439 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2ce3d0>
2024-08-20 14:47:17,443 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,458 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276460>
2024-08-20 14:47:17,465 - INFO - Created relationship from Sheeting Machine to 切片产线速度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1576a0>
2024-08-20 14:47:17,469 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片产线速度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,472 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0520>
2024-08-20 14:47:17,479 - INFO - Created relationship from Scoring Roller to Circular Scoring Rollers 圆刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a156e20>
2024-08-20 14:47:17,482 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Circular Scoring Rollers 圆刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,485 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151520>
2024-08-20 14:47:17,491 - INFO - Created relationship from Scoring Roller to Cross Scoring Rollers 横刀速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1518b0>
2024-08-20 14:47:17,495 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Scoring Roller'}), (b:Parameter {name: 'Cross Scoring Rollers 横刀速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,499 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286940>
2024-08-20 14:47:17,509 - INFO - Created relationship from SPC Weighter to 口香糖重量 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286e20>
2024-08-20 14:47:17,513 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖重量'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,516 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d070>
2024-08-20 14:47:17,522 - INFO - Created relationship from SPC Weighter to 口香糖单片长度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d2b0>
2024-08-20 14:47:17,526 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片长度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,529 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0710d0>
2024-08-20 14:47:17,534 - INFO - Created relationship from SPC Weighter to 口香糖单片宽度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2dd550>
2024-08-20 14:47:17,538 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片宽度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,541 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a14d3a0>
2024-08-20 14:47:17,548 - INFO - Created relationship from SPC Weighter to 口香糖单片深度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606b5c10>
2024-08-20 14:47:17,552 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片深度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,554 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a286fd0>
2024-08-20 14:47:17,558 - INFO - Created relationship from SPC Weighter to 口香糖单片厚度 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151640>
2024-08-20 14:47:17,562 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖单片厚度'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,564 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151e50>
2024-08-20 14:47:17,569 - INFO - Created relationship from SPC Weighter to 口香糖生产班次 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2caf70>
2024-08-20 14:47:17,572 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖生产班次'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,574 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d03a0>
2024-08-20 14:47:17,579 - INFO - Created relationship from SPC Weighter to 口香糖香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0b9f10>
2024-08-20 14:47:17,582 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'SPC Weighter'}), (b:Parameter {name: '口香糖香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,597 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a276d60>
2024-08-20 14:47:17,605 - INFO - Created relationship from Sheeting Machine to 系统速度（设定值） with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a278550>
2024-08-20 14:47:17,609 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '系统速度（设定值）'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,623 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a0b9d60>
2024-08-20 14:47:17,629 - INFO - Created relationship from Mixer1 to Mixer1_配方名称 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2d0940>
2024-08-20 14:47:17,632 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方名称'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,645 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2caca0>
2024-08-20 14:47:17,652 - INFO - Created relationship from Mixer1 to Mixer1_配方代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a1511f0>
2024-08-20 14:47:17,656 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Mixer1'}), (b:Parameter {name: 'Mixer1_配方代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,670 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a151dc0>
2024-08-20 14:47:17,677 - INFO - Created relationship from Sheeting Machine to 切片机运行状态 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2866a0>
2024-08-20 14:47:17,681 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机运行状态'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,693 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a071d30>
2024-08-20 14:47:17,699 - INFO - Created relationship from Sheeting Machine to 停机时间 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a2cef40>
2024-08-20 14:47:17,702 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '停机时间'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,712 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a11c0>
2024-08-20 14:47:17,718 - INFO - Created relationship from Sheeting Machine to 切片机状态代码 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a27bbe0>
2024-08-20 14:47:17,722 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: '切片机状态代码'}) MERGE (a)-[:HAS_Parameter]->(b)"
2024-08-20 14:47:17,732 - INFO - Created node with label Parameter: <neo4j._sync.work.result.Result object at 0x7fce7a27b700>
2024-08-20 14:47:17,738 - INFO - Created relationship from Sheeting Machine to SKU香型 with type HAS_Parameter: <neo4j._sync.work.result.Result object at 0x7fce606a1760>
2024-08-20 14:47:17,742 - INFO - Received notification from DBMS server: {severity: INFORMATION} {code: Neo.ClientNotification.Statement.CartesianProduct} {category: PERFORMANCE} {title: This query builds a cartesian product between disconnected patterns.} {description: If a part of a query contains multiple disconnected patterns, this will build a cartesian product between all those parts. This may produce a large amount of data and slow down query processing. While occasionally intended, it may often be possible to reformulate the query that avoids the use of this cross product, perhaps by adding a relationship between the different parts or by using OPTIONAL MATCH (identifier is: (b))} {position: line: 1, column: 1, offset: 0} for query: "MATCH (a:Machine {name: 'Sheeting Machine'}), (b:Parameter {name: 'SKU香型'}) MERGE (a)-[:HAS_Parameter]->(b)"
